/*
Marlowe Runtime REST API

REST API for Marlowe Runtime

API version: 0.0.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marloweruntime

import (
	"encoding/json"
)

// checks if the ContractState type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContractState{}

// ContractState struct for ContractState
type ContractState struct {
	Assets Assets `json:"assets"`
	Block *BlockHeader `json:"block,omitempty"`
	Continuations *string `json:"continuations,omitempty"`
	// A reference to a transaction output with a transaction ID and index.
	ContractId string `json:"contractId"`
	CurrentContract *Contract `json:"currentContract,omitempty"`
	InitialContract Contract `json:"initialContract"`
	Metadata map[string]Metadata `json:"metadata"`
	// The hex-encoded minting policy ID for a native Cardano token
	RoleTokenMintingPolicyId string `json:"roleTokenMintingPolicyId"`
	State *MarloweState `json:"state,omitempty"`
	Status TxStatus `json:"status"`
	Tags map[string]Metadata `json:"tags"`
	TxBody *TextEnvelope `json:"txBody,omitempty"`
	UnclaimedPayouts []Payout `json:"unclaimedPayouts"`
	// A reference to a transaction output with a transaction ID and index.
	Utxo *string `json:"utxo,omitempty"`
	Version MarloweVersion `json:"version"`
}

// NewContractState instantiates a new ContractState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContractState(assets Assets, contractId string, initialContract Contract, metadata map[string]Metadata, roleTokenMintingPolicyId string, status TxStatus, tags map[string]Metadata, unclaimedPayouts []Payout, version MarloweVersion) *ContractState {
	this := ContractState{}
	this.Assets = assets
	this.ContractId = contractId
	this.InitialContract = initialContract
	this.Metadata = metadata
	this.RoleTokenMintingPolicyId = roleTokenMintingPolicyId
	this.Status = status
	this.Tags = tags
	this.UnclaimedPayouts = unclaimedPayouts
	this.Version = version
	return &this
}

// NewContractStateWithDefaults instantiates a new ContractState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContractStateWithDefaults() *ContractState {
	this := ContractState{}
	return &this
}

// GetAssets returns the Assets field value
func (o *ContractState) GetAssets() Assets {
	if o == nil {
		var ret Assets
		return ret
	}

	return o.Assets
}

// GetAssetsOk returns a tuple with the Assets field value
// and a boolean to check if the value has been set.
func (o *ContractState) GetAssetsOk() (*Assets, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Assets, true
}

// SetAssets sets field value
func (o *ContractState) SetAssets(v Assets) {
	o.Assets = v
}

// GetBlock returns the Block field value if set, zero value otherwise.
func (o *ContractState) GetBlock() BlockHeader {
	if o == nil || IsNil(o.Block) {
		var ret BlockHeader
		return ret
	}
	return *o.Block
}

// GetBlockOk returns a tuple with the Block field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractState) GetBlockOk() (*BlockHeader, bool) {
	if o == nil || IsNil(o.Block) {
		return nil, false
	}
	return o.Block, true
}

// HasBlock returns a boolean if a field has been set.
func (o *ContractState) HasBlock() bool {
	if o != nil && !IsNil(o.Block) {
		return true
	}

	return false
}

// SetBlock gets a reference to the given BlockHeader and assigns it to the Block field.
func (o *ContractState) SetBlock(v BlockHeader) {
	o.Block = &v
}

// GetContinuations returns the Continuations field value if set, zero value otherwise.
func (o *ContractState) GetContinuations() string {
	if o == nil || IsNil(o.Continuations) {
		var ret string
		return ret
	}
	return *o.Continuations
}

// GetContinuationsOk returns a tuple with the Continuations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractState) GetContinuationsOk() (*string, bool) {
	if o == nil || IsNil(o.Continuations) {
		return nil, false
	}
	return o.Continuations, true
}

// HasContinuations returns a boolean if a field has been set.
func (o *ContractState) HasContinuations() bool {
	if o != nil && !IsNil(o.Continuations) {
		return true
	}

	return false
}

// SetContinuations gets a reference to the given string and assigns it to the Continuations field.
func (o *ContractState) SetContinuations(v string) {
	o.Continuations = &v
}

// GetContractId returns the ContractId field value
func (o *ContractState) GetContractId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContractId
}

// GetContractIdOk returns a tuple with the ContractId field value
// and a boolean to check if the value has been set.
func (o *ContractState) GetContractIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContractId, true
}

// SetContractId sets field value
func (o *ContractState) SetContractId(v string) {
	o.ContractId = v
}

// GetCurrentContract returns the CurrentContract field value if set, zero value otherwise.
func (o *ContractState) GetCurrentContract() Contract {
	if o == nil || IsNil(o.CurrentContract) {
		var ret Contract
		return ret
	}
	return *o.CurrentContract
}

// GetCurrentContractOk returns a tuple with the CurrentContract field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractState) GetCurrentContractOk() (*Contract, bool) {
	if o == nil || IsNil(o.CurrentContract) {
		return nil, false
	}
	return o.CurrentContract, true
}

// HasCurrentContract returns a boolean if a field has been set.
func (o *ContractState) HasCurrentContract() bool {
	if o != nil && !IsNil(o.CurrentContract) {
		return true
	}

	return false
}

// SetCurrentContract gets a reference to the given Contract and assigns it to the CurrentContract field.
func (o *ContractState) SetCurrentContract(v Contract) {
	o.CurrentContract = &v
}

// GetInitialContract returns the InitialContract field value
func (o *ContractState) GetInitialContract() Contract {
	if o == nil {
		var ret Contract
		return ret
	}

	return o.InitialContract
}

// GetInitialContractOk returns a tuple with the InitialContract field value
// and a boolean to check if the value has been set.
func (o *ContractState) GetInitialContractOk() (*Contract, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InitialContract, true
}

// SetInitialContract sets field value
func (o *ContractState) SetInitialContract(v Contract) {
	o.InitialContract = v
}

// GetMetadata returns the Metadata field value
func (o *ContractState) GetMetadata() map[string]Metadata {
	if o == nil {
		var ret map[string]Metadata
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *ContractState) GetMetadataOk() (*map[string]Metadata, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *ContractState) SetMetadata(v map[string]Metadata) {
	o.Metadata = v
}

// GetRoleTokenMintingPolicyId returns the RoleTokenMintingPolicyId field value
func (o *ContractState) GetRoleTokenMintingPolicyId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RoleTokenMintingPolicyId
}

// GetRoleTokenMintingPolicyIdOk returns a tuple with the RoleTokenMintingPolicyId field value
// and a boolean to check if the value has been set.
func (o *ContractState) GetRoleTokenMintingPolicyIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RoleTokenMintingPolicyId, true
}

// SetRoleTokenMintingPolicyId sets field value
func (o *ContractState) SetRoleTokenMintingPolicyId(v string) {
	o.RoleTokenMintingPolicyId = v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *ContractState) GetState() MarloweState {
	if o == nil || IsNil(o.State) {
		var ret MarloweState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractState) GetStateOk() (*MarloweState, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *ContractState) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given MarloweState and assigns it to the State field.
func (o *ContractState) SetState(v MarloweState) {
	o.State = &v
}

// GetStatus returns the Status field value
func (o *ContractState) GetStatus() TxStatus {
	if o == nil {
		var ret TxStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ContractState) GetStatusOk() (*TxStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ContractState) SetStatus(v TxStatus) {
	o.Status = v
}

// GetTags returns the Tags field value
func (o *ContractState) GetTags() map[string]Metadata {
	if o == nil {
		var ret map[string]Metadata
		return ret
	}

	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value
// and a boolean to check if the value has been set.
func (o *ContractState) GetTagsOk() (*map[string]Metadata, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tags, true
}

// SetTags sets field value
func (o *ContractState) SetTags(v map[string]Metadata) {
	o.Tags = v
}

// GetTxBody returns the TxBody field value if set, zero value otherwise.
func (o *ContractState) GetTxBody() TextEnvelope {
	if o == nil || IsNil(o.TxBody) {
		var ret TextEnvelope
		return ret
	}
	return *o.TxBody
}

// GetTxBodyOk returns a tuple with the TxBody field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractState) GetTxBodyOk() (*TextEnvelope, bool) {
	if o == nil || IsNil(o.TxBody) {
		return nil, false
	}
	return o.TxBody, true
}

// HasTxBody returns a boolean if a field has been set.
func (o *ContractState) HasTxBody() bool {
	if o != nil && !IsNil(o.TxBody) {
		return true
	}

	return false
}

// SetTxBody gets a reference to the given TextEnvelope and assigns it to the TxBody field.
func (o *ContractState) SetTxBody(v TextEnvelope) {
	o.TxBody = &v
}

// GetUnclaimedPayouts returns the UnclaimedPayouts field value
func (o *ContractState) GetUnclaimedPayouts() []Payout {
	if o == nil {
		var ret []Payout
		return ret
	}

	return o.UnclaimedPayouts
}

// GetUnclaimedPayoutsOk returns a tuple with the UnclaimedPayouts field value
// and a boolean to check if the value has been set.
func (o *ContractState) GetUnclaimedPayoutsOk() ([]Payout, bool) {
	if o == nil {
		return nil, false
	}
	return o.UnclaimedPayouts, true
}

// SetUnclaimedPayouts sets field value
func (o *ContractState) SetUnclaimedPayouts(v []Payout) {
	o.UnclaimedPayouts = v
}

// GetUtxo returns the Utxo field value if set, zero value otherwise.
func (o *ContractState) GetUtxo() string {
	if o == nil || IsNil(o.Utxo) {
		var ret string
		return ret
	}
	return *o.Utxo
}

// GetUtxoOk returns a tuple with the Utxo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractState) GetUtxoOk() (*string, bool) {
	if o == nil || IsNil(o.Utxo) {
		return nil, false
	}
	return o.Utxo, true
}

// HasUtxo returns a boolean if a field has been set.
func (o *ContractState) HasUtxo() bool {
	if o != nil && !IsNil(o.Utxo) {
		return true
	}

	return false
}

// SetUtxo gets a reference to the given string and assigns it to the Utxo field.
func (o *ContractState) SetUtxo(v string) {
	o.Utxo = &v
}

// GetVersion returns the Version field value
func (o *ContractState) GetVersion() MarloweVersion {
	if o == nil {
		var ret MarloweVersion
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *ContractState) GetVersionOk() (*MarloweVersion, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *ContractState) SetVersion(v MarloweVersion) {
	o.Version = v
}

func (o ContractState) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContractState) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["assets"] = o.Assets
	if !IsNil(o.Block) {
		toSerialize["block"] = o.Block
	}
	if !IsNil(o.Continuations) {
		toSerialize["continuations"] = o.Continuations
	}
	toSerialize["contractId"] = o.ContractId
	if !IsNil(o.CurrentContract) {
		toSerialize["currentContract"] = o.CurrentContract
	}
	toSerialize["initialContract"] = o.InitialContract
	toSerialize["metadata"] = o.Metadata
	toSerialize["roleTokenMintingPolicyId"] = o.RoleTokenMintingPolicyId
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	toSerialize["status"] = o.Status
	toSerialize["tags"] = o.Tags
	if !IsNil(o.TxBody) {
		toSerialize["txBody"] = o.TxBody
	}
	toSerialize["unclaimedPayouts"] = o.UnclaimedPayouts
	if !IsNil(o.Utxo) {
		toSerialize["utxo"] = o.Utxo
	}
	toSerialize["version"] = o.Version
	return toSerialize, nil
}

type NullableContractState struct {
	value *ContractState
	isSet bool
}

func (v NullableContractState) Get() *ContractState {
	return v.value
}

func (v *NullableContractState) Set(val *ContractState) {
	v.value = val
	v.isSet = true
}

func (v NullableContractState) IsSet() bool {
	return v.isSet
}

func (v *NullableContractState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContractState(val *ContractState) *NullableContractState {
	return &NullableContractState{value: val, isSet: true}
}

func (v NullableContractState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContractState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


