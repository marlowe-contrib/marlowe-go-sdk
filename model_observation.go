/*
Marlowe Runtime REST API

REST API for Marlowe Runtime

API version: 0.0.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marloweruntime

import (
	"encoding/json"
	"fmt"
)

// Observation - A time-varying expression that evaluates to an integer
type Observation struct {
	And *And
	ChooseFor *ChooseFor
	Equal *Equal
	Greater *Greater
	GreaterOrEqual *GreaterOrEqual
	Lesser *Lesser
	LesserOrEqual *LesserOrEqual
	Not *Not
	Or *Or
	Bool *bool
}

// AndAsObservation is a convenience function that returns And wrapped in Observation
func AndAsObservation(v *And) Observation {
	return Observation{
		And: v,
	}
}

// ChooseForAsObservation is a convenience function that returns ChooseFor wrapped in Observation
func ChooseForAsObservation(v *ChooseFor) Observation {
	return Observation{
		ChooseFor: v,
	}
}

// EqualAsObservation is a convenience function that returns Equal wrapped in Observation
func EqualAsObservation(v *Equal) Observation {
	return Observation{
		Equal: v,
	}
}

// GreaterAsObservation is a convenience function that returns Greater wrapped in Observation
func GreaterAsObservation(v *Greater) Observation {
	return Observation{
		Greater: v,
	}
}

// GreaterOrEqualAsObservation is a convenience function that returns GreaterOrEqual wrapped in Observation
func GreaterOrEqualAsObservation(v *GreaterOrEqual) Observation {
	return Observation{
		GreaterOrEqual: v,
	}
}

// LesserAsObservation is a convenience function that returns Lesser wrapped in Observation
func LesserAsObservation(v *Lesser) Observation {
	return Observation{
		Lesser: v,
	}
}

// LesserOrEqualAsObservation is a convenience function that returns LesserOrEqual wrapped in Observation
func LesserOrEqualAsObservation(v *LesserOrEqual) Observation {
	return Observation{
		LesserOrEqual: v,
	}
}

// NotAsObservation is a convenience function that returns Not wrapped in Observation
func NotAsObservation(v *Not) Observation {
	return Observation{
		Not: v,
	}
}

// OrAsObservation is a convenience function that returns Or wrapped in Observation
func OrAsObservation(v *Or) Observation {
	return Observation{
		Or: v,
	}
}

// boolAsObservation is a convenience function that returns bool wrapped in Observation
func BoolAsObservation(v *bool) Observation {
	return Observation{
		Bool: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Observation) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into And
	err = newStrictDecoder(data).Decode(&dst.And)
	if err == nil {
		jsonAnd, _ := json.Marshal(dst.And)
		if string(jsonAnd) == "{}" { // empty struct
			dst.And = nil
		} else {
			match++
		}
	} else {
		dst.And = nil
	}

	// try to unmarshal data into ChooseFor
	err = newStrictDecoder(data).Decode(&dst.ChooseFor)
	if err == nil {
		jsonChooseFor, _ := json.Marshal(dst.ChooseFor)
		if string(jsonChooseFor) == "{}" { // empty struct
			dst.ChooseFor = nil
		} else {
			match++
		}
	} else {
		dst.ChooseFor = nil
	}

	// try to unmarshal data into Equal
	err = newStrictDecoder(data).Decode(&dst.Equal)
	if err == nil {
		jsonEqual, _ := json.Marshal(dst.Equal)
		if string(jsonEqual) == "{}" { // empty struct
			dst.Equal = nil
		} else {
			match++
		}
	} else {
		dst.Equal = nil
	}

	// try to unmarshal data into Greater
	err = newStrictDecoder(data).Decode(&dst.Greater)
	if err == nil {
		jsonGreater, _ := json.Marshal(dst.Greater)
		if string(jsonGreater) == "{}" { // empty struct
			dst.Greater = nil
		} else {
			match++
		}
	} else {
		dst.Greater = nil
	}

	// try to unmarshal data into GreaterOrEqual
	err = newStrictDecoder(data).Decode(&dst.GreaterOrEqual)
	if err == nil {
		jsonGreaterOrEqual, _ := json.Marshal(dst.GreaterOrEqual)
		if string(jsonGreaterOrEqual) == "{}" { // empty struct
			dst.GreaterOrEqual = nil
		} else {
			match++
		}
	} else {
		dst.GreaterOrEqual = nil
	}

	// try to unmarshal data into Lesser
	err = newStrictDecoder(data).Decode(&dst.Lesser)
	if err == nil {
		jsonLesser, _ := json.Marshal(dst.Lesser)
		if string(jsonLesser) == "{}" { // empty struct
			dst.Lesser = nil
		} else {
			match++
		}
	} else {
		dst.Lesser = nil
	}

	// try to unmarshal data into LesserOrEqual
	err = newStrictDecoder(data).Decode(&dst.LesserOrEqual)
	if err == nil {
		jsonLesserOrEqual, _ := json.Marshal(dst.LesserOrEqual)
		if string(jsonLesserOrEqual) == "{}" { // empty struct
			dst.LesserOrEqual = nil
		} else {
			match++
		}
	} else {
		dst.LesserOrEqual = nil
	}

	// try to unmarshal data into Not
	err = newStrictDecoder(data).Decode(&dst.Not)
	if err == nil {
		jsonNot, _ := json.Marshal(dst.Not)
		if string(jsonNot) == "{}" { // empty struct
			dst.Not = nil
		} else {
			match++
		}
	} else {
		dst.Not = nil
	}

	// try to unmarshal data into Or
	err = newStrictDecoder(data).Decode(&dst.Or)
	if err == nil {
		jsonOr, _ := json.Marshal(dst.Or)
		if string(jsonOr) == "{}" { // empty struct
			dst.Or = nil
		} else {
			match++
		}
	} else {
		dst.Or = nil
	}

	// try to unmarshal data into Bool
	err = newStrictDecoder(data).Decode(&dst.Bool)
	if err == nil {
		jsonBool, _ := json.Marshal(dst.Bool)
		if string(jsonBool) == "{}" { // empty struct
			dst.Bool = nil
		} else {
			match++
		}
	} else {
		dst.Bool = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.And = nil
		dst.ChooseFor = nil
		dst.Equal = nil
		dst.Greater = nil
		dst.GreaterOrEqual = nil
		dst.Lesser = nil
		dst.LesserOrEqual = nil
		dst.Not = nil
		dst.Or = nil
		dst.Bool = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Observation)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Observation)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Observation) MarshalJSON() ([]byte, error) {
	if src.And != nil {
		return json.Marshal(&src.And)
	}

	if src.ChooseFor != nil {
		return json.Marshal(&src.ChooseFor)
	}

	if src.Equal != nil {
		return json.Marshal(&src.Equal)
	}

	if src.Greater != nil {
		return json.Marshal(&src.Greater)
	}

	if src.GreaterOrEqual != nil {
		return json.Marshal(&src.GreaterOrEqual)
	}

	if src.Lesser != nil {
		return json.Marshal(&src.Lesser)
	}

	if src.LesserOrEqual != nil {
		return json.Marshal(&src.LesserOrEqual)
	}

	if src.Not != nil {
		return json.Marshal(&src.Not)
	}

	if src.Or != nil {
		return json.Marshal(&src.Or)
	}

	if src.Bool != nil {
		return json.Marshal(&src.Bool)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Observation) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.And != nil {
		return obj.And
	}

	if obj.ChooseFor != nil {
		return obj.ChooseFor
	}

	if obj.Equal != nil {
		return obj.Equal
	}

	if obj.Greater != nil {
		return obj.Greater
	}

	if obj.GreaterOrEqual != nil {
		return obj.GreaterOrEqual
	}

	if obj.Lesser != nil {
		return obj.Lesser
	}

	if obj.LesserOrEqual != nil {
		return obj.LesserOrEqual
	}

	if obj.Not != nil {
		return obj.Not
	}

	if obj.Or != nil {
		return obj.Or
	}

	if obj.Bool != nil {
		return obj.Bool
	}

	// all schemas are nil
	return nil
}

type NullableObservation struct {
	value *Observation
	isSet bool
}

func (v NullableObservation) Get() *Observation {
	return v.value
}

func (v *NullableObservation) Set(val *Observation) {
	v.value = val
	v.isSet = true
}

func (v NullableObservation) IsSet() bool {
	return v.isSet
}

func (v *NullableObservation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObservation(val *Observation) *NullableObservation {
	return &NullableObservation{value: val, isSet: true}
}

func (v NullableObservation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObservation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


