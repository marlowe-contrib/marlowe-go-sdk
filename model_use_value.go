/*
Marlowe Runtime REST API

REST API for Marlowe Runtime

API version: 0.0.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marloweruntime

import (
	"encoding/json"
)

// checks if the UseValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UseValue{}

// UseValue struct for UseValue
type UseValue struct {
	UseValue string `json:"use_value"`
}

// NewUseValue instantiates a new UseValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUseValue(useValue string) *UseValue {
	this := UseValue{}
	this.UseValue = useValue
	return &this
}

// NewUseValueWithDefaults instantiates a new UseValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUseValueWithDefaults() *UseValue {
	this := UseValue{}
	return &this
}

// GetUseValue returns the UseValue field value
func (o *UseValue) GetUseValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UseValue
}

// GetUseValueOk returns a tuple with the UseValue field value
// and a boolean to check if the value has been set.
func (o *UseValue) GetUseValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UseValue, true
}

// SetUseValue sets field value
func (o *UseValue) SetUseValue(v string) {
	o.UseValue = v
}

func (o UseValue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UseValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["use_value"] = o.UseValue
	return toSerialize, nil
}

type NullableUseValue struct {
	value *UseValue
	isSet bool
}

func (v NullableUseValue) Get() *UseValue {
	return v.value
}

func (v *NullableUseValue) Set(val *UseValue) {
	v.value = val
	v.isSet = true
}

func (v NullableUseValue) IsSet() bool {
	return v.isSet
}

func (v *NullableUseValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUseValue(val *UseValue) *NullableUseValue {
	return &NullableUseValue{value: val, isSet: true}
}

func (v NullableUseValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUseValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


