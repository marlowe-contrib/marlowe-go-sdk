/*
Marlowe Runtime REST API

REST API for Marlowe Runtime

API version: 0.0.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marloweruntime

import (
	"encoding/json"
)

// checks if the IntervalInPast type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IntervalInPast{}

// IntervalInPast Marlowe transaction interval in past.
type IntervalInPast struct {
	IntervalInPastError IntervalInPastIntervalInPastError `json:"intervalInPastError"`
}

// NewIntervalInPast instantiates a new IntervalInPast object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntervalInPast(intervalInPastError IntervalInPastIntervalInPastError) *IntervalInPast {
	this := IntervalInPast{}
	this.IntervalInPastError = intervalInPastError
	return &this
}

// NewIntervalInPastWithDefaults instantiates a new IntervalInPast object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntervalInPastWithDefaults() *IntervalInPast {
	this := IntervalInPast{}
	return &this
}

// GetIntervalInPastError returns the IntervalInPastError field value
func (o *IntervalInPast) GetIntervalInPastError() IntervalInPastIntervalInPastError {
	if o == nil {
		var ret IntervalInPastIntervalInPastError
		return ret
	}

	return o.IntervalInPastError
}

// GetIntervalInPastErrorOk returns a tuple with the IntervalInPastError field value
// and a boolean to check if the value has been set.
func (o *IntervalInPast) GetIntervalInPastErrorOk() (*IntervalInPastIntervalInPastError, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IntervalInPastError, true
}

// SetIntervalInPastError sets field value
func (o *IntervalInPast) SetIntervalInPastError(v IntervalInPastIntervalInPastError) {
	o.IntervalInPastError = v
}

func (o IntervalInPast) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IntervalInPast) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["intervalInPastError"] = o.IntervalInPastError
	return toSerialize, nil
}

type NullableIntervalInPast struct {
	value *IntervalInPast
	isSet bool
}

func (v NullableIntervalInPast) Get() *IntervalInPast {
	return v.value
}

func (v *NullableIntervalInPast) Set(val *IntervalInPast) {
	v.value = val
	v.isSet = true
}

func (v NullableIntervalInPast) IsSet() bool {
	return v.isSet
}

func (v *NullableIntervalInPast) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntervalInPast(val *IntervalInPast) *NullableIntervalInPast {
	return &NullableIntervalInPast{value: val, isSet: true}
}

func (v NullableIntervalInPast) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntervalInPast) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


