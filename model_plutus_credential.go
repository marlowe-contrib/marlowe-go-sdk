/*
Marlowe Runtime REST API

REST API for Marlowe Runtime

API version: 0.0.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marloweruntime

import (
	"encoding/json"
	"fmt"
)

// PlutusCredential - A Plutus credential.
type PlutusCredential struct {
	PubKeyCredential *PubKeyCredential
	ScriptCredential *ScriptCredential
}

// PubKeyCredentialAsPlutusCredential is a convenience function that returns PubKeyCredential wrapped in PlutusCredential
func PubKeyCredentialAsPlutusCredential(v *PubKeyCredential) PlutusCredential {
	return PlutusCredential{
		PubKeyCredential: v,
	}
}

// ScriptCredentialAsPlutusCredential is a convenience function that returns ScriptCredential wrapped in PlutusCredential
func ScriptCredentialAsPlutusCredential(v *ScriptCredential) PlutusCredential {
	return PlutusCredential{
		ScriptCredential: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *PlutusCredential) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into PubKeyCredential
	err = newStrictDecoder(data).Decode(&dst.PubKeyCredential)
	if err == nil {
		jsonPubKeyCredential, _ := json.Marshal(dst.PubKeyCredential)
		if string(jsonPubKeyCredential) == "{}" { // empty struct
			dst.PubKeyCredential = nil
		} else {
			match++
		}
	} else {
		dst.PubKeyCredential = nil
	}

	// try to unmarshal data into ScriptCredential
	err = newStrictDecoder(data).Decode(&dst.ScriptCredential)
	if err == nil {
		jsonScriptCredential, _ := json.Marshal(dst.ScriptCredential)
		if string(jsonScriptCredential) == "{}" { // empty struct
			dst.ScriptCredential = nil
		} else {
			match++
		}
	} else {
		dst.ScriptCredential = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.PubKeyCredential = nil
		dst.ScriptCredential = nil

		return fmt.Errorf("data matches more than one schema in oneOf(PlutusCredential)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(PlutusCredential)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PlutusCredential) MarshalJSON() ([]byte, error) {
	if src.PubKeyCredential != nil {
		return json.Marshal(&src.PubKeyCredential)
	}

	if src.ScriptCredential != nil {
		return json.Marshal(&src.ScriptCredential)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PlutusCredential) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.PubKeyCredential != nil {
		return obj.PubKeyCredential
	}

	if obj.ScriptCredential != nil {
		return obj.ScriptCredential
	}

	// all schemas are nil
	return nil
}

type NullablePlutusCredential struct {
	value *PlutusCredential
	isSet bool
}

func (v NullablePlutusCredential) Get() *PlutusCredential {
	return v.value
}

func (v *NullablePlutusCredential) Set(val *PlutusCredential) {
	v.value = val
	v.isSet = true
}

func (v NullablePlutusCredential) IsSet() bool {
	return v.isSet
}

func (v *NullablePlutusCredential) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlutusCredential(val *PlutusCredential) *NullablePlutusCredential {
	return &NullablePlutusCredential{value: val, isSet: true}
}

func (v NullablePlutusCredential) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlutusCredential) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


