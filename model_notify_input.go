/*
Marlowe Runtime REST API

REST API for Marlowe Runtime

API version: 0.0.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marloweruntime

import (
	"encoding/json"
	"fmt"
)

// NotifyInput Notify a contract to check a condition
type NotifyInput string

// List of NotifyInput
const (
	INPUT_NOTIFY NotifyInput = "input_notify"
)

// All allowed values of NotifyInput enum
var AllowedNotifyInputEnumValues = []NotifyInput{
	"input_notify",
}

func (v *NotifyInput) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NotifyInput(value)
	for _, existing := range AllowedNotifyInputEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NotifyInput", value)
}

// NewNotifyInputFromValue returns a pointer to a valid NotifyInput
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNotifyInputFromValue(v string) (*NotifyInput, error) {
	ev := NotifyInput(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NotifyInput: valid values are %v", v, AllowedNotifyInputEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NotifyInput) IsValid() bool {
	for _, existing := range AllowedNotifyInputEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NotifyInput value
func (v NotifyInput) Ptr() *NotifyInput {
	return &v
}

type NullableNotifyInput struct {
	value *NotifyInput
	isSet bool
}

func (v NullableNotifyInput) Get() *NotifyInput {
	return v.value
}

func (v *NullableNotifyInput) Set(val *NotifyInput) {
	v.value = val
	v.isSet = true
}

func (v NullableNotifyInput) IsSet() bool {
	return v.isSet
}

func (v *NullableNotifyInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotifyInput(val *NotifyInput) *NullableNotifyInput {
	return &NullableNotifyInput{value: val, isSet: true}
}

func (v NullableNotifyInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotifyInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

