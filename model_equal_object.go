/*
Marlowe Runtime REST API

REST API for Marlowe Runtime

API version: 0.0.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marloweruntime

import (
	"encoding/json"
)

// checks if the EqualObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EqualObject{}

// EqualObject struct for EqualObject
type EqualObject struct {
	EqualTo ValueObject `json:"equal_to"`
	Value ValueObject `json:"value"`
}

// NewEqualObject instantiates a new EqualObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEqualObject(equalTo ValueObject, value ValueObject) *EqualObject {
	this := EqualObject{}
	this.EqualTo = equalTo
	this.Value = value
	return &this
}

// NewEqualObjectWithDefaults instantiates a new EqualObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEqualObjectWithDefaults() *EqualObject {
	this := EqualObject{}
	return &this
}

// GetEqualTo returns the EqualTo field value
func (o *EqualObject) GetEqualTo() ValueObject {
	if o == nil {
		var ret ValueObject
		return ret
	}

	return o.EqualTo
}

// GetEqualToOk returns a tuple with the EqualTo field value
// and a boolean to check if the value has been set.
func (o *EqualObject) GetEqualToOk() (*ValueObject, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EqualTo, true
}

// SetEqualTo sets field value
func (o *EqualObject) SetEqualTo(v ValueObject) {
	o.EqualTo = v
}

// GetValue returns the Value field value
func (o *EqualObject) GetValue() ValueObject {
	if o == nil {
		var ret ValueObject
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *EqualObject) GetValueOk() (*ValueObject, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *EqualObject) SetValue(v ValueObject) {
	o.Value = v
}

func (o EqualObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EqualObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["equal_to"] = o.EqualTo
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

type NullableEqualObject struct {
	value *EqualObject
	isSet bool
}

func (v NullableEqualObject) Get() *EqualObject {
	return v.value
}

func (v *NullableEqualObject) Set(val *EqualObject) {
	v.value = val
	v.isSet = true
}

func (v NullableEqualObject) IsSet() bool {
	return v.isSet
}

func (v *NullableEqualObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEqualObject(val *EqualObject) *NullableEqualObject {
	return &NullableEqualObject{value: val, isSet: true}
}

func (v NullableEqualObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEqualObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


