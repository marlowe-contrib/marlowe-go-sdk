/*
Marlowe Runtime REST API

REST API for Marlowe Runtime

API version: 0.0.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marloweruntime

import (
	"encoding/json"
	"fmt"
)

// Metadata - Arbitrary JSON-encoded transaction metadata
type Metadata struct {
	ArrayOfMetadata *[]Metadata
	Int32 *int32
	MapmapOfStringMetadata *map[string]Metadata
	String *string
}

// []MetadataAsMetadata is a convenience function that returns []Metadata wrapped in Metadata
func ArrayOfMetadataAsMetadata(v *[]Metadata) Metadata {
	return Metadata{
		ArrayOfMetadata: v,
	}
}

// int32AsMetadata is a convenience function that returns int32 wrapped in Metadata
func Int32AsMetadata(v *int32) Metadata {
	return Metadata{
		Int32: v,
	}
}

// map[string]MetadataAsMetadata is a convenience function that returns map[string]Metadata wrapped in Metadata
func MapmapOfStringMetadataAsMetadata(v *map[string]Metadata) Metadata {
	return Metadata{
		MapmapOfStringMetadata: v,
	}
}

// stringAsMetadata is a convenience function that returns string wrapped in Metadata
func StringAsMetadata(v *string) Metadata {
	return Metadata{
		String: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Metadata) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ArrayOfMetadata
	err = newStrictDecoder(data).Decode(&dst.ArrayOfMetadata)
	if err == nil {
		jsonArrayOfMetadata, _ := json.Marshal(dst.ArrayOfMetadata)
		if string(jsonArrayOfMetadata) == "{}" { // empty struct
			dst.ArrayOfMetadata = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfMetadata = nil
	}

	// try to unmarshal data into Int32
	err = newStrictDecoder(data).Decode(&dst.Int32)
	if err == nil {
		jsonInt32, _ := json.Marshal(dst.Int32)
		if string(jsonInt32) == "{}" { // empty struct
			dst.Int32 = nil
		} else {
			match++
		}
	} else {
		dst.Int32 = nil
	}

	// try to unmarshal data into MapmapOfStringMetadata
	err = newStrictDecoder(data).Decode(&dst.MapmapOfStringMetadata)
	if err == nil {
		jsonMapmapOfStringMetadata, _ := json.Marshal(dst.MapmapOfStringMetadata)
		if string(jsonMapmapOfStringMetadata) == "{}" { // empty struct
			dst.MapmapOfStringMetadata = nil
		} else {
			match++
		}
	} else {
		dst.MapmapOfStringMetadata = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ArrayOfMetadata = nil
		dst.Int32 = nil
		dst.MapmapOfStringMetadata = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Metadata)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Metadata)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Metadata) MarshalJSON() ([]byte, error) {
	if src.ArrayOfMetadata != nil {
		return json.Marshal(&src.ArrayOfMetadata)
	}

	if src.Int32 != nil {
		return json.Marshal(&src.Int32)
	}

	if src.MapmapOfStringMetadata != nil {
		return json.Marshal(&src.MapmapOfStringMetadata)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Metadata) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ArrayOfMetadata != nil {
		return obj.ArrayOfMetadata
	}

	if obj.Int32 != nil {
		return obj.Int32
	}

	if obj.MapmapOfStringMetadata != nil {
		return obj.MapmapOfStringMetadata
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableMetadata struct {
	value *Metadata
	isSet bool
}

func (v NullableMetadata) Get() *Metadata {
	return v.value
}

func (v *NullableMetadata) Set(val *Metadata) {
	v.value = val
	v.isSet = true
}

func (v NullableMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetadata(val *Metadata) *NullableMetadata {
	return &NullableMetadata{value: val, isSet: true}
}

func (v NullableMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


