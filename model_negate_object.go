/*
Marlowe Runtime REST API

REST API for Marlowe Runtime

API version: 0.0.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marloweruntime

import (
	"encoding/json"
)

// checks if the NegateObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NegateObject{}

// NegateObject struct for NegateObject
type NegateObject struct {
	Negate ValueObject `json:"negate"`
}

// NewNegateObject instantiates a new NegateObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNegateObject(negate ValueObject) *NegateObject {
	this := NegateObject{}
	this.Negate = negate
	return &this
}

// NewNegateObjectWithDefaults instantiates a new NegateObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNegateObjectWithDefaults() *NegateObject {
	this := NegateObject{}
	return &this
}

// GetNegate returns the Negate field value
func (o *NegateObject) GetNegate() ValueObject {
	if o == nil {
		var ret ValueObject
		return ret
	}

	return o.Negate
}

// GetNegateOk returns a tuple with the Negate field value
// and a boolean to check if the value has been set.
func (o *NegateObject) GetNegateOk() (*ValueObject, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Negate, true
}

// SetNegate sets field value
func (o *NegateObject) SetNegate(v ValueObject) {
	o.Negate = v
}

func (o NegateObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NegateObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["negate"] = o.Negate
	return toSerialize, nil
}

type NullableNegateObject struct {
	value *NegateObject
	isSet bool
}

func (v NullableNegateObject) Get() *NegateObject {
	return v.value
}

func (v *NullableNegateObject) Set(val *NegateObject) {
	v.value = val
	v.isSet = true
}

func (v NullableNegateObject) IsSet() bool {
	return v.isSet
}

func (v *NullableNegateObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNegateObject(val *NegateObject) *NullableNegateObject {
	return &NullableNegateObject{value: val, isSet: true}
}

func (v NullableNegateObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNegateObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


