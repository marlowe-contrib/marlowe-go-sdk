/*
Marlowe Runtime REST API

REST API for Marlowe Runtime

API version: 0.0.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marloweruntime

import (
	"encoding/json"
)

// checks if the CanChoose type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CanChoose{}

// CanChoose Choice Inputs that can be applied for a given contract
type CanChoose struct {
	CanChooseBetween []Bound `json:"can_choose_between"`
	// Index of a \"Case Action\" in a \"When\"
	CaseIndex int32 `json:"case_index"`
	ForChoice ChoiceId `json:"for_choice"`
	// Indicates if a given contract continuation is merkleized
	IsMerkleizedContinuation bool `json:"is_merkleized_continuation"`
}

// NewCanChoose instantiates a new CanChoose object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCanChoose(canChooseBetween []Bound, caseIndex int32, forChoice ChoiceId, isMerkleizedContinuation bool) *CanChoose {
	this := CanChoose{}
	this.CanChooseBetween = canChooseBetween
	this.CaseIndex = caseIndex
	this.ForChoice = forChoice
	this.IsMerkleizedContinuation = isMerkleizedContinuation
	return &this
}

// NewCanChooseWithDefaults instantiates a new CanChoose object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCanChooseWithDefaults() *CanChoose {
	this := CanChoose{}
	return &this
}

// GetCanChooseBetween returns the CanChooseBetween field value
func (o *CanChoose) GetCanChooseBetween() []Bound {
	if o == nil {
		var ret []Bound
		return ret
	}

	return o.CanChooseBetween
}

// GetCanChooseBetweenOk returns a tuple with the CanChooseBetween field value
// and a boolean to check if the value has been set.
func (o *CanChoose) GetCanChooseBetweenOk() ([]Bound, bool) {
	if o == nil {
		return nil, false
	}
	return o.CanChooseBetween, true
}

// SetCanChooseBetween sets field value
func (o *CanChoose) SetCanChooseBetween(v []Bound) {
	o.CanChooseBetween = v
}

// GetCaseIndex returns the CaseIndex field value
func (o *CanChoose) GetCaseIndex() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CaseIndex
}

// GetCaseIndexOk returns a tuple with the CaseIndex field value
// and a boolean to check if the value has been set.
func (o *CanChoose) GetCaseIndexOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CaseIndex, true
}

// SetCaseIndex sets field value
func (o *CanChoose) SetCaseIndex(v int32) {
	o.CaseIndex = v
}

// GetForChoice returns the ForChoice field value
func (o *CanChoose) GetForChoice() ChoiceId {
	if o == nil {
		var ret ChoiceId
		return ret
	}

	return o.ForChoice
}

// GetForChoiceOk returns a tuple with the ForChoice field value
// and a boolean to check if the value has been set.
func (o *CanChoose) GetForChoiceOk() (*ChoiceId, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ForChoice, true
}

// SetForChoice sets field value
func (o *CanChoose) SetForChoice(v ChoiceId) {
	o.ForChoice = v
}

// GetIsMerkleizedContinuation returns the IsMerkleizedContinuation field value
func (o *CanChoose) GetIsMerkleizedContinuation() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsMerkleizedContinuation
}

// GetIsMerkleizedContinuationOk returns a tuple with the IsMerkleizedContinuation field value
// and a boolean to check if the value has been set.
func (o *CanChoose) GetIsMerkleizedContinuationOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsMerkleizedContinuation, true
}

// SetIsMerkleizedContinuation sets field value
func (o *CanChoose) SetIsMerkleizedContinuation(v bool) {
	o.IsMerkleizedContinuation = v
}

func (o CanChoose) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CanChoose) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["can_choose_between"] = o.CanChooseBetween
	toSerialize["case_index"] = o.CaseIndex
	toSerialize["for_choice"] = o.ForChoice
	toSerialize["is_merkleized_continuation"] = o.IsMerkleizedContinuation
	return toSerialize, nil
}

type NullableCanChoose struct {
	value *CanChoose
	isSet bool
}

func (v NullableCanChoose) Get() *CanChoose {
	return v.value
}

func (v *NullableCanChoose) Set(val *CanChoose) {
	v.value = val
	v.isSet = true
}

func (v NullableCanChoose) IsSet() bool {
	return v.isSet
}

func (v *NullableCanChoose) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCanChoose(val *CanChoose) *NullableCanChoose {
	return &NullableCanChoose{value: val, isSet: true}
}

func (v NullableCanChoose) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCanChoose) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


