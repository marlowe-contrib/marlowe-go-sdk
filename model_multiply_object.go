/*
Marlowe Runtime REST API

REST API for Marlowe Runtime

API version: 0.0.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marloweruntime

import (
	"encoding/json"
)

// checks if the MultiplyObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MultiplyObject{}

// MultiplyObject struct for MultiplyObject
type MultiplyObject struct {
	Multiply ValueObject `json:"multiply"`
	Times ValueObject `json:"times"`
}

// NewMultiplyObject instantiates a new MultiplyObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultiplyObject(multiply ValueObject, times ValueObject) *MultiplyObject {
	this := MultiplyObject{}
	this.Multiply = multiply
	this.Times = times
	return &this
}

// NewMultiplyObjectWithDefaults instantiates a new MultiplyObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultiplyObjectWithDefaults() *MultiplyObject {
	this := MultiplyObject{}
	return &this
}

// GetMultiply returns the Multiply field value
func (o *MultiplyObject) GetMultiply() ValueObject {
	if o == nil {
		var ret ValueObject
		return ret
	}

	return o.Multiply
}

// GetMultiplyOk returns a tuple with the Multiply field value
// and a boolean to check if the value has been set.
func (o *MultiplyObject) GetMultiplyOk() (*ValueObject, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Multiply, true
}

// SetMultiply sets field value
func (o *MultiplyObject) SetMultiply(v ValueObject) {
	o.Multiply = v
}

// GetTimes returns the Times field value
func (o *MultiplyObject) GetTimes() ValueObject {
	if o == nil {
		var ret ValueObject
		return ret
	}

	return o.Times
}

// GetTimesOk returns a tuple with the Times field value
// and a boolean to check if the value has been set.
func (o *MultiplyObject) GetTimesOk() (*ValueObject, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Times, true
}

// SetTimes sets field value
func (o *MultiplyObject) SetTimes(v ValueObject) {
	o.Times = v
}

func (o MultiplyObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MultiplyObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["multiply"] = o.Multiply
	toSerialize["times"] = o.Times
	return toSerialize, nil
}

type NullableMultiplyObject struct {
	value *MultiplyObject
	isSet bool
}

func (v NullableMultiplyObject) Get() *MultiplyObject {
	return v.value
}

func (v *NullableMultiplyObject) Set(val *MultiplyObject) {
	v.value = val
	v.isSet = true
}

func (v NullableMultiplyObject) IsSet() bool {
	return v.isSet
}

func (v *NullableMultiplyObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultiplyObject(val *MultiplyObject) *NullableMultiplyObject {
	return &NullableMultiplyObject{value: val, isSet: true}
}

func (v NullableMultiplyObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultiplyObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


