/*
Marlowe Runtime REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.5
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TokenMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TokenMetadata{}

// TokenMetadata Metadata for an NFT, as described by https://cips.cardano.org/cips/cip25/
type TokenMetadata struct {
	Description *string `json:"description,omitempty"`
	Files []TokenMetadataFile `json:"files,omitempty"`
	Image string `json:"image"`
	MediaType *string `json:"mediaType,omitempty"`
	Name string `json:"name"`
}

// NewTokenMetadata instantiates a new TokenMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenMetadata(image string, name string) *TokenMetadata {
	this := TokenMetadata{}
	this.Image = image
	this.Name = name
	return &this
}

// NewTokenMetadataWithDefaults instantiates a new TokenMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenMetadataWithDefaults() *TokenMetadata {
	this := TokenMetadata{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *TokenMetadata) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenMetadata) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *TokenMetadata) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *TokenMetadata) SetDescription(v string) {
	o.Description = &v
}

// GetFiles returns the Files field value if set, zero value otherwise.
func (o *TokenMetadata) GetFiles() []TokenMetadataFile {
	if o == nil || IsNil(o.Files) {
		var ret []TokenMetadataFile
		return ret
	}
	return o.Files
}

// GetFilesOk returns a tuple with the Files field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenMetadata) GetFilesOk() ([]TokenMetadataFile, bool) {
	if o == nil || IsNil(o.Files) {
		return nil, false
	}
	return o.Files, true
}

// HasFiles returns a boolean if a field has been set.
func (o *TokenMetadata) HasFiles() bool {
	if o != nil && !IsNil(o.Files) {
		return true
	}

	return false
}

// SetFiles gets a reference to the given []TokenMetadataFile and assigns it to the Files field.
func (o *TokenMetadata) SetFiles(v []TokenMetadataFile) {
	o.Files = v
}

// GetImage returns the Image field value
func (o *TokenMetadata) GetImage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Image
}

// GetImageOk returns a tuple with the Image field value
// and a boolean to check if the value has been set.
func (o *TokenMetadata) GetImageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Image, true
}

// SetImage sets field value
func (o *TokenMetadata) SetImage(v string) {
	o.Image = v
}

// GetMediaType returns the MediaType field value if set, zero value otherwise.
func (o *TokenMetadata) GetMediaType() string {
	if o == nil || IsNil(o.MediaType) {
		var ret string
		return ret
	}
	return *o.MediaType
}

// GetMediaTypeOk returns a tuple with the MediaType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenMetadata) GetMediaTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MediaType) {
		return nil, false
	}
	return o.MediaType, true
}

// HasMediaType returns a boolean if a field has been set.
func (o *TokenMetadata) HasMediaType() bool {
	if o != nil && !IsNil(o.MediaType) {
		return true
	}

	return false
}

// SetMediaType gets a reference to the given string and assigns it to the MediaType field.
func (o *TokenMetadata) SetMediaType(v string) {
	o.MediaType = &v
}

// GetName returns the Name field value
func (o *TokenMetadata) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TokenMetadata) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *TokenMetadata) SetName(v string) {
	o.Name = v
}

func (o TokenMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TokenMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Files) {
		toSerialize["files"] = o.Files
	}
	toSerialize["image"] = o.Image
	if !IsNil(o.MediaType) {
		toSerialize["mediaType"] = o.MediaType
	}
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

type NullableTokenMetadata struct {
	value *TokenMetadata
	isSet bool
}

func (v NullableTokenMetadata) Get() *TokenMetadata {
	return v.value
}

func (v *NullableTokenMetadata) Set(val *TokenMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenMetadata(val *TokenMetadata) *NullableTokenMetadata {
	return &NullableTokenMetadata{value: val, isSet: true}
}

func (v NullableTokenMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


