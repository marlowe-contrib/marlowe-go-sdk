/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PayoutState type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PayoutState{}

// PayoutState struct for PayoutState
type PayoutState struct {
	Assets Assets `json:"assets"`
	// A reference to a transaction output with a transaction ID and index.
	ContractId string `json:"contractId"`
	// A reference to a transaction output with a transaction ID and index.
	PayoutId string `json:"payoutId"`
	// A cardano address
	PayoutValidatorAddress string `json:"payoutValidatorAddress"`
	Role AssetId `json:"role"`
	Status PayoutStatus `json:"status"`
	// The hex-encoded identifier of a Cardano transaction
	WithdrawalId *string `json:"withdrawalId,omitempty"`
}

// NewPayoutState instantiates a new PayoutState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPayoutState(assets Assets, contractId string, payoutId string, payoutValidatorAddress string, role AssetId, status PayoutStatus) *PayoutState {
	this := PayoutState{}
	this.Assets = assets
	this.ContractId = contractId
	this.PayoutId = payoutId
	this.PayoutValidatorAddress = payoutValidatorAddress
	this.Role = role
	this.Status = status
	return &this
}

// NewPayoutStateWithDefaults instantiates a new PayoutState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPayoutStateWithDefaults() *PayoutState {
	this := PayoutState{}
	return &this
}

// GetAssets returns the Assets field value
func (o *PayoutState) GetAssets() Assets {
	if o == nil {
		var ret Assets
		return ret
	}

	return o.Assets
}

// GetAssetsOk returns a tuple with the Assets field value
// and a boolean to check if the value has been set.
func (o *PayoutState) GetAssetsOk() (*Assets, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Assets, true
}

// SetAssets sets field value
func (o *PayoutState) SetAssets(v Assets) {
	o.Assets = v
}

// GetContractId returns the ContractId field value
func (o *PayoutState) GetContractId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContractId
}

// GetContractIdOk returns a tuple with the ContractId field value
// and a boolean to check if the value has been set.
func (o *PayoutState) GetContractIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContractId, true
}

// SetContractId sets field value
func (o *PayoutState) SetContractId(v string) {
	o.ContractId = v
}

// GetPayoutId returns the PayoutId field value
func (o *PayoutState) GetPayoutId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PayoutId
}

// GetPayoutIdOk returns a tuple with the PayoutId field value
// and a boolean to check if the value has been set.
func (o *PayoutState) GetPayoutIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PayoutId, true
}

// SetPayoutId sets field value
func (o *PayoutState) SetPayoutId(v string) {
	o.PayoutId = v
}

// GetPayoutValidatorAddress returns the PayoutValidatorAddress field value
func (o *PayoutState) GetPayoutValidatorAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PayoutValidatorAddress
}

// GetPayoutValidatorAddressOk returns a tuple with the PayoutValidatorAddress field value
// and a boolean to check if the value has been set.
func (o *PayoutState) GetPayoutValidatorAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PayoutValidatorAddress, true
}

// SetPayoutValidatorAddress sets field value
func (o *PayoutState) SetPayoutValidatorAddress(v string) {
	o.PayoutValidatorAddress = v
}

// GetRole returns the Role field value
func (o *PayoutState) GetRole() AssetId {
	if o == nil {
		var ret AssetId
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *PayoutState) GetRoleOk() (*AssetId, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *PayoutState) SetRole(v AssetId) {
	o.Role = v
}

// GetStatus returns the Status field value
func (o *PayoutState) GetStatus() PayoutStatus {
	if o == nil {
		var ret PayoutStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *PayoutState) GetStatusOk() (*PayoutStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *PayoutState) SetStatus(v PayoutStatus) {
	o.Status = v
}

// GetWithdrawalId returns the WithdrawalId field value if set, zero value otherwise.
func (o *PayoutState) GetWithdrawalId() string {
	if o == nil || IsNil(o.WithdrawalId) {
		var ret string
		return ret
	}
	return *o.WithdrawalId
}

// GetWithdrawalIdOk returns a tuple with the WithdrawalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayoutState) GetWithdrawalIdOk() (*string, bool) {
	if o == nil || IsNil(o.WithdrawalId) {
		return nil, false
	}
	return o.WithdrawalId, true
}

// HasWithdrawalId returns a boolean if a field has been set.
func (o *PayoutState) HasWithdrawalId() bool {
	if o != nil && !IsNil(o.WithdrawalId) {
		return true
	}

	return false
}

// SetWithdrawalId gets a reference to the given string and assigns it to the WithdrawalId field.
func (o *PayoutState) SetWithdrawalId(v string) {
	o.WithdrawalId = &v
}

func (o PayoutState) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PayoutState) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["assets"] = o.Assets
	toSerialize["contractId"] = o.ContractId
	toSerialize["payoutId"] = o.PayoutId
	toSerialize["payoutValidatorAddress"] = o.PayoutValidatorAddress
	toSerialize["role"] = o.Role
	toSerialize["status"] = o.Status
	if !IsNil(o.WithdrawalId) {
		toSerialize["withdrawalId"] = o.WithdrawalId
	}
	return toSerialize, nil
}

type NullablePayoutState struct {
	value *PayoutState
	isSet bool
}

func (v NullablePayoutState) Get() *PayoutState {
	return v.value
}

func (v *NullablePayoutState) Set(val *PayoutState) {
	v.value = val
	v.isSet = true
}

func (v NullablePayoutState) IsSet() bool {
	return v.isSet
}

func (v *NullablePayoutState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePayoutState(val *PayoutState) *NullablePayoutState {
	return &NullablePayoutState{value: val, isSet: true}
}

func (v NullablePayoutState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePayoutState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


