/*
Marlowe Runtime REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.5
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ObservationOneOf1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObservationOneOf1{}

// ObservationOneOf1 struct for ObservationOneOf1
type ObservationOneOf1 struct {
	Either Observation `json:"either"`
	Or Observation `json:"or"`
}

// NewObservationOneOf1 instantiates a new ObservationOneOf1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObservationOneOf1(either Observation, or Observation) *ObservationOneOf1 {
	this := ObservationOneOf1{}
	this.Either = either
	this.Or = or
	return &this
}

// NewObservationOneOf1WithDefaults instantiates a new ObservationOneOf1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObservationOneOf1WithDefaults() *ObservationOneOf1 {
	this := ObservationOneOf1{}
	return &this
}

// GetEither returns the Either field value
func (o *ObservationOneOf1) GetEither() Observation {
	if o == nil {
		var ret Observation
		return ret
	}

	return o.Either
}

// GetEitherOk returns a tuple with the Either field value
// and a boolean to check if the value has been set.
func (o *ObservationOneOf1) GetEitherOk() (*Observation, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Either, true
}

// SetEither sets field value
func (o *ObservationOneOf1) SetEither(v Observation) {
	o.Either = v
}

// GetOr returns the Or field value
func (o *ObservationOneOf1) GetOr() Observation {
	if o == nil {
		var ret Observation
		return ret
	}

	return o.Or
}

// GetOrOk returns a tuple with the Or field value
// and a boolean to check if the value has been set.
func (o *ObservationOneOf1) GetOrOk() (*Observation, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Or, true
}

// SetOr sets field value
func (o *ObservationOneOf1) SetOr(v Observation) {
	o.Or = v
}

func (o ObservationOneOf1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObservationOneOf1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["either"] = o.Either
	toSerialize["or"] = o.Or
	return toSerialize, nil
}

type NullableObservationOneOf1 struct {
	value *ObservationOneOf1
	isSet bool
}

func (v NullableObservationOneOf1) Get() *ObservationOneOf1 {
	return v.value
}

func (v *NullableObservationOneOf1) Set(val *ObservationOneOf1) {
	v.value = val
	v.isSet = true
}

func (v NullableObservationOneOf1) IsSet() bool {
	return v.isSet
}

func (v *NullableObservationOneOf1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObservationOneOf1(val *ObservationOneOf1) *NullableObservationOneOf1 {
	return &NullableObservationOneOf1{value: val, isSet: true}
}

func (v NullableObservationOneOf1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObservationOneOf1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


