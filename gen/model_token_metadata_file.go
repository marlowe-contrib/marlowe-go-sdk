/*
Marlowe Runtime REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.5
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TokenMetadataFile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TokenMetadataFile{}

// TokenMetadataFile struct for TokenMetadataFile
type TokenMetadataFile struct {
	MediaType string `json:"mediaType"`
	Name string `json:"name"`
	Src string `json:"src"`
}

// NewTokenMetadataFile instantiates a new TokenMetadataFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenMetadataFile(mediaType string, name string, src string) *TokenMetadataFile {
	this := TokenMetadataFile{}
	this.MediaType = mediaType
	this.Name = name
	this.Src = src
	return &this
}

// NewTokenMetadataFileWithDefaults instantiates a new TokenMetadataFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenMetadataFileWithDefaults() *TokenMetadataFile {
	this := TokenMetadataFile{}
	return &this
}

// GetMediaType returns the MediaType field value
func (o *TokenMetadataFile) GetMediaType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MediaType
}

// GetMediaTypeOk returns a tuple with the MediaType field value
// and a boolean to check if the value has been set.
func (o *TokenMetadataFile) GetMediaTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MediaType, true
}

// SetMediaType sets field value
func (o *TokenMetadataFile) SetMediaType(v string) {
	o.MediaType = v
}

// GetName returns the Name field value
func (o *TokenMetadataFile) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TokenMetadataFile) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *TokenMetadataFile) SetName(v string) {
	o.Name = v
}

// GetSrc returns the Src field value
func (o *TokenMetadataFile) GetSrc() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Src
}

// GetSrcOk returns a tuple with the Src field value
// and a boolean to check if the value has been set.
func (o *TokenMetadataFile) GetSrcOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Src, true
}

// SetSrc sets field value
func (o *TokenMetadataFile) SetSrc(v string) {
	o.Src = v
}

func (o TokenMetadataFile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TokenMetadataFile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["mediaType"] = o.MediaType
	toSerialize["name"] = o.Name
	toSerialize["src"] = o.Src
	return toSerialize, nil
}

type NullableTokenMetadataFile struct {
	value *TokenMetadataFile
	isSet bool
}

func (v NullableTokenMetadataFile) Get() *TokenMetadataFile {
	return v.value
}

func (v *NullableTokenMetadataFile) Set(val *TokenMetadataFile) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenMetadataFile) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenMetadataFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenMetadataFile(val *TokenMetadataFile) *NullableTokenMetadataFile {
	return &NullableTokenMetadataFile{value: val, isSet: true}
}

func (v NullableTokenMetadataFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenMetadataFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


