/*
Marlowe Runtime REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.5
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CaseOneOf1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CaseOneOf1{}

// CaseOneOf1 struct for CaseOneOf1
type CaseOneOf1 struct {
	Case Action `json:"case"`
	MerkleizedThen string `json:"merkleized_then"`
}

// NewCaseOneOf1 instantiates a new CaseOneOf1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCaseOneOf1(case_ Action, merkleizedThen string) *CaseOneOf1 {
	this := CaseOneOf1{}
	this.Case = case_
	this.MerkleizedThen = merkleizedThen
	return &this
}

// NewCaseOneOf1WithDefaults instantiates a new CaseOneOf1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCaseOneOf1WithDefaults() *CaseOneOf1 {
	this := CaseOneOf1{}
	return &this
}

// GetCase returns the Case field value
func (o *CaseOneOf1) GetCase() Action {
	if o == nil {
		var ret Action
		return ret
	}

	return o.Case
}

// GetCaseOk returns a tuple with the Case field value
// and a boolean to check if the value has been set.
func (o *CaseOneOf1) GetCaseOk() (*Action, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Case, true
}

// SetCase sets field value
func (o *CaseOneOf1) SetCase(v Action) {
	o.Case = v
}

// GetMerkleizedThen returns the MerkleizedThen field value
func (o *CaseOneOf1) GetMerkleizedThen() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MerkleizedThen
}

// GetMerkleizedThenOk returns a tuple with the MerkleizedThen field value
// and a boolean to check if the value has been set.
func (o *CaseOneOf1) GetMerkleizedThenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MerkleizedThen, true
}

// SetMerkleizedThen sets field value
func (o *CaseOneOf1) SetMerkleizedThen(v string) {
	o.MerkleizedThen = v
}

func (o CaseOneOf1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CaseOneOf1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["case"] = o.Case
	toSerialize["merkleized_then"] = o.MerkleizedThen
	return toSerialize, nil
}

type NullableCaseOneOf1 struct {
	value *CaseOneOf1
	isSet bool
}

func (v NullableCaseOneOf1) Get() *CaseOneOf1 {
	return v.value
}

func (v *NullableCaseOneOf1) Set(val *CaseOneOf1) {
	v.value = val
	v.isSet = true
}

func (v NullableCaseOneOf1) IsSet() bool {
	return v.isSet
}

func (v *NullableCaseOneOf1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCaseOneOf1(val *CaseOneOf1) *NullableCaseOneOf1 {
	return &NullableCaseOneOf1{value: val, isSet: true}
}

func (v NullableCaseOneOf1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCaseOneOf1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


