/*
Marlowe Runtime REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.5
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ValueOneOf1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ValueOneOf1{}

// ValueOneOf1 struct for ValueOneOf1
type ValueOneOf1 struct {
	Negate Value `json:"negate"`
}

// NewValueOneOf1 instantiates a new ValueOneOf1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValueOneOf1(negate Value) *ValueOneOf1 {
	this := ValueOneOf1{}
	this.Negate = negate
	return &this
}

// NewValueOneOf1WithDefaults instantiates a new ValueOneOf1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValueOneOf1WithDefaults() *ValueOneOf1 {
	this := ValueOneOf1{}
	return &this
}

// GetNegate returns the Negate field value
func (o *ValueOneOf1) GetNegate() Value {
	if o == nil {
		var ret Value
		return ret
	}

	return o.Negate
}

// GetNegateOk returns a tuple with the Negate field value
// and a boolean to check if the value has been set.
func (o *ValueOneOf1) GetNegateOk() (*Value, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Negate, true
}

// SetNegate sets field value
func (o *ValueOneOf1) SetNegate(v Value) {
	o.Negate = v
}

func (o ValueOneOf1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ValueOneOf1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["negate"] = o.Negate
	return toSerialize, nil
}

type NullableValueOneOf1 struct {
	value *ValueOneOf1
	isSet bool
}

func (v NullableValueOneOf1) Get() *ValueOneOf1 {
	return v.value
}

func (v *NullableValueOneOf1) Set(val *ValueOneOf1) {
	v.value = val
	v.isSet = true
}

func (v NullableValueOneOf1) IsSet() bool {
	return v.isSet
}

func (v *NullableValueOneOf1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValueOneOf1(val *ValueOneOf1) *NullableValueOneOf1 {
	return &NullableValueOneOf1{value: val, isSet: true}
}

func (v NullableValueOneOf1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValueOneOf1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


