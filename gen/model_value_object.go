/*
Marlowe Runtime REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.5
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ValueObject - A time-varying expression that evaluates to a boolean
type ValueObject struct {
	ValueObjectOneOf *ValueObjectOneOf
	ValueObjectOneOf1 *ValueObjectOneOf1
	ValueObjectOneOf2 *ValueObjectOneOf2
	ValueObjectOneOf3 *ValueObjectOneOf3
	ValueObjectOneOf4 *ValueObjectOneOf4
	ValueObjectOneOf5 *ValueObjectOneOf5
	ValueObjectOneOf6 *ValueObjectOneOf6
	ValueObjectOneOf7 *ValueObjectOneOf7
	ValueObjectOneOf8 *ValueObjectOneOf8
	ValueOneOf7 *ValueOneOf7
	Int64 *int64
	String *string
}

// ValueObjectOneOfAsValueObject is a convenience function that returns ValueObjectOneOf wrapped in ValueObject
func ValueObjectOneOfAsValueObject(v *ValueObjectOneOf) ValueObject {
	return ValueObject{
		ValueObjectOneOf: v,
	}
}

// ValueObjectOneOf1AsValueObject is a convenience function that returns ValueObjectOneOf1 wrapped in ValueObject
func ValueObjectOneOf1AsValueObject(v *ValueObjectOneOf1) ValueObject {
	return ValueObject{
		ValueObjectOneOf1: v,
	}
}

// ValueObjectOneOf2AsValueObject is a convenience function that returns ValueObjectOneOf2 wrapped in ValueObject
func ValueObjectOneOf2AsValueObject(v *ValueObjectOneOf2) ValueObject {
	return ValueObject{
		ValueObjectOneOf2: v,
	}
}

// ValueObjectOneOf3AsValueObject is a convenience function that returns ValueObjectOneOf3 wrapped in ValueObject
func ValueObjectOneOf3AsValueObject(v *ValueObjectOneOf3) ValueObject {
	return ValueObject{
		ValueObjectOneOf3: v,
	}
}

// ValueObjectOneOf4AsValueObject is a convenience function that returns ValueObjectOneOf4 wrapped in ValueObject
func ValueObjectOneOf4AsValueObject(v *ValueObjectOneOf4) ValueObject {
	return ValueObject{
		ValueObjectOneOf4: v,
	}
}

// ValueObjectOneOf5AsValueObject is a convenience function that returns ValueObjectOneOf5 wrapped in ValueObject
func ValueObjectOneOf5AsValueObject(v *ValueObjectOneOf5) ValueObject {
	return ValueObject{
		ValueObjectOneOf5: v,
	}
}

// ValueObjectOneOf6AsValueObject is a convenience function that returns ValueObjectOneOf6 wrapped in ValueObject
func ValueObjectOneOf6AsValueObject(v *ValueObjectOneOf6) ValueObject {
	return ValueObject{
		ValueObjectOneOf6: v,
	}
}

// ValueObjectOneOf7AsValueObject is a convenience function that returns ValueObjectOneOf7 wrapped in ValueObject
func ValueObjectOneOf7AsValueObject(v *ValueObjectOneOf7) ValueObject {
	return ValueObject{
		ValueObjectOneOf7: v,
	}
}

// ValueObjectOneOf8AsValueObject is a convenience function that returns ValueObjectOneOf8 wrapped in ValueObject
func ValueObjectOneOf8AsValueObject(v *ValueObjectOneOf8) ValueObject {
	return ValueObject{
		ValueObjectOneOf8: v,
	}
}

// ValueOneOf7AsValueObject is a convenience function that returns ValueOneOf7 wrapped in ValueObject
func ValueOneOf7AsValueObject(v *ValueOneOf7) ValueObject {
	return ValueObject{
		ValueOneOf7: v,
	}
}

// int64AsValueObject is a convenience function that returns int64 wrapped in ValueObject
func Int64AsValueObject(v *int64) ValueObject {
	return ValueObject{
		Int64: v,
	}
}

// stringAsValueObject is a convenience function that returns string wrapped in ValueObject
func StringAsValueObject(v *string) ValueObject {
	return ValueObject{
		String: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ValueObject) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ValueObjectOneOf
	err = newStrictDecoder(data).Decode(&dst.ValueObjectOneOf)
	if err == nil {
		jsonValueObjectOneOf, _ := json.Marshal(dst.ValueObjectOneOf)
		if string(jsonValueObjectOneOf) == "{}" { // empty struct
			dst.ValueObjectOneOf = nil
		} else {
			match++
		}
	} else {
		dst.ValueObjectOneOf = nil
	}

	// try to unmarshal data into ValueObjectOneOf1
	err = newStrictDecoder(data).Decode(&dst.ValueObjectOneOf1)
	if err == nil {
		jsonValueObjectOneOf1, _ := json.Marshal(dst.ValueObjectOneOf1)
		if string(jsonValueObjectOneOf1) == "{}" { // empty struct
			dst.ValueObjectOneOf1 = nil
		} else {
			match++
		}
	} else {
		dst.ValueObjectOneOf1 = nil
	}

	// try to unmarshal data into ValueObjectOneOf2
	err = newStrictDecoder(data).Decode(&dst.ValueObjectOneOf2)
	if err == nil {
		jsonValueObjectOneOf2, _ := json.Marshal(dst.ValueObjectOneOf2)
		if string(jsonValueObjectOneOf2) == "{}" { // empty struct
			dst.ValueObjectOneOf2 = nil
		} else {
			match++
		}
	} else {
		dst.ValueObjectOneOf2 = nil
	}

	// try to unmarshal data into ValueObjectOneOf3
	err = newStrictDecoder(data).Decode(&dst.ValueObjectOneOf3)
	if err == nil {
		jsonValueObjectOneOf3, _ := json.Marshal(dst.ValueObjectOneOf3)
		if string(jsonValueObjectOneOf3) == "{}" { // empty struct
			dst.ValueObjectOneOf3 = nil
		} else {
			match++
		}
	} else {
		dst.ValueObjectOneOf3 = nil
	}

	// try to unmarshal data into ValueObjectOneOf4
	err = newStrictDecoder(data).Decode(&dst.ValueObjectOneOf4)
	if err == nil {
		jsonValueObjectOneOf4, _ := json.Marshal(dst.ValueObjectOneOf4)
		if string(jsonValueObjectOneOf4) == "{}" { // empty struct
			dst.ValueObjectOneOf4 = nil
		} else {
			match++
		}
	} else {
		dst.ValueObjectOneOf4 = nil
	}

	// try to unmarshal data into ValueObjectOneOf5
	err = newStrictDecoder(data).Decode(&dst.ValueObjectOneOf5)
	if err == nil {
		jsonValueObjectOneOf5, _ := json.Marshal(dst.ValueObjectOneOf5)
		if string(jsonValueObjectOneOf5) == "{}" { // empty struct
			dst.ValueObjectOneOf5 = nil
		} else {
			match++
		}
	} else {
		dst.ValueObjectOneOf5 = nil
	}

	// try to unmarshal data into ValueObjectOneOf6
	err = newStrictDecoder(data).Decode(&dst.ValueObjectOneOf6)
	if err == nil {
		jsonValueObjectOneOf6, _ := json.Marshal(dst.ValueObjectOneOf6)
		if string(jsonValueObjectOneOf6) == "{}" { // empty struct
			dst.ValueObjectOneOf6 = nil
		} else {
			match++
		}
	} else {
		dst.ValueObjectOneOf6 = nil
	}

	// try to unmarshal data into ValueObjectOneOf7
	err = newStrictDecoder(data).Decode(&dst.ValueObjectOneOf7)
	if err == nil {
		jsonValueObjectOneOf7, _ := json.Marshal(dst.ValueObjectOneOf7)
		if string(jsonValueObjectOneOf7) == "{}" { // empty struct
			dst.ValueObjectOneOf7 = nil
		} else {
			match++
		}
	} else {
		dst.ValueObjectOneOf7 = nil
	}

	// try to unmarshal data into ValueObjectOneOf8
	err = newStrictDecoder(data).Decode(&dst.ValueObjectOneOf8)
	if err == nil {
		jsonValueObjectOneOf8, _ := json.Marshal(dst.ValueObjectOneOf8)
		if string(jsonValueObjectOneOf8) == "{}" { // empty struct
			dst.ValueObjectOneOf8 = nil
		} else {
			match++
		}
	} else {
		dst.ValueObjectOneOf8 = nil
	}

	// try to unmarshal data into ValueOneOf7
	err = newStrictDecoder(data).Decode(&dst.ValueOneOf7)
	if err == nil {
		jsonValueOneOf7, _ := json.Marshal(dst.ValueOneOf7)
		if string(jsonValueOneOf7) == "{}" { // empty struct
			dst.ValueOneOf7 = nil
		} else {
			match++
		}
	} else {
		dst.ValueOneOf7 = nil
	}

	// try to unmarshal data into Int64
	err = newStrictDecoder(data).Decode(&dst.Int64)
	if err == nil {
		jsonInt64, _ := json.Marshal(dst.Int64)
		if string(jsonInt64) == "{}" { // empty struct
			dst.Int64 = nil
		} else {
			match++
		}
	} else {
		dst.Int64 = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ValueObjectOneOf = nil
		dst.ValueObjectOneOf1 = nil
		dst.ValueObjectOneOf2 = nil
		dst.ValueObjectOneOf3 = nil
		dst.ValueObjectOneOf4 = nil
		dst.ValueObjectOneOf5 = nil
		dst.ValueObjectOneOf6 = nil
		dst.ValueObjectOneOf7 = nil
		dst.ValueObjectOneOf8 = nil
		dst.ValueOneOf7 = nil
		dst.Int64 = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ValueObject)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ValueObject)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ValueObject) MarshalJSON() ([]byte, error) {
	if src.ValueObjectOneOf != nil {
		return json.Marshal(&src.ValueObjectOneOf)
	}

	if src.ValueObjectOneOf1 != nil {
		return json.Marshal(&src.ValueObjectOneOf1)
	}

	if src.ValueObjectOneOf2 != nil {
		return json.Marshal(&src.ValueObjectOneOf2)
	}

	if src.ValueObjectOneOf3 != nil {
		return json.Marshal(&src.ValueObjectOneOf3)
	}

	if src.ValueObjectOneOf4 != nil {
		return json.Marshal(&src.ValueObjectOneOf4)
	}

	if src.ValueObjectOneOf5 != nil {
		return json.Marshal(&src.ValueObjectOneOf5)
	}

	if src.ValueObjectOneOf6 != nil {
		return json.Marshal(&src.ValueObjectOneOf6)
	}

	if src.ValueObjectOneOf7 != nil {
		return json.Marshal(&src.ValueObjectOneOf7)
	}

	if src.ValueObjectOneOf8 != nil {
		return json.Marshal(&src.ValueObjectOneOf8)
	}

	if src.ValueOneOf7 != nil {
		return json.Marshal(&src.ValueOneOf7)
	}

	if src.Int64 != nil {
		return json.Marshal(&src.Int64)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ValueObject) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ValueObjectOneOf != nil {
		return obj.ValueObjectOneOf
	}

	if obj.ValueObjectOneOf1 != nil {
		return obj.ValueObjectOneOf1
	}

	if obj.ValueObjectOneOf2 != nil {
		return obj.ValueObjectOneOf2
	}

	if obj.ValueObjectOneOf3 != nil {
		return obj.ValueObjectOneOf3
	}

	if obj.ValueObjectOneOf4 != nil {
		return obj.ValueObjectOneOf4
	}

	if obj.ValueObjectOneOf5 != nil {
		return obj.ValueObjectOneOf5
	}

	if obj.ValueObjectOneOf6 != nil {
		return obj.ValueObjectOneOf6
	}

	if obj.ValueObjectOneOf7 != nil {
		return obj.ValueObjectOneOf7
	}

	if obj.ValueObjectOneOf8 != nil {
		return obj.ValueObjectOneOf8
	}

	if obj.ValueOneOf7 != nil {
		return obj.ValueOneOf7
	}

	if obj.Int64 != nil {
		return obj.Int64
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableValueObject struct {
	value *ValueObject
	isSet bool
}

func (v NullableValueObject) Get() *ValueObject {
	return v.value
}

func (v *NullableValueObject) Set(val *ValueObject) {
	v.value = val
	v.isSet = true
}

func (v NullableValueObject) IsSet() bool {
	return v.isSet
}

func (v *NullableValueObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValueObject(val *ValueObject) *NullableValueObject {
	return &NullableValueObject{value: val, isSet: true}
}

func (v NullableValueObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValueObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


