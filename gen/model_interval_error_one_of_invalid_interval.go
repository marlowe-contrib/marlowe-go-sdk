/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the IntervalErrorOneOfInvalidInterval type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IntervalErrorOneOfInvalidInterval{}

// IntervalErrorOneOfInvalidInterval struct for IntervalErrorOneOfInvalidInterval
type IntervalErrorOneOfInvalidInterval struct {
	From int32 `json:"from"`
	To int32 `json:"to"`
}

// NewIntervalErrorOneOfInvalidInterval instantiates a new IntervalErrorOneOfInvalidInterval object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntervalErrorOneOfInvalidInterval(from int32, to int32) *IntervalErrorOneOfInvalidInterval {
	this := IntervalErrorOneOfInvalidInterval{}
	this.From = from
	this.To = to
	return &this
}

// NewIntervalErrorOneOfInvalidIntervalWithDefaults instantiates a new IntervalErrorOneOfInvalidInterval object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntervalErrorOneOfInvalidIntervalWithDefaults() *IntervalErrorOneOfInvalidInterval {
	this := IntervalErrorOneOfInvalidInterval{}
	return &this
}

// GetFrom returns the From field value
func (o *IntervalErrorOneOfInvalidInterval) GetFrom() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.From
}

// GetFromOk returns a tuple with the From field value
// and a boolean to check if the value has been set.
func (o *IntervalErrorOneOfInvalidInterval) GetFromOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.From, true
}

// SetFrom sets field value
func (o *IntervalErrorOneOfInvalidInterval) SetFrom(v int32) {
	o.From = v
}

// GetTo returns the To field value
func (o *IntervalErrorOneOfInvalidInterval) GetTo() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.To
}

// GetToOk returns a tuple with the To field value
// and a boolean to check if the value has been set.
func (o *IntervalErrorOneOfInvalidInterval) GetToOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.To, true
}

// SetTo sets field value
func (o *IntervalErrorOneOfInvalidInterval) SetTo(v int32) {
	o.To = v
}

func (o IntervalErrorOneOfInvalidInterval) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IntervalErrorOneOfInvalidInterval) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["from"] = o.From
	toSerialize["to"] = o.To
	return toSerialize, nil
}

type NullableIntervalErrorOneOfInvalidInterval struct {
	value *IntervalErrorOneOfInvalidInterval
	isSet bool
}

func (v NullableIntervalErrorOneOfInvalidInterval) Get() *IntervalErrorOneOfInvalidInterval {
	return v.value
}

func (v *NullableIntervalErrorOneOfInvalidInterval) Set(val *IntervalErrorOneOfInvalidInterval) {
	v.value = val
	v.isSet = true
}

func (v NullableIntervalErrorOneOfInvalidInterval) IsSet() bool {
	return v.isSet
}

func (v *NullableIntervalErrorOneOfInvalidInterval) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntervalErrorOneOfInvalidInterval(val *IntervalErrorOneOfInvalidInterval) *NullableIntervalErrorOneOfInvalidInterval {
	return &NullableIntervalErrorOneOfInvalidInterval{value: val, isSet: true}
}

func (v NullableIntervalErrorOneOfInvalidInterval) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntervalErrorOneOfInvalidInterval) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


