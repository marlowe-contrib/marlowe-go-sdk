/*
Marlowe Runtime REST API

REST API for Marlowe Runtime

API version: 0.0.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ApplicableInputs type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApplicableInputs{}

// ApplicableInputs Applicable Inputs for a given contract
type ApplicableInputs struct {
	Choices []CanChoose `json:"choices"`
	Deposits []CanDeposit `json:"deposits"`
	Notify *CanNotify `json:"notify,omitempty"`
}

// NewApplicableInputs instantiates a new ApplicableInputs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicableInputs(choices []CanChoose, deposits []CanDeposit) *ApplicableInputs {
	this := ApplicableInputs{}
	this.Choices = choices
	this.Deposits = deposits
	return &this
}

// NewApplicableInputsWithDefaults instantiates a new ApplicableInputs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicableInputsWithDefaults() *ApplicableInputs {
	this := ApplicableInputs{}
	return &this
}

// GetChoices returns the Choices field value
func (o *ApplicableInputs) GetChoices() []CanChoose {
	if o == nil {
		var ret []CanChoose
		return ret
	}

	return o.Choices
}

// GetChoicesOk returns a tuple with the Choices field value
// and a boolean to check if the value has been set.
func (o *ApplicableInputs) GetChoicesOk() ([]CanChoose, bool) {
	if o == nil {
		return nil, false
	}
	return o.Choices, true
}

// SetChoices sets field value
func (o *ApplicableInputs) SetChoices(v []CanChoose) {
	o.Choices = v
}

// GetDeposits returns the Deposits field value
func (o *ApplicableInputs) GetDeposits() []CanDeposit {
	if o == nil {
		var ret []CanDeposit
		return ret
	}

	return o.Deposits
}

// GetDepositsOk returns a tuple with the Deposits field value
// and a boolean to check if the value has been set.
func (o *ApplicableInputs) GetDepositsOk() ([]CanDeposit, bool) {
	if o == nil {
		return nil, false
	}
	return o.Deposits, true
}

// SetDeposits sets field value
func (o *ApplicableInputs) SetDeposits(v []CanDeposit) {
	o.Deposits = v
}

// GetNotify returns the Notify field value if set, zero value otherwise.
func (o *ApplicableInputs) GetNotify() CanNotify {
	if o == nil || IsNil(o.Notify) {
		var ret CanNotify
		return ret
	}
	return *o.Notify
}

// GetNotifyOk returns a tuple with the Notify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicableInputs) GetNotifyOk() (*CanNotify, bool) {
	if o == nil || IsNil(o.Notify) {
		return nil, false
	}
	return o.Notify, true
}

// HasNotify returns a boolean if a field has been set.
func (o *ApplicableInputs) HasNotify() bool {
	if o != nil && !IsNil(o.Notify) {
		return true
	}

	return false
}

// SetNotify gets a reference to the given CanNotify and assigns it to the Notify field.
func (o *ApplicableInputs) SetNotify(v CanNotify) {
	o.Notify = &v
}

func (o ApplicableInputs) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplicableInputs) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["choices"] = o.Choices
	toSerialize["deposits"] = o.Deposits
	if !IsNil(o.Notify) {
		toSerialize["notify"] = o.Notify
	}
	return toSerialize, nil
}

type NullableApplicableInputs struct {
	value *ApplicableInputs
	isSet bool
}

func (v NullableApplicableInputs) Get() *ApplicableInputs {
	return v.value
}

func (v *NullableApplicableInputs) Set(val *ApplicableInputs) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicableInputs) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicableInputs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicableInputs(val *ApplicableInputs) *NullableApplicableInputs {
	return &NullableApplicableInputs{value: val, isSet: true}
}

func (v NullableApplicableInputs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicableInputs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


