/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// TransactionWarning - A transaction semantics warning.
type TransactionWarning struct {
	TransactionWarningOneOf *TransactionWarningOneOf
	TransactionWarningOneOf1 *TransactionWarningOneOf1
	TransactionWarningOneOf2 *TransactionWarningOneOf2
	TransactionWarningOneOf3 *TransactionWarningOneOf3
	String *string
}

// TransactionWarningOneOfAsTransactionWarning is a convenience function that returns TransactionWarningOneOf wrapped in TransactionWarning
func TransactionWarningOneOfAsTransactionWarning(v *TransactionWarningOneOf) TransactionWarning {
	return TransactionWarning{
		TransactionWarningOneOf: v,
	}
}

// TransactionWarningOneOf1AsTransactionWarning is a convenience function that returns TransactionWarningOneOf1 wrapped in TransactionWarning
func TransactionWarningOneOf1AsTransactionWarning(v *TransactionWarningOneOf1) TransactionWarning {
	return TransactionWarning{
		TransactionWarningOneOf1: v,
	}
}

// TransactionWarningOneOf2AsTransactionWarning is a convenience function that returns TransactionWarningOneOf2 wrapped in TransactionWarning
func TransactionWarningOneOf2AsTransactionWarning(v *TransactionWarningOneOf2) TransactionWarning {
	return TransactionWarning{
		TransactionWarningOneOf2: v,
	}
}

// TransactionWarningOneOf3AsTransactionWarning is a convenience function that returns TransactionWarningOneOf3 wrapped in TransactionWarning
func TransactionWarningOneOf3AsTransactionWarning(v *TransactionWarningOneOf3) TransactionWarning {
	return TransactionWarning{
		TransactionWarningOneOf3: v,
	}
}

// stringAsTransactionWarning is a convenience function that returns string wrapped in TransactionWarning
func StringAsTransactionWarning(v *string) TransactionWarning {
	return TransactionWarning{
		String: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *TransactionWarning) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into TransactionWarningOneOf
	err = newStrictDecoder(data).Decode(&dst.TransactionWarningOneOf)
	if err == nil {
		jsonTransactionWarningOneOf, _ := json.Marshal(dst.TransactionWarningOneOf)
		if string(jsonTransactionWarningOneOf) == "{}" { // empty struct
			dst.TransactionWarningOneOf = nil
		} else {
			match++
		}
	} else {
		dst.TransactionWarningOneOf = nil
	}

	// try to unmarshal data into TransactionWarningOneOf1
	err = newStrictDecoder(data).Decode(&dst.TransactionWarningOneOf1)
	if err == nil {
		jsonTransactionWarningOneOf1, _ := json.Marshal(dst.TransactionWarningOneOf1)
		if string(jsonTransactionWarningOneOf1) == "{}" { // empty struct
			dst.TransactionWarningOneOf1 = nil
		} else {
			match++
		}
	} else {
		dst.TransactionWarningOneOf1 = nil
	}

	// try to unmarshal data into TransactionWarningOneOf2
	err = newStrictDecoder(data).Decode(&dst.TransactionWarningOneOf2)
	if err == nil {
		jsonTransactionWarningOneOf2, _ := json.Marshal(dst.TransactionWarningOneOf2)
		if string(jsonTransactionWarningOneOf2) == "{}" { // empty struct
			dst.TransactionWarningOneOf2 = nil
		} else {
			match++
		}
	} else {
		dst.TransactionWarningOneOf2 = nil
	}

	// try to unmarshal data into TransactionWarningOneOf3
	err = newStrictDecoder(data).Decode(&dst.TransactionWarningOneOf3)
	if err == nil {
		jsonTransactionWarningOneOf3, _ := json.Marshal(dst.TransactionWarningOneOf3)
		if string(jsonTransactionWarningOneOf3) == "{}" { // empty struct
			dst.TransactionWarningOneOf3 = nil
		} else {
			match++
		}
	} else {
		dst.TransactionWarningOneOf3 = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.TransactionWarningOneOf = nil
		dst.TransactionWarningOneOf1 = nil
		dst.TransactionWarningOneOf2 = nil
		dst.TransactionWarningOneOf3 = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(TransactionWarning)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(TransactionWarning)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TransactionWarning) MarshalJSON() ([]byte, error) {
	if src.TransactionWarningOneOf != nil {
		return json.Marshal(&src.TransactionWarningOneOf)
	}

	if src.TransactionWarningOneOf1 != nil {
		return json.Marshal(&src.TransactionWarningOneOf1)
	}

	if src.TransactionWarningOneOf2 != nil {
		return json.Marshal(&src.TransactionWarningOneOf2)
	}

	if src.TransactionWarningOneOf3 != nil {
		return json.Marshal(&src.TransactionWarningOneOf3)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *TransactionWarning) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.TransactionWarningOneOf != nil {
		return obj.TransactionWarningOneOf
	}

	if obj.TransactionWarningOneOf1 != nil {
		return obj.TransactionWarningOneOf1
	}

	if obj.TransactionWarningOneOf2 != nil {
		return obj.TransactionWarningOneOf2
	}

	if obj.TransactionWarningOneOf3 != nil {
		return obj.TransactionWarningOneOf3
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableTransactionWarning struct {
	value *TransactionWarning
	isSet bool
}

func (v NullableTransactionWarning) Get() *TransactionWarning {
	return v.value
}

func (v *NullableTransactionWarning) Set(val *TransactionWarning) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionWarning) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionWarning) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionWarning(val *TransactionWarning) *NullableTransactionWarning {
	return &NullableTransactionWarning{value: val, isSet: true}
}

func (v NullableTransactionWarning) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionWarning) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


