/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// Input - An input to a Marlowe transaction
type Input struct {
	InputOneOf *InputOneOf
	InputOneOf1 *InputOneOf1
	InputOneOf2 *InputOneOf2
	InputOneOf3 *InputOneOf3
	InputOneOf4 *InputOneOf4
	String *string
}

// InputOneOfAsInput is a convenience function that returns InputOneOf wrapped in Input
func InputOneOfAsInput(v *InputOneOf) Input {
	return Input{
		InputOneOf: v,
	}
}

// InputOneOf1AsInput is a convenience function that returns InputOneOf1 wrapped in Input
func InputOneOf1AsInput(v *InputOneOf1) Input {
	return Input{
		InputOneOf1: v,
	}
}

// InputOneOf2AsInput is a convenience function that returns InputOneOf2 wrapped in Input
func InputOneOf2AsInput(v *InputOneOf2) Input {
	return Input{
		InputOneOf2: v,
	}
}

// InputOneOf3AsInput is a convenience function that returns InputOneOf3 wrapped in Input
func InputOneOf3AsInput(v *InputOneOf3) Input {
	return Input{
		InputOneOf3: v,
	}
}

// InputOneOf4AsInput is a convenience function that returns InputOneOf4 wrapped in Input
func InputOneOf4AsInput(v *InputOneOf4) Input {
	return Input{
		InputOneOf4: v,
	}
}

// stringAsInput is a convenience function that returns string wrapped in Input
func StringAsInput(v *string) Input {
	return Input{
		String: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Input) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into InputOneOf
	err = newStrictDecoder(data).Decode(&dst.InputOneOf)
	if err == nil {
		jsonInputOneOf, _ := json.Marshal(dst.InputOneOf)
		if string(jsonInputOneOf) == "{}" { // empty struct
			dst.InputOneOf = nil
		} else {
			match++
		}
	} else {
		dst.InputOneOf = nil
	}

	// try to unmarshal data into InputOneOf1
	err = newStrictDecoder(data).Decode(&dst.InputOneOf1)
	if err == nil {
		jsonInputOneOf1, _ := json.Marshal(dst.InputOneOf1)
		if string(jsonInputOneOf1) == "{}" { // empty struct
			dst.InputOneOf1 = nil
		} else {
			match++
		}
	} else {
		dst.InputOneOf1 = nil
	}

	// try to unmarshal data into InputOneOf2
	err = newStrictDecoder(data).Decode(&dst.InputOneOf2)
	if err == nil {
		jsonInputOneOf2, _ := json.Marshal(dst.InputOneOf2)
		if string(jsonInputOneOf2) == "{}" { // empty struct
			dst.InputOneOf2 = nil
		} else {
			match++
		}
	} else {
		dst.InputOneOf2 = nil
	}

	// try to unmarshal data into InputOneOf3
	err = newStrictDecoder(data).Decode(&dst.InputOneOf3)
	if err == nil {
		jsonInputOneOf3, _ := json.Marshal(dst.InputOneOf3)
		if string(jsonInputOneOf3) == "{}" { // empty struct
			dst.InputOneOf3 = nil
		} else {
			match++
		}
	} else {
		dst.InputOneOf3 = nil
	}

	// try to unmarshal data into InputOneOf4
	err = newStrictDecoder(data).Decode(&dst.InputOneOf4)
	if err == nil {
		jsonInputOneOf4, _ := json.Marshal(dst.InputOneOf4)
		if string(jsonInputOneOf4) == "{}" { // empty struct
			dst.InputOneOf4 = nil
		} else {
			match++
		}
	} else {
		dst.InputOneOf4 = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.InputOneOf = nil
		dst.InputOneOf1 = nil
		dst.InputOneOf2 = nil
		dst.InputOneOf3 = nil
		dst.InputOneOf4 = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Input)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Input)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Input) MarshalJSON() ([]byte, error) {
	if src.InputOneOf != nil {
		return json.Marshal(&src.InputOneOf)
	}

	if src.InputOneOf1 != nil {
		return json.Marshal(&src.InputOneOf1)
	}

	if src.InputOneOf2 != nil {
		return json.Marshal(&src.InputOneOf2)
	}

	if src.InputOneOf3 != nil {
		return json.Marshal(&src.InputOneOf3)
	}

	if src.InputOneOf4 != nil {
		return json.Marshal(&src.InputOneOf4)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Input) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.InputOneOf != nil {
		return obj.InputOneOf
	}

	if obj.InputOneOf1 != nil {
		return obj.InputOneOf1
	}

	if obj.InputOneOf2 != nil {
		return obj.InputOneOf2
	}

	if obj.InputOneOf3 != nil {
		return obj.InputOneOf3
	}

	if obj.InputOneOf4 != nil {
		return obj.InputOneOf4
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableInput struct {
	value *Input
	isSet bool
}

func (v NullableInput) Get() *Input {
	return v.value
}

func (v *NullableInput) Set(val *Input) {
	v.value = val
	v.isSet = true
}

func (v NullableInput) IsSet() bool {
	return v.isSet
}

func (v *NullableInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInput(val *Input) *NullableInput {
	return &NullableInput{value: val, isSet: true}
}

func (v NullableInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


