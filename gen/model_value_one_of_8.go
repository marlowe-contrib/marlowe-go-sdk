/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ValueOneOf8 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ValueOneOf8{}

// ValueOneOf8 struct for ValueOneOf8
type ValueOneOf8 struct {
	Else Value `json:"else"`
	If Observation `json:"if"`
	Then Value `json:"then"`
}

// NewValueOneOf8 instantiates a new ValueOneOf8 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValueOneOf8(else_ Value, if_ Observation, then Value) *ValueOneOf8 {
	this := ValueOneOf8{}
	this.Else = else_
	this.If = if_
	this.Then = then
	return &this
}

// NewValueOneOf8WithDefaults instantiates a new ValueOneOf8 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValueOneOf8WithDefaults() *ValueOneOf8 {
	this := ValueOneOf8{}
	return &this
}

// GetElse returns the Else field value
func (o *ValueOneOf8) GetElse() Value {
	if o == nil {
		var ret Value
		return ret
	}

	return o.Else
}

// GetElseOk returns a tuple with the Else field value
// and a boolean to check if the value has been set.
func (o *ValueOneOf8) GetElseOk() (*Value, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Else, true
}

// SetElse sets field value
func (o *ValueOneOf8) SetElse(v Value) {
	o.Else = v
}

// GetIf returns the If field value
func (o *ValueOneOf8) GetIf() Observation {
	if o == nil {
		var ret Observation
		return ret
	}

	return o.If
}

// GetIfOk returns a tuple with the If field value
// and a boolean to check if the value has been set.
func (o *ValueOneOf8) GetIfOk() (*Observation, bool) {
	if o == nil {
		return nil, false
	}
	return &o.If, true
}

// SetIf sets field value
func (o *ValueOneOf8) SetIf(v Observation) {
	o.If = v
}

// GetThen returns the Then field value
func (o *ValueOneOf8) GetThen() Value {
	if o == nil {
		var ret Value
		return ret
	}

	return o.Then
}

// GetThenOk returns a tuple with the Then field value
// and a boolean to check if the value has been set.
func (o *ValueOneOf8) GetThenOk() (*Value, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Then, true
}

// SetThen sets field value
func (o *ValueOneOf8) SetThen(v Value) {
	o.Then = v
}

func (o ValueOneOf8) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ValueOneOf8) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["else"] = o.Else
	toSerialize["if"] = o.If
	toSerialize["then"] = o.Then
	return toSerialize, nil
}

type NullableValueOneOf8 struct {
	value *ValueOneOf8
	isSet bool
}

func (v NullableValueOneOf8) Get() *ValueOneOf8 {
	return v.value
}

func (v *NullableValueOneOf8) Set(val *ValueOneOf8) {
	v.value = val
	v.isSet = true
}

func (v NullableValueOneOf8) IsSet() bool {
	return v.isSet
}

func (v *NullableValueOneOf8) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValueOneOf8(val *ValueOneOf8) *NullableValueOneOf8 {
	return &NullableValueOneOf8{value: val, isSet: true}
}

func (v NullableValueOneOf8) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValueOneOf8) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


