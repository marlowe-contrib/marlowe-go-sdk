/*
Marlowe Runtime REST API

REST API for Marlowe Runtime

API version: 0.0.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ValueObjectOneOf1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ValueObjectOneOf1{}

// ValueObjectOneOf1 struct for ValueObjectOneOf1
type ValueObjectOneOf1 struct {
	Negate ValueObject `json:"negate"`
}

// NewValueObjectOneOf1 instantiates a new ValueObjectOneOf1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValueObjectOneOf1(negate ValueObject) *ValueObjectOneOf1 {
	this := ValueObjectOneOf1{}
	this.Negate = negate
	return &this
}

// NewValueObjectOneOf1WithDefaults instantiates a new ValueObjectOneOf1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValueObjectOneOf1WithDefaults() *ValueObjectOneOf1 {
	this := ValueObjectOneOf1{}
	return &this
}

// GetNegate returns the Negate field value
func (o *ValueObjectOneOf1) GetNegate() ValueObject {
	if o == nil {
		var ret ValueObject
		return ret
	}

	return o.Negate
}

// GetNegateOk returns a tuple with the Negate field value
// and a boolean to check if the value has been set.
func (o *ValueObjectOneOf1) GetNegateOk() (*ValueObject, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Negate, true
}

// SetNegate sets field value
func (o *ValueObjectOneOf1) SetNegate(v ValueObject) {
	o.Negate = v
}

func (o ValueObjectOneOf1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ValueObjectOneOf1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["negate"] = o.Negate
	return toSerialize, nil
}

type NullableValueObjectOneOf1 struct {
	value *ValueObjectOneOf1
	isSet bool
}

func (v NullableValueObjectOneOf1) Get() *ValueObjectOneOf1 {
	return v.value
}

func (v *NullableValueObjectOneOf1) Set(val *ValueObjectOneOf1) {
	v.value = val
	v.isSet = true
}

func (v NullableValueObjectOneOf1) IsSet() bool {
	return v.isSet
}

func (v *NullableValueObjectOneOf1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValueObjectOneOf1(val *ValueObjectOneOf1) *NullableValueObjectOneOf1 {
	return &NullableValueObjectOneOf1{value: val, isSet: true}
}

func (v NullableValueObjectOneOf1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValueObjectOneOf1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


