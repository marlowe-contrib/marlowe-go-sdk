/*
Marlowe Runtime REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.5
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ValueOneOf7 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ValueOneOf7{}

// ValueOneOf7 struct for ValueOneOf7
type ValueOneOf7 struct {
	UseValue string `json:"use_value"`
}

// NewValueOneOf7 instantiates a new ValueOneOf7 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValueOneOf7(useValue string) *ValueOneOf7 {
	this := ValueOneOf7{}
	this.UseValue = useValue
	return &this
}

// NewValueOneOf7WithDefaults instantiates a new ValueOneOf7 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValueOneOf7WithDefaults() *ValueOneOf7 {
	this := ValueOneOf7{}
	return &this
}

// GetUseValue returns the UseValue field value
func (o *ValueOneOf7) GetUseValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UseValue
}

// GetUseValueOk returns a tuple with the UseValue field value
// and a boolean to check if the value has been set.
func (o *ValueOneOf7) GetUseValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UseValue, true
}

// SetUseValue sets field value
func (o *ValueOneOf7) SetUseValue(v string) {
	o.UseValue = v
}

func (o ValueOneOf7) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ValueOneOf7) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["use_value"] = o.UseValue
	return toSerialize, nil
}

type NullableValueOneOf7 struct {
	value *ValueOneOf7
	isSet bool
}

func (v NullableValueOneOf7) Get() *ValueOneOf7 {
	return v.value
}

func (v *NullableValueOneOf7) Set(val *ValueOneOf7) {
	v.value = val
	v.isSet = true
}

func (v NullableValueOneOf7) IsSet() bool {
	return v.isSet
}

func (v *NullableValueOneOf7) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValueOneOf7(val *ValueOneOf7) *NullableValueOneOf7 {
	return &NullableValueOneOf7{value: val, isSet: true}
}

func (v NullableValueOneOf7) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValueOneOf7) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


