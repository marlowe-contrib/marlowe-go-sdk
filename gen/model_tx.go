/*
Marlowe Runtime REST API

REST API for Marlowe Runtime

API version: 0.0.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Tx type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Tx{}

// Tx struct for Tx
type Tx struct {
	Assets Assets `json:"assets"`
	Block *BlockHeader `json:"block,omitempty"`
	// The hex-encoded identifier of a Cardano transaction
	ConsumingTx *string `json:"consumingTx,omitempty"`
	Continuations *string `json:"continuations,omitempty"`
	// A reference to a transaction output with a transaction ID and index.
	ContractId string `json:"contractId"`
	// A reference to a transaction output with a transaction ID and index.
	InputUtxo string `json:"inputUtxo"`
	Inputs []Input `json:"inputs"`
	InvalidBefore string `json:"invalidBefore"`
	InvalidHereafter string `json:"invalidHereafter"`
	Metadata map[string]interface{} `json:"metadata"`
	OutputContract *Contract `json:"outputContract,omitempty"`
	OutputState *MarloweState `json:"outputState,omitempty"`
	// A reference to a transaction output with a transaction ID and index.
	OutputUtxo *string `json:"outputUtxo,omitempty"`
	Payouts []Payout `json:"payouts"`
	Status TxStatus `json:"status"`
	Tags map[string]interface{} `json:"tags"`
	// The hex-encoded identifier of a Cardano transaction
	TransactionId string `json:"transactionId"`
	TxBody *TextEnvelope `json:"txBody,omitempty"`
}

// NewTx instantiates a new Tx object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTx(assets Assets, contractId string, inputUtxo string, inputs []Input, invalidBefore string, invalidHereafter string, metadata map[string]interface{}, payouts []Payout, status TxStatus, tags map[string]interface{}, transactionId string) *Tx {
	this := Tx{}
	this.Assets = assets
	this.ContractId = contractId
	this.InputUtxo = inputUtxo
	this.Inputs = inputs
	this.InvalidBefore = invalidBefore
	this.InvalidHereafter = invalidHereafter
	this.Metadata = metadata
	this.Payouts = payouts
	this.Status = status
	this.Tags = tags
	this.TransactionId = transactionId
	return &this
}

// NewTxWithDefaults instantiates a new Tx object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTxWithDefaults() *Tx {
	this := Tx{}
	return &this
}

// GetAssets returns the Assets field value
func (o *Tx) GetAssets() Assets {
	if o == nil {
		var ret Assets
		return ret
	}

	return o.Assets
}

// GetAssetsOk returns a tuple with the Assets field value
// and a boolean to check if the value has been set.
func (o *Tx) GetAssetsOk() (*Assets, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Assets, true
}

// SetAssets sets field value
func (o *Tx) SetAssets(v Assets) {
	o.Assets = v
}

// GetBlock returns the Block field value if set, zero value otherwise.
func (o *Tx) GetBlock() BlockHeader {
	if o == nil || IsNil(o.Block) {
		var ret BlockHeader
		return ret
	}
	return *o.Block
}

// GetBlockOk returns a tuple with the Block field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tx) GetBlockOk() (*BlockHeader, bool) {
	if o == nil || IsNil(o.Block) {
		return nil, false
	}
	return o.Block, true
}

// HasBlock returns a boolean if a field has been set.
func (o *Tx) HasBlock() bool {
	if o != nil && !IsNil(o.Block) {
		return true
	}

	return false
}

// SetBlock gets a reference to the given BlockHeader and assigns it to the Block field.
func (o *Tx) SetBlock(v BlockHeader) {
	o.Block = &v
}

// GetConsumingTx returns the ConsumingTx field value if set, zero value otherwise.
func (o *Tx) GetConsumingTx() string {
	if o == nil || IsNil(o.ConsumingTx) {
		var ret string
		return ret
	}
	return *o.ConsumingTx
}

// GetConsumingTxOk returns a tuple with the ConsumingTx field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tx) GetConsumingTxOk() (*string, bool) {
	if o == nil || IsNil(o.ConsumingTx) {
		return nil, false
	}
	return o.ConsumingTx, true
}

// HasConsumingTx returns a boolean if a field has been set.
func (o *Tx) HasConsumingTx() bool {
	if o != nil && !IsNil(o.ConsumingTx) {
		return true
	}

	return false
}

// SetConsumingTx gets a reference to the given string and assigns it to the ConsumingTx field.
func (o *Tx) SetConsumingTx(v string) {
	o.ConsumingTx = &v
}

// GetContinuations returns the Continuations field value if set, zero value otherwise.
func (o *Tx) GetContinuations() string {
	if o == nil || IsNil(o.Continuations) {
		var ret string
		return ret
	}
	return *o.Continuations
}

// GetContinuationsOk returns a tuple with the Continuations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tx) GetContinuationsOk() (*string, bool) {
	if o == nil || IsNil(o.Continuations) {
		return nil, false
	}
	return o.Continuations, true
}

// HasContinuations returns a boolean if a field has been set.
func (o *Tx) HasContinuations() bool {
	if o != nil && !IsNil(o.Continuations) {
		return true
	}

	return false
}

// SetContinuations gets a reference to the given string and assigns it to the Continuations field.
func (o *Tx) SetContinuations(v string) {
	o.Continuations = &v
}

// GetContractId returns the ContractId field value
func (o *Tx) GetContractId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContractId
}

// GetContractIdOk returns a tuple with the ContractId field value
// and a boolean to check if the value has been set.
func (o *Tx) GetContractIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContractId, true
}

// SetContractId sets field value
func (o *Tx) SetContractId(v string) {
	o.ContractId = v
}

// GetInputUtxo returns the InputUtxo field value
func (o *Tx) GetInputUtxo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InputUtxo
}

// GetInputUtxoOk returns a tuple with the InputUtxo field value
// and a boolean to check if the value has been set.
func (o *Tx) GetInputUtxoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InputUtxo, true
}

// SetInputUtxo sets field value
func (o *Tx) SetInputUtxo(v string) {
	o.InputUtxo = v
}

// GetInputs returns the Inputs field value
func (o *Tx) GetInputs() []Input {
	if o == nil {
		var ret []Input
		return ret
	}

	return o.Inputs
}

// GetInputsOk returns a tuple with the Inputs field value
// and a boolean to check if the value has been set.
func (o *Tx) GetInputsOk() ([]Input, bool) {
	if o == nil {
		return nil, false
	}
	return o.Inputs, true
}

// SetInputs sets field value
func (o *Tx) SetInputs(v []Input) {
	o.Inputs = v
}

// GetInvalidBefore returns the InvalidBefore field value
func (o *Tx) GetInvalidBefore() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InvalidBefore
}

// GetInvalidBeforeOk returns a tuple with the InvalidBefore field value
// and a boolean to check if the value has been set.
func (o *Tx) GetInvalidBeforeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InvalidBefore, true
}

// SetInvalidBefore sets field value
func (o *Tx) SetInvalidBefore(v string) {
	o.InvalidBefore = v
}

// GetInvalidHereafter returns the InvalidHereafter field value
func (o *Tx) GetInvalidHereafter() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InvalidHereafter
}

// GetInvalidHereafterOk returns a tuple with the InvalidHereafter field value
// and a boolean to check if the value has been set.
func (o *Tx) GetInvalidHereafterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InvalidHereafter, true
}

// SetInvalidHereafter sets field value
func (o *Tx) SetInvalidHereafter(v string) {
	o.InvalidHereafter = v
}

// GetMetadata returns the Metadata field value
func (o *Tx) GetMetadata() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *Tx) GetMetadataOk() (*map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *Tx) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetOutputContract returns the OutputContract field value if set, zero value otherwise.
func (o *Tx) GetOutputContract() Contract {
	if o == nil || IsNil(o.OutputContract) {
		var ret Contract
		return ret
	}
	return *o.OutputContract
}

// GetOutputContractOk returns a tuple with the OutputContract field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tx) GetOutputContractOk() (*Contract, bool) {
	if o == nil || IsNil(o.OutputContract) {
		return nil, false
	}
	return o.OutputContract, true
}

// HasOutputContract returns a boolean if a field has been set.
func (o *Tx) HasOutputContract() bool {
	if o != nil && !IsNil(o.OutputContract) {
		return true
	}

	return false
}

// SetOutputContract gets a reference to the given Contract and assigns it to the OutputContract field.
func (o *Tx) SetOutputContract(v Contract) {
	o.OutputContract = &v
}

// GetOutputState returns the OutputState field value if set, zero value otherwise.
func (o *Tx) GetOutputState() MarloweState {
	if o == nil || IsNil(o.OutputState) {
		var ret MarloweState
		return ret
	}
	return *o.OutputState
}

// GetOutputStateOk returns a tuple with the OutputState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tx) GetOutputStateOk() (*MarloweState, bool) {
	if o == nil || IsNil(o.OutputState) {
		return nil, false
	}
	return o.OutputState, true
}

// HasOutputState returns a boolean if a field has been set.
func (o *Tx) HasOutputState() bool {
	if o != nil && !IsNil(o.OutputState) {
		return true
	}

	return false
}

// SetOutputState gets a reference to the given MarloweState and assigns it to the OutputState field.
func (o *Tx) SetOutputState(v MarloweState) {
	o.OutputState = &v
}

// GetOutputUtxo returns the OutputUtxo field value if set, zero value otherwise.
func (o *Tx) GetOutputUtxo() string {
	if o == nil || IsNil(o.OutputUtxo) {
		var ret string
		return ret
	}
	return *o.OutputUtxo
}

// GetOutputUtxoOk returns a tuple with the OutputUtxo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tx) GetOutputUtxoOk() (*string, bool) {
	if o == nil || IsNil(o.OutputUtxo) {
		return nil, false
	}
	return o.OutputUtxo, true
}

// HasOutputUtxo returns a boolean if a field has been set.
func (o *Tx) HasOutputUtxo() bool {
	if o != nil && !IsNil(o.OutputUtxo) {
		return true
	}

	return false
}

// SetOutputUtxo gets a reference to the given string and assigns it to the OutputUtxo field.
func (o *Tx) SetOutputUtxo(v string) {
	o.OutputUtxo = &v
}

// GetPayouts returns the Payouts field value
func (o *Tx) GetPayouts() []Payout {
	if o == nil {
		var ret []Payout
		return ret
	}

	return o.Payouts
}

// GetPayoutsOk returns a tuple with the Payouts field value
// and a boolean to check if the value has been set.
func (o *Tx) GetPayoutsOk() ([]Payout, bool) {
	if o == nil {
		return nil, false
	}
	return o.Payouts, true
}

// SetPayouts sets field value
func (o *Tx) SetPayouts(v []Payout) {
	o.Payouts = v
}

// GetStatus returns the Status field value
func (o *Tx) GetStatus() TxStatus {
	if o == nil {
		var ret TxStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Tx) GetStatusOk() (*TxStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Tx) SetStatus(v TxStatus) {
	o.Status = v
}

// GetTags returns the Tags field value
func (o *Tx) GetTags() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value
// and a boolean to check if the value has been set.
func (o *Tx) GetTagsOk() (*map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tags, true
}

// SetTags sets field value
func (o *Tx) SetTags(v map[string]interface{}) {
	o.Tags = v
}

// GetTransactionId returns the TransactionId field value
func (o *Tx) GetTransactionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransactionId
}

// GetTransactionIdOk returns a tuple with the TransactionId field value
// and a boolean to check if the value has been set.
func (o *Tx) GetTransactionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionId, true
}

// SetTransactionId sets field value
func (o *Tx) SetTransactionId(v string) {
	o.TransactionId = v
}

// GetTxBody returns the TxBody field value if set, zero value otherwise.
func (o *Tx) GetTxBody() TextEnvelope {
	if o == nil || IsNil(o.TxBody) {
		var ret TextEnvelope
		return ret
	}
	return *o.TxBody
}

// GetTxBodyOk returns a tuple with the TxBody field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tx) GetTxBodyOk() (*TextEnvelope, bool) {
	if o == nil || IsNil(o.TxBody) {
		return nil, false
	}
	return o.TxBody, true
}

// HasTxBody returns a boolean if a field has been set.
func (o *Tx) HasTxBody() bool {
	if o != nil && !IsNil(o.TxBody) {
		return true
	}

	return false
}

// SetTxBody gets a reference to the given TextEnvelope and assigns it to the TxBody field.
func (o *Tx) SetTxBody(v TextEnvelope) {
	o.TxBody = &v
}

func (o Tx) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Tx) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["assets"] = o.Assets
	if !IsNil(o.Block) {
		toSerialize["block"] = o.Block
	}
	if !IsNil(o.ConsumingTx) {
		toSerialize["consumingTx"] = o.ConsumingTx
	}
	if !IsNil(o.Continuations) {
		toSerialize["continuations"] = o.Continuations
	}
	toSerialize["contractId"] = o.ContractId
	toSerialize["inputUtxo"] = o.InputUtxo
	toSerialize["inputs"] = o.Inputs
	toSerialize["invalidBefore"] = o.InvalidBefore
	toSerialize["invalidHereafter"] = o.InvalidHereafter
	toSerialize["metadata"] = o.Metadata
	if !IsNil(o.OutputContract) {
		toSerialize["outputContract"] = o.OutputContract
	}
	if !IsNil(o.OutputState) {
		toSerialize["outputState"] = o.OutputState
	}
	if !IsNil(o.OutputUtxo) {
		toSerialize["outputUtxo"] = o.OutputUtxo
	}
	toSerialize["payouts"] = o.Payouts
	toSerialize["status"] = o.Status
	toSerialize["tags"] = o.Tags
	toSerialize["transactionId"] = o.TransactionId
	if !IsNil(o.TxBody) {
		toSerialize["txBody"] = o.TxBody
	}
	return toSerialize, nil
}

type NullableTx struct {
	value *Tx
	isSet bool
}

func (v NullableTx) Get() *Tx {
	return v.value
}

func (v *NullableTx) Set(val *Tx) {
	v.value = val
	v.isSet = true
}

func (v NullableTx) IsSet() bool {
	return v.isSet
}

func (v *NullableTx) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTx(val *Tx) *NullableTx {
	return &NullableTx{value: val, isSet: true}
}

func (v NullableTx) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTx) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


