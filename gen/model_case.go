/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// Case - A contract which becomes active when an action occurs.
type Case struct {
	CaseOneOf *CaseOneOf
	CaseOneOf1 *CaseOneOf1
}

// CaseOneOfAsCase is a convenience function that returns CaseOneOf wrapped in Case
func CaseOneOfAsCase(v *CaseOneOf) Case {
	return Case{
		CaseOneOf: v,
	}
}

// CaseOneOf1AsCase is a convenience function that returns CaseOneOf1 wrapped in Case
func CaseOneOf1AsCase(v *CaseOneOf1) Case {
	return Case{
		CaseOneOf1: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Case) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CaseOneOf
	err = newStrictDecoder(data).Decode(&dst.CaseOneOf)
	if err == nil {
		jsonCaseOneOf, _ := json.Marshal(dst.CaseOneOf)
		if string(jsonCaseOneOf) == "{}" { // empty struct
			dst.CaseOneOf = nil
		} else {
			match++
		}
	} else {
		dst.CaseOneOf = nil
	}

	// try to unmarshal data into CaseOneOf1
	err = newStrictDecoder(data).Decode(&dst.CaseOneOf1)
	if err == nil {
		jsonCaseOneOf1, _ := json.Marshal(dst.CaseOneOf1)
		if string(jsonCaseOneOf1) == "{}" { // empty struct
			dst.CaseOneOf1 = nil
		} else {
			match++
		}
	} else {
		dst.CaseOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CaseOneOf = nil
		dst.CaseOneOf1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Case)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Case)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Case) MarshalJSON() ([]byte, error) {
	if src.CaseOneOf != nil {
		return json.Marshal(&src.CaseOneOf)
	}

	if src.CaseOneOf1 != nil {
		return json.Marshal(&src.CaseOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Case) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CaseOneOf != nil {
		return obj.CaseOneOf
	}

	if obj.CaseOneOf1 != nil {
		return obj.CaseOneOf1
	}

	// all schemas are nil
	return nil
}

type NullableCase struct {
	value *Case
	isSet bool
}

func (v NullableCase) Get() *Case {
	return v.value
}

func (v *NullableCase) Set(val *Case) {
	v.value = val
	v.isSet = true
}

func (v NullableCase) IsSet() bool {
	return v.isSet
}

func (v *NullableCase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCase(val *Case) *NullableCase {
	return &NullableCase{value: val, isSet: true}
}

func (v NullableCase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


