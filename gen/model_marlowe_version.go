/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MarloweVersion A version of the Marlowe language.
type MarloweVersion string

// List of MarloweVersion
const (
	V1 MarloweVersion = "v1"
)

// All allowed values of MarloweVersion enum
var AllowedMarloweVersionEnumValues = []MarloweVersion{
	"v1",
}

func (v *MarloweVersion) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MarloweVersion(value)
	for _, existing := range AllowedMarloweVersionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MarloweVersion", value)
}

// NewMarloweVersionFromValue returns a pointer to a valid MarloweVersion
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMarloweVersionFromValue(v string) (*MarloweVersion, error) {
	ev := MarloweVersion(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MarloweVersion: valid values are %v", v, AllowedMarloweVersionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MarloweVersion) IsValid() bool {
	for _, existing := range AllowedMarloweVersionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MarloweVersion value
func (v MarloweVersion) Ptr() *MarloweVersion {
	return &v
}

type NullableMarloweVersion struct {
	value *MarloweVersion
	isSet bool
}

func (v NullableMarloweVersion) Get() *MarloweVersion {
	return v.value
}

func (v *NullableMarloweVersion) Set(val *MarloweVersion) {
	v.value = val
	v.isSet = true
}

func (v NullableMarloweVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableMarloweVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMarloweVersion(val *MarloweVersion) *NullableMarloweVersion {
	return &NullableMarloweVersion{value: val, isSet: true}
}

func (v NullableMarloweVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMarloweVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

