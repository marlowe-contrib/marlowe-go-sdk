/*
Marlowe Runtime REST API

REST API for Marlowe Runtime

API version: 0.0.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the IntervalErrorOneOf1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IntervalErrorOneOf1{}

// IntervalErrorOneOf1 Marlowe transaction interval in past.
type IntervalErrorOneOf1 struct {
	IntervalInPastError IntervalErrorOneOf1IntervalInPastError `json:"intervalInPastError"`
}

// NewIntervalErrorOneOf1 instantiates a new IntervalErrorOneOf1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntervalErrorOneOf1(intervalInPastError IntervalErrorOneOf1IntervalInPastError) *IntervalErrorOneOf1 {
	this := IntervalErrorOneOf1{}
	this.IntervalInPastError = intervalInPastError
	return &this
}

// NewIntervalErrorOneOf1WithDefaults instantiates a new IntervalErrorOneOf1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntervalErrorOneOf1WithDefaults() *IntervalErrorOneOf1 {
	this := IntervalErrorOneOf1{}
	return &this
}

// GetIntervalInPastError returns the IntervalInPastError field value
func (o *IntervalErrorOneOf1) GetIntervalInPastError() IntervalErrorOneOf1IntervalInPastError {
	if o == nil {
		var ret IntervalErrorOneOf1IntervalInPastError
		return ret
	}

	return o.IntervalInPastError
}

// GetIntervalInPastErrorOk returns a tuple with the IntervalInPastError field value
// and a boolean to check if the value has been set.
func (o *IntervalErrorOneOf1) GetIntervalInPastErrorOk() (*IntervalErrorOneOf1IntervalInPastError, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IntervalInPastError, true
}

// SetIntervalInPastError sets field value
func (o *IntervalErrorOneOf1) SetIntervalInPastError(v IntervalErrorOneOf1IntervalInPastError) {
	o.IntervalInPastError = v
}

func (o IntervalErrorOneOf1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IntervalErrorOneOf1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["intervalInPastError"] = o.IntervalInPastError
	return toSerialize, nil
}

type NullableIntervalErrorOneOf1 struct {
	value *IntervalErrorOneOf1
	isSet bool
}

func (v NullableIntervalErrorOneOf1) Get() *IntervalErrorOneOf1 {
	return v.value
}

func (v *NullableIntervalErrorOneOf1) Set(val *IntervalErrorOneOf1) {
	v.value = val
	v.isSet = true
}

func (v NullableIntervalErrorOneOf1) IsSet() bool {
	return v.isSet
}

func (v *NullableIntervalErrorOneOf1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntervalErrorOneOf1(val *IntervalErrorOneOf1) *NullableIntervalErrorOneOf1 {
	return &NullableIntervalErrorOneOf1{value: val, isSet: true}
}

func (v NullableIntervalErrorOneOf1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntervalErrorOneOf1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


