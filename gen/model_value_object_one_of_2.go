/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ValueObjectOneOf2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ValueObjectOneOf2{}

// ValueObjectOneOf2 struct for ValueObjectOneOf2
type ValueObjectOneOf2 struct {
	Add ValueObject `json:"add"`
	And ValueObject `json:"and"`
}

// NewValueObjectOneOf2 instantiates a new ValueObjectOneOf2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValueObjectOneOf2(add ValueObject, and ValueObject) *ValueObjectOneOf2 {
	this := ValueObjectOneOf2{}
	this.Add = add
	this.And = and
	return &this
}

// NewValueObjectOneOf2WithDefaults instantiates a new ValueObjectOneOf2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValueObjectOneOf2WithDefaults() *ValueObjectOneOf2 {
	this := ValueObjectOneOf2{}
	return &this
}

// GetAdd returns the Add field value
func (o *ValueObjectOneOf2) GetAdd() ValueObject {
	if o == nil {
		var ret ValueObject
		return ret
	}

	return o.Add
}

// GetAddOk returns a tuple with the Add field value
// and a boolean to check if the value has been set.
func (o *ValueObjectOneOf2) GetAddOk() (*ValueObject, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Add, true
}

// SetAdd sets field value
func (o *ValueObjectOneOf2) SetAdd(v ValueObject) {
	o.Add = v
}

// GetAnd returns the And field value
func (o *ValueObjectOneOf2) GetAnd() ValueObject {
	if o == nil {
		var ret ValueObject
		return ret
	}

	return o.And
}

// GetAndOk returns a tuple with the And field value
// and a boolean to check if the value has been set.
func (o *ValueObjectOneOf2) GetAndOk() (*ValueObject, bool) {
	if o == nil {
		return nil, false
	}
	return &o.And, true
}

// SetAnd sets field value
func (o *ValueObjectOneOf2) SetAnd(v ValueObject) {
	o.And = v
}

func (o ValueObjectOneOf2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ValueObjectOneOf2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["add"] = o.Add
	toSerialize["and"] = o.And
	return toSerialize, nil
}

type NullableValueObjectOneOf2 struct {
	value *ValueObjectOneOf2
	isSet bool
}

func (v NullableValueObjectOneOf2) Get() *ValueObjectOneOf2 {
	return v.value
}

func (v *NullableValueObjectOneOf2) Set(val *ValueObjectOneOf2) {
	v.value = val
	v.isSet = true
}

func (v NullableValueObjectOneOf2) IsSet() bool {
	return v.isSet
}

func (v *NullableValueObjectOneOf2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValueObjectOneOf2(val *ValueObjectOneOf2) *NullableValueObjectOneOf2 {
	return &NullableValueObjectOneOf2{value: val, isSet: true}
}

func (v NullableValueObjectOneOf2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValueObjectOneOf2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


