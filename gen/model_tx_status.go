/*
Marlowe Runtime REST API

REST API for Marlowe Runtime

API version: 0.0.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// TxStatus The status of a transaction on the local node.
type TxStatus string

// List of TxStatus
const (
	UNSIGNED TxStatus = "unsigned"
	SUBMITTED TxStatus = "submitted"
	CONFIRMED TxStatus = "confirmed"
)

// All allowed values of TxStatus enum
var AllowedTxStatusEnumValues = []TxStatus{
	"unsigned",
	"submitted",
	"confirmed",
}

func (v *TxStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TxStatus(value)
	for _, existing := range AllowedTxStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TxStatus", value)
}

// NewTxStatusFromValue returns a pointer to a valid TxStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTxStatusFromValue(v string) (*TxStatus, error) {
	ev := TxStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TxStatus: valid values are %v", v, AllowedTxStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TxStatus) IsValid() bool {
	for _, existing := range AllowedTxStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TxStatus value
func (v TxStatus) Ptr() *TxStatus {
	return &v
}

type NullableTxStatus struct {
	value *TxStatus
	isSet bool
}

func (v NullableTxStatus) Get() *TxStatus {
	return v.value
}

func (v *NullableTxStatus) Set(val *TxStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableTxStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableTxStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTxStatus(val *TxStatus) *NullableTxStatus {
	return &NullableTxStatus{value: val, isSet: true}
}

func (v NullableTxStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTxStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

