/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// TokenObject - A token with a currency symbol (minting policy ID) and token name.
type TokenObject struct {
	Token *Token
	ValueObjectOneOf8 *ValueObjectOneOf8
}

// TokenAsTokenObject is a convenience function that returns Token wrapped in TokenObject
func TokenAsTokenObject(v *Token) TokenObject {
	return TokenObject{
		Token: v,
	}
}

// ValueObjectOneOf8AsTokenObject is a convenience function that returns ValueObjectOneOf8 wrapped in TokenObject
func ValueObjectOneOf8AsTokenObject(v *ValueObjectOneOf8) TokenObject {
	return TokenObject{
		ValueObjectOneOf8: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *TokenObject) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Token
	err = newStrictDecoder(data).Decode(&dst.Token)
	if err == nil {
		jsonToken, _ := json.Marshal(dst.Token)
		if string(jsonToken) == "{}" { // empty struct
			dst.Token = nil
		} else {
			match++
		}
	} else {
		dst.Token = nil
	}

	// try to unmarshal data into ValueObjectOneOf8
	err = newStrictDecoder(data).Decode(&dst.ValueObjectOneOf8)
	if err == nil {
		jsonValueObjectOneOf8, _ := json.Marshal(dst.ValueObjectOneOf8)
		if string(jsonValueObjectOneOf8) == "{}" { // empty struct
			dst.ValueObjectOneOf8 = nil
		} else {
			match++
		}
	} else {
		dst.ValueObjectOneOf8 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Token = nil
		dst.ValueObjectOneOf8 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(TokenObject)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(TokenObject)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TokenObject) MarshalJSON() ([]byte, error) {
	if src.Token != nil {
		return json.Marshal(&src.Token)
	}

	if src.ValueObjectOneOf8 != nil {
		return json.Marshal(&src.ValueObjectOneOf8)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *TokenObject) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.Token != nil {
		return obj.Token
	}

	if obj.ValueObjectOneOf8 != nil {
		return obj.ValueObjectOneOf8
	}

	// all schemas are nil
	return nil
}

type NullableTokenObject struct {
	value *TokenObject
	isSet bool
}

func (v NullableTokenObject) Get() *TokenObject {
	return v.value
}

func (v *NullableTokenObject) Set(val *TokenObject) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenObject) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenObject(val *TokenObject) *NullableTokenObject {
	return &NullableTokenObject{value: val, isSet: true}
}

func (v NullableTokenObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


