/*
Marlowe Runtime REST API

REST API for Marlowe Runtime

API version: 0.0.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ApplyInputsTxEnvelope type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApplyInputsTxEnvelope{}

// ApplyInputsTxEnvelope The \"type\" property of \"tx\" must be \"Tx BabbageEra\" or \"Tx ConwayEra\"
type ApplyInputsTxEnvelope struct {
	// A reference to a transaction output with a transaction ID and index.
	ContractId string `json:"contractId"`
	// The hex-encoded identifier of a Cardano transaction
	TransactionId string `json:"transactionId"`
	Tx TextEnvelope `json:"tx"`
}

// NewApplyInputsTxEnvelope instantiates a new ApplyInputsTxEnvelope object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplyInputsTxEnvelope(contractId string, transactionId string, tx TextEnvelope) *ApplyInputsTxEnvelope {
	this := ApplyInputsTxEnvelope{}
	this.ContractId = contractId
	this.TransactionId = transactionId
	this.Tx = tx
	return &this
}

// NewApplyInputsTxEnvelopeWithDefaults instantiates a new ApplyInputsTxEnvelope object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplyInputsTxEnvelopeWithDefaults() *ApplyInputsTxEnvelope {
	this := ApplyInputsTxEnvelope{}
	return &this
}

// GetContractId returns the ContractId field value
func (o *ApplyInputsTxEnvelope) GetContractId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContractId
}

// GetContractIdOk returns a tuple with the ContractId field value
// and a boolean to check if the value has been set.
func (o *ApplyInputsTxEnvelope) GetContractIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContractId, true
}

// SetContractId sets field value
func (o *ApplyInputsTxEnvelope) SetContractId(v string) {
	o.ContractId = v
}

// GetTransactionId returns the TransactionId field value
func (o *ApplyInputsTxEnvelope) GetTransactionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransactionId
}

// GetTransactionIdOk returns a tuple with the TransactionId field value
// and a boolean to check if the value has been set.
func (o *ApplyInputsTxEnvelope) GetTransactionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionId, true
}

// SetTransactionId sets field value
func (o *ApplyInputsTxEnvelope) SetTransactionId(v string) {
	o.TransactionId = v
}

// GetTx returns the Tx field value
func (o *ApplyInputsTxEnvelope) GetTx() TextEnvelope {
	if o == nil {
		var ret TextEnvelope
		return ret
	}

	return o.Tx
}

// GetTxOk returns a tuple with the Tx field value
// and a boolean to check if the value has been set.
func (o *ApplyInputsTxEnvelope) GetTxOk() (*TextEnvelope, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tx, true
}

// SetTx sets field value
func (o *ApplyInputsTxEnvelope) SetTx(v TextEnvelope) {
	o.Tx = v
}

func (o ApplyInputsTxEnvelope) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplyInputsTxEnvelope) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["contractId"] = o.ContractId
	toSerialize["transactionId"] = o.TransactionId
	toSerialize["tx"] = o.Tx
	return toSerialize, nil
}

type NullableApplyInputsTxEnvelope struct {
	value *ApplyInputsTxEnvelope
	isSet bool
}

func (v NullableApplyInputsTxEnvelope) Get() *ApplyInputsTxEnvelope {
	return v.value
}

func (v *NullableApplyInputsTxEnvelope) Set(val *ApplyInputsTxEnvelope) {
	v.value = val
	v.isSet = true
}

func (v NullableApplyInputsTxEnvelope) IsSet() bool {
	return v.isSet
}

func (v *NullableApplyInputsTxEnvelope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplyInputsTxEnvelope(val *ApplyInputsTxEnvelope) *NullableApplyInputsTxEnvelope {
	return &NullableApplyInputsTxEnvelope{value: val, isSet: true}
}

func (v NullableApplyInputsTxEnvelope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplyInputsTxEnvelope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


