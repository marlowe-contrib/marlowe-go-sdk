/*
Marlowe Runtime REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.5
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the LabelledObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LabelledObject{}

// LabelledObject A bundle of labelled Marlowe objects in define-before-use order.
type LabelledObject struct {
	// An arbitrary text identifier for an object in a Marlowe object bundle.
	Label string `json:"label"`
	Type string `json:"type"`
	Value LabelledObjectValue `json:"value"`
}

// NewLabelledObject instantiates a new LabelledObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLabelledObject(label string, type_ string, value LabelledObjectValue) *LabelledObject {
	this := LabelledObject{}
	this.Label = label
	this.Type = type_
	this.Value = value
	return &this
}

// NewLabelledObjectWithDefaults instantiates a new LabelledObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLabelledObjectWithDefaults() *LabelledObject {
	this := LabelledObject{}
	return &this
}

// GetLabel returns the Label field value
func (o *LabelledObject) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *LabelledObject) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *LabelledObject) SetLabel(v string) {
	o.Label = v
}

// GetType returns the Type field value
func (o *LabelledObject) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *LabelledObject) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *LabelledObject) SetType(v string) {
	o.Type = v
}

// GetValue returns the Value field value
func (o *LabelledObject) GetValue() LabelledObjectValue {
	if o == nil {
		var ret LabelledObjectValue
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *LabelledObject) GetValueOk() (*LabelledObjectValue, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *LabelledObject) SetValue(v LabelledObjectValue) {
	o.Value = v
}

func (o LabelledObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LabelledObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["label"] = o.Label
	toSerialize["type"] = o.Type
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

type NullableLabelledObject struct {
	value *LabelledObject
	isSet bool
}

func (v NullableLabelledObject) Get() *LabelledObject {
	return v.value
}

func (v *NullableLabelledObject) Set(val *LabelledObject) {
	v.value = val
	v.isSet = true
}

func (v NullableLabelledObject) IsSet() bool {
	return v.isSet
}

func (v *NullableLabelledObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLabelledObject(val *LabelledObject) *NullableLabelledObject {
	return &NullableLabelledObject{value: val, isSet: true}
}

func (v NullableLabelledObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLabelledObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


