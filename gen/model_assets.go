/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Assets type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Assets{}

// Assets struct for Assets
type Assets struct {
	Lovelace int32 `json:"lovelace"`
	Tokens map[string]map[string]int32 `json:"tokens"`
}

// NewAssets instantiates a new Assets object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssets(lovelace int32, tokens map[string]map[string]int32) *Assets {
	this := Assets{}
	this.Lovelace = lovelace
	this.Tokens = tokens
	return &this
}

// NewAssetsWithDefaults instantiates a new Assets object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssetsWithDefaults() *Assets {
	this := Assets{}
	return &this
}

// GetLovelace returns the Lovelace field value
func (o *Assets) GetLovelace() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Lovelace
}

// GetLovelaceOk returns a tuple with the Lovelace field value
// and a boolean to check if the value has been set.
func (o *Assets) GetLovelaceOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Lovelace, true
}

// SetLovelace sets field value
func (o *Assets) SetLovelace(v int32) {
	o.Lovelace = v
}

// GetTokens returns the Tokens field value
func (o *Assets) GetTokens() map[string]map[string]int32 {
	if o == nil {
		var ret map[string]map[string]int32
		return ret
	}

	return o.Tokens
}

// GetTokensOk returns a tuple with the Tokens field value
// and a boolean to check if the value has been set.
func (o *Assets) GetTokensOk() (*map[string]map[string]int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tokens, true
}

// SetTokens sets field value
func (o *Assets) SetTokens(v map[string]map[string]int32) {
	o.Tokens = v
}

func (o Assets) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Assets) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["lovelace"] = o.Lovelace
	toSerialize["tokens"] = o.Tokens
	return toSerialize, nil
}

type NullableAssets struct {
	value *Assets
	isSet bool
}

func (v NullableAssets) Get() *Assets {
	return v.value
}

func (v *NullableAssets) Set(val *Assets) {
	v.value = val
	v.isSet = true
}

func (v NullableAssets) IsSet() bool {
	return v.isSet
}

func (v *NullableAssets) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssets(val *Assets) *NullableAssets {
	return &NullableAssets{value: val, isSet: true}
}

func (v NullableAssets) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssets) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


