/*
Marlowe Runtime REST API

REST API for Marlowe Runtime

API version: 0.0.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CanDeposit type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CanDeposit{}

// CanDeposit Deposit Input that can be applied for a given contract
type CanDeposit struct {
	CanDeposit int32 `json:"can_deposit"`
	// Index of a \"Case Action\" in a \"When\"
	CaseIndex int32 `json:"case_index"`
	IntoAccount Party `json:"into_account"`
	// Indicates if a given contract continuation is merkleized
	IsMerkleizedContinuation bool `json:"is_merkleized_continuation"`
	OfToken Token `json:"of_token"`
	Party Party `json:"party"`
}

// NewCanDeposit instantiates a new CanDeposit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCanDeposit(canDeposit int32, caseIndex int32, intoAccount Party, isMerkleizedContinuation bool, ofToken Token, party Party) *CanDeposit {
	this := CanDeposit{}
	this.CanDeposit = canDeposit
	this.CaseIndex = caseIndex
	this.IntoAccount = intoAccount
	this.IsMerkleizedContinuation = isMerkleizedContinuation
	this.OfToken = ofToken
	this.Party = party
	return &this
}

// NewCanDepositWithDefaults instantiates a new CanDeposit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCanDepositWithDefaults() *CanDeposit {
	this := CanDeposit{}
	return &this
}

// GetCanDeposit returns the CanDeposit field value
func (o *CanDeposit) GetCanDeposit() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CanDeposit
}

// GetCanDepositOk returns a tuple with the CanDeposit field value
// and a boolean to check if the value has been set.
func (o *CanDeposit) GetCanDepositOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CanDeposit, true
}

// SetCanDeposit sets field value
func (o *CanDeposit) SetCanDeposit(v int32) {
	o.CanDeposit = v
}

// GetCaseIndex returns the CaseIndex field value
func (o *CanDeposit) GetCaseIndex() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CaseIndex
}

// GetCaseIndexOk returns a tuple with the CaseIndex field value
// and a boolean to check if the value has been set.
func (o *CanDeposit) GetCaseIndexOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CaseIndex, true
}

// SetCaseIndex sets field value
func (o *CanDeposit) SetCaseIndex(v int32) {
	o.CaseIndex = v
}

// GetIntoAccount returns the IntoAccount field value
func (o *CanDeposit) GetIntoAccount() Party {
	if o == nil {
		var ret Party
		return ret
	}

	return o.IntoAccount
}

// GetIntoAccountOk returns a tuple with the IntoAccount field value
// and a boolean to check if the value has been set.
func (o *CanDeposit) GetIntoAccountOk() (*Party, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IntoAccount, true
}

// SetIntoAccount sets field value
func (o *CanDeposit) SetIntoAccount(v Party) {
	o.IntoAccount = v
}

// GetIsMerkleizedContinuation returns the IsMerkleizedContinuation field value
func (o *CanDeposit) GetIsMerkleizedContinuation() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsMerkleizedContinuation
}

// GetIsMerkleizedContinuationOk returns a tuple with the IsMerkleizedContinuation field value
// and a boolean to check if the value has been set.
func (o *CanDeposit) GetIsMerkleizedContinuationOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsMerkleizedContinuation, true
}

// SetIsMerkleizedContinuation sets field value
func (o *CanDeposit) SetIsMerkleizedContinuation(v bool) {
	o.IsMerkleizedContinuation = v
}

// GetOfToken returns the OfToken field value
func (o *CanDeposit) GetOfToken() Token {
	if o == nil {
		var ret Token
		return ret
	}

	return o.OfToken
}

// GetOfTokenOk returns a tuple with the OfToken field value
// and a boolean to check if the value has been set.
func (o *CanDeposit) GetOfTokenOk() (*Token, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OfToken, true
}

// SetOfToken sets field value
func (o *CanDeposit) SetOfToken(v Token) {
	o.OfToken = v
}

// GetParty returns the Party field value
func (o *CanDeposit) GetParty() Party {
	if o == nil {
		var ret Party
		return ret
	}

	return o.Party
}

// GetPartyOk returns a tuple with the Party field value
// and a boolean to check if the value has been set.
func (o *CanDeposit) GetPartyOk() (*Party, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Party, true
}

// SetParty sets field value
func (o *CanDeposit) SetParty(v Party) {
	o.Party = v
}

func (o CanDeposit) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CanDeposit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["can_deposit"] = o.CanDeposit
	toSerialize["case_index"] = o.CaseIndex
	toSerialize["into_account"] = o.IntoAccount
	toSerialize["is_merkleized_continuation"] = o.IsMerkleizedContinuation
	toSerialize["of_token"] = o.OfToken
	toSerialize["party"] = o.Party
	return toSerialize, nil
}

type NullableCanDeposit struct {
	value *CanDeposit
	isSet bool
}

func (v NullableCanDeposit) Get() *CanDeposit {
	return v.value
}

func (v *NullableCanDeposit) Set(val *CanDeposit) {
	v.value = val
	v.isSet = true
}

func (v NullableCanDeposit) IsSet() bool {
	return v.isSet
}

func (v *NullableCanDeposit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCanDeposit(val *CanDeposit) *NullableCanDeposit {
	return &NullableCanDeposit{value: val, isSet: true}
}

func (v NullableCanDeposit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCanDeposit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


