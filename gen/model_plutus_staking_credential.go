/*
Marlowe Runtime REST API

REST API for Marlowe Runtime

API version: 0.0.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// PlutusStakingCredential - A Plutus staking credential.
type PlutusStakingCredential struct {
	PlutusStakingCredentialOneOf *PlutusStakingCredentialOneOf
	PlutusStakingCredentialOneOf1 *PlutusStakingCredentialOneOf1
}

// PlutusStakingCredentialOneOfAsPlutusStakingCredential is a convenience function that returns PlutusStakingCredentialOneOf wrapped in PlutusStakingCredential
func PlutusStakingCredentialOneOfAsPlutusStakingCredential(v *PlutusStakingCredentialOneOf) PlutusStakingCredential {
	return PlutusStakingCredential{
		PlutusStakingCredentialOneOf: v,
	}
}

// PlutusStakingCredentialOneOf1AsPlutusStakingCredential is a convenience function that returns PlutusStakingCredentialOneOf1 wrapped in PlutusStakingCredential
func PlutusStakingCredentialOneOf1AsPlutusStakingCredential(v *PlutusStakingCredentialOneOf1) PlutusStakingCredential {
	return PlutusStakingCredential{
		PlutusStakingCredentialOneOf1: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *PlutusStakingCredential) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into PlutusStakingCredentialOneOf
	err = newStrictDecoder(data).Decode(&dst.PlutusStakingCredentialOneOf)
	if err == nil {
		jsonPlutusStakingCredentialOneOf, _ := json.Marshal(dst.PlutusStakingCredentialOneOf)
		if string(jsonPlutusStakingCredentialOneOf) == "{}" { // empty struct
			dst.PlutusStakingCredentialOneOf = nil
		} else {
			match++
		}
	} else {
		dst.PlutusStakingCredentialOneOf = nil
	}

	// try to unmarshal data into PlutusStakingCredentialOneOf1
	err = newStrictDecoder(data).Decode(&dst.PlutusStakingCredentialOneOf1)
	if err == nil {
		jsonPlutusStakingCredentialOneOf1, _ := json.Marshal(dst.PlutusStakingCredentialOneOf1)
		if string(jsonPlutusStakingCredentialOneOf1) == "{}" { // empty struct
			dst.PlutusStakingCredentialOneOf1 = nil
		} else {
			match++
		}
	} else {
		dst.PlutusStakingCredentialOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.PlutusStakingCredentialOneOf = nil
		dst.PlutusStakingCredentialOneOf1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(PlutusStakingCredential)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(PlutusStakingCredential)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PlutusStakingCredential) MarshalJSON() ([]byte, error) {
	if src.PlutusStakingCredentialOneOf != nil {
		return json.Marshal(&src.PlutusStakingCredentialOneOf)
	}

	if src.PlutusStakingCredentialOneOf1 != nil {
		return json.Marshal(&src.PlutusStakingCredentialOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PlutusStakingCredential) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.PlutusStakingCredentialOneOf != nil {
		return obj.PlutusStakingCredentialOneOf
	}

	if obj.PlutusStakingCredentialOneOf1 != nil {
		return obj.PlutusStakingCredentialOneOf1
	}

	// all schemas are nil
	return nil
}

type NullablePlutusStakingCredential struct {
	value *PlutusStakingCredential
	isSet bool
}

func (v NullablePlutusStakingCredential) Get() *PlutusStakingCredential {
	return v.value
}

func (v *NullablePlutusStakingCredential) Set(val *PlutusStakingCredential) {
	v.value = val
	v.isSet = true
}

func (v NullablePlutusStakingCredential) IsSet() bool {
	return v.isSet
}

func (v *NullablePlutusStakingCredential) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlutusStakingCredential(val *PlutusStakingCredential) *NullablePlutusStakingCredential {
	return &NullablePlutusStakingCredential{value: val, isSet: true}
}

func (v NullablePlutusStakingCredential) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlutusStakingCredential) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


