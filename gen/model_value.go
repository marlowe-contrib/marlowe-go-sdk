/*
Marlowe Runtime REST API

REST API for Marlowe Runtime

API version: 0.0.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// Value - A time-varying expression that evaluates to a boolean
type Value struct {
	ValueOneOf *ValueOneOf
	ValueOneOf1 *ValueOneOf1
	ValueOneOf2 *ValueOneOf2
	ValueOneOf3 *ValueOneOf3
	ValueOneOf4 *ValueOneOf4
	ValueOneOf5 *ValueOneOf5
	ValueOneOf6 *ValueOneOf6
	ValueOneOf7 *ValueOneOf7
	ValueOneOf8 *ValueOneOf8
	Int64 *int64
	String *string
}

// ValueOneOfAsValue is a convenience function that returns ValueOneOf wrapped in Value
func ValueOneOfAsValue(v *ValueOneOf) Value {
	return Value{
		ValueOneOf: v,
	}
}

// ValueOneOf1AsValue is a convenience function that returns ValueOneOf1 wrapped in Value
func ValueOneOf1AsValue(v *ValueOneOf1) Value {
	return Value{
		ValueOneOf1: v,
	}
}

// ValueOneOf2AsValue is a convenience function that returns ValueOneOf2 wrapped in Value
func ValueOneOf2AsValue(v *ValueOneOf2) Value {
	return Value{
		ValueOneOf2: v,
	}
}

// ValueOneOf3AsValue is a convenience function that returns ValueOneOf3 wrapped in Value
func ValueOneOf3AsValue(v *ValueOneOf3) Value {
	return Value{
		ValueOneOf3: v,
	}
}

// ValueOneOf4AsValue is a convenience function that returns ValueOneOf4 wrapped in Value
func ValueOneOf4AsValue(v *ValueOneOf4) Value {
	return Value{
		ValueOneOf4: v,
	}
}

// ValueOneOf5AsValue is a convenience function that returns ValueOneOf5 wrapped in Value
func ValueOneOf5AsValue(v *ValueOneOf5) Value {
	return Value{
		ValueOneOf5: v,
	}
}

// ValueOneOf6AsValue is a convenience function that returns ValueOneOf6 wrapped in Value
func ValueOneOf6AsValue(v *ValueOneOf6) Value {
	return Value{
		ValueOneOf6: v,
	}
}

// ValueOneOf7AsValue is a convenience function that returns ValueOneOf7 wrapped in Value
func ValueOneOf7AsValue(v *ValueOneOf7) Value {
	return Value{
		ValueOneOf7: v,
	}
}

// ValueOneOf8AsValue is a convenience function that returns ValueOneOf8 wrapped in Value
func ValueOneOf8AsValue(v *ValueOneOf8) Value {
	return Value{
		ValueOneOf8: v,
	}
}

// int64AsValue is a convenience function that returns int64 wrapped in Value
func Int64AsValue(v *int64) Value {
	return Value{
		Int64: v,
	}
}

// stringAsValue is a convenience function that returns string wrapped in Value
func StringAsValue(v *string) Value {
	return Value{
		String: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Value) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ValueOneOf
	err = newStrictDecoder(data).Decode(&dst.ValueOneOf)
	if err == nil {
		jsonValueOneOf, _ := json.Marshal(dst.ValueOneOf)
		if string(jsonValueOneOf) == "{}" { // empty struct
			dst.ValueOneOf = nil
		} else {
			match++
		}
	} else {
		dst.ValueOneOf = nil
	}

	// try to unmarshal data into ValueOneOf1
	err = newStrictDecoder(data).Decode(&dst.ValueOneOf1)
	if err == nil {
		jsonValueOneOf1, _ := json.Marshal(dst.ValueOneOf1)
		if string(jsonValueOneOf1) == "{}" { // empty struct
			dst.ValueOneOf1 = nil
		} else {
			match++
		}
	} else {
		dst.ValueOneOf1 = nil
	}

	// try to unmarshal data into ValueOneOf2
	err = newStrictDecoder(data).Decode(&dst.ValueOneOf2)
	if err == nil {
		jsonValueOneOf2, _ := json.Marshal(dst.ValueOneOf2)
		if string(jsonValueOneOf2) == "{}" { // empty struct
			dst.ValueOneOf2 = nil
		} else {
			match++
		}
	} else {
		dst.ValueOneOf2 = nil
	}

	// try to unmarshal data into ValueOneOf3
	err = newStrictDecoder(data).Decode(&dst.ValueOneOf3)
	if err == nil {
		jsonValueOneOf3, _ := json.Marshal(dst.ValueOneOf3)
		if string(jsonValueOneOf3) == "{}" { // empty struct
			dst.ValueOneOf3 = nil
		} else {
			match++
		}
	} else {
		dst.ValueOneOf3 = nil
	}

	// try to unmarshal data into ValueOneOf4
	err = newStrictDecoder(data).Decode(&dst.ValueOneOf4)
	if err == nil {
		jsonValueOneOf4, _ := json.Marshal(dst.ValueOneOf4)
		if string(jsonValueOneOf4) == "{}" { // empty struct
			dst.ValueOneOf4 = nil
		} else {
			match++
		}
	} else {
		dst.ValueOneOf4 = nil
	}

	// try to unmarshal data into ValueOneOf5
	err = newStrictDecoder(data).Decode(&dst.ValueOneOf5)
	if err == nil {
		jsonValueOneOf5, _ := json.Marshal(dst.ValueOneOf5)
		if string(jsonValueOneOf5) == "{}" { // empty struct
			dst.ValueOneOf5 = nil
		} else {
			match++
		}
	} else {
		dst.ValueOneOf5 = nil
	}

	// try to unmarshal data into ValueOneOf6
	err = newStrictDecoder(data).Decode(&dst.ValueOneOf6)
	if err == nil {
		jsonValueOneOf6, _ := json.Marshal(dst.ValueOneOf6)
		if string(jsonValueOneOf6) == "{}" { // empty struct
			dst.ValueOneOf6 = nil
		} else {
			match++
		}
	} else {
		dst.ValueOneOf6 = nil
	}

	// try to unmarshal data into ValueOneOf7
	err = newStrictDecoder(data).Decode(&dst.ValueOneOf7)
	if err == nil {
		jsonValueOneOf7, _ := json.Marshal(dst.ValueOneOf7)
		if string(jsonValueOneOf7) == "{}" { // empty struct
			dst.ValueOneOf7 = nil
		} else {
			match++
		}
	} else {
		dst.ValueOneOf7 = nil
	}

	// try to unmarshal data into ValueOneOf8
	err = newStrictDecoder(data).Decode(&dst.ValueOneOf8)
	if err == nil {
		jsonValueOneOf8, _ := json.Marshal(dst.ValueOneOf8)
		if string(jsonValueOneOf8) == "{}" { // empty struct
			dst.ValueOneOf8 = nil
		} else {
			match++
		}
	} else {
		dst.ValueOneOf8 = nil
	}

	// try to unmarshal data into Int64
	err = newStrictDecoder(data).Decode(&dst.Int64)
	if err == nil {
		jsonInt64, _ := json.Marshal(dst.Int64)
		if string(jsonInt64) == "{}" { // empty struct
			dst.Int64 = nil
		} else {
			match++
		}
	} else {
		dst.Int64 = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ValueOneOf = nil
		dst.ValueOneOf1 = nil
		dst.ValueOneOf2 = nil
		dst.ValueOneOf3 = nil
		dst.ValueOneOf4 = nil
		dst.ValueOneOf5 = nil
		dst.ValueOneOf6 = nil
		dst.ValueOneOf7 = nil
		dst.ValueOneOf8 = nil
		dst.Int64 = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Value)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Value)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Value) MarshalJSON() ([]byte, error) {
	if src.ValueOneOf != nil {
		return json.Marshal(&src.ValueOneOf)
	}

	if src.ValueOneOf1 != nil {
		return json.Marshal(&src.ValueOneOf1)
	}

	if src.ValueOneOf2 != nil {
		return json.Marshal(&src.ValueOneOf2)
	}

	if src.ValueOneOf3 != nil {
		return json.Marshal(&src.ValueOneOf3)
	}

	if src.ValueOneOf4 != nil {
		return json.Marshal(&src.ValueOneOf4)
	}

	if src.ValueOneOf5 != nil {
		return json.Marshal(&src.ValueOneOf5)
	}

	if src.ValueOneOf6 != nil {
		return json.Marshal(&src.ValueOneOf6)
	}

	if src.ValueOneOf7 != nil {
		return json.Marshal(&src.ValueOneOf7)
	}

	if src.ValueOneOf8 != nil {
		return json.Marshal(&src.ValueOneOf8)
	}

	if src.Int64 != nil {
		return json.Marshal(&src.Int64)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Value) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ValueOneOf != nil {
		return obj.ValueOneOf
	}

	if obj.ValueOneOf1 != nil {
		return obj.ValueOneOf1
	}

	if obj.ValueOneOf2 != nil {
		return obj.ValueOneOf2
	}

	if obj.ValueOneOf3 != nil {
		return obj.ValueOneOf3
	}

	if obj.ValueOneOf4 != nil {
		return obj.ValueOneOf4
	}

	if obj.ValueOneOf5 != nil {
		return obj.ValueOneOf5
	}

	if obj.ValueOneOf6 != nil {
		return obj.ValueOneOf6
	}

	if obj.ValueOneOf7 != nil {
		return obj.ValueOneOf7
	}

	if obj.ValueOneOf8 != nil {
		return obj.ValueOneOf8
	}

	if obj.Int64 != nil {
		return obj.Int64
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableValue struct {
	value *Value
	isSet bool
}

func (v NullableValue) Get() *Value {
	return v.value
}

func (v *NullableValue) Set(val *Value) {
	v.value = val
	v.isSet = true
}

func (v NullableValue) IsSet() bool {
	return v.isSet
}

func (v *NullableValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValue(val *Value) *NullableValue {
	return &NullableValue{value: val, isSet: true}
}

func (v NullableValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


