/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CaseObjectOneOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CaseObjectOneOf{}

// CaseObjectOneOf struct for CaseObjectOneOf
type CaseObjectOneOf struct {
	Case ActionObject `json:"case"`
	Then ContractObject `json:"then"`
}

// NewCaseObjectOneOf instantiates a new CaseObjectOneOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCaseObjectOneOf(case_ ActionObject, then ContractObject) *CaseObjectOneOf {
	this := CaseObjectOneOf{}
	this.Case = case_
	this.Then = then
	return &this
}

// NewCaseObjectOneOfWithDefaults instantiates a new CaseObjectOneOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCaseObjectOneOfWithDefaults() *CaseObjectOneOf {
	this := CaseObjectOneOf{}
	return &this
}

// GetCase returns the Case field value
func (o *CaseObjectOneOf) GetCase() ActionObject {
	if o == nil {
		var ret ActionObject
		return ret
	}

	return o.Case
}

// GetCaseOk returns a tuple with the Case field value
// and a boolean to check if the value has been set.
func (o *CaseObjectOneOf) GetCaseOk() (*ActionObject, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Case, true
}

// SetCase sets field value
func (o *CaseObjectOneOf) SetCase(v ActionObject) {
	o.Case = v
}

// GetThen returns the Then field value
func (o *CaseObjectOneOf) GetThen() ContractObject {
	if o == nil {
		var ret ContractObject
		return ret
	}

	return o.Then
}

// GetThenOk returns a tuple with the Then field value
// and a boolean to check if the value has been set.
func (o *CaseObjectOneOf) GetThenOk() (*ContractObject, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Then, true
}

// SetThen sets field value
func (o *CaseObjectOneOf) SetThen(v ContractObject) {
	o.Then = v
}

func (o CaseObjectOneOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CaseObjectOneOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["case"] = o.Case
	toSerialize["then"] = o.Then
	return toSerialize, nil
}

type NullableCaseObjectOneOf struct {
	value *CaseObjectOneOf
	isSet bool
}

func (v NullableCaseObjectOneOf) Get() *CaseObjectOneOf {
	return v.value
}

func (v *NullableCaseObjectOneOf) Set(val *CaseObjectOneOf) {
	v.value = val
	v.isSet = true
}

func (v NullableCaseObjectOneOf) IsSet() bool {
	return v.isSet
}

func (v *NullableCaseObjectOneOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCaseObjectOneOf(val *CaseObjectOneOf) *NullableCaseObjectOneOf {
	return &NullableCaseObjectOneOf{value: val, isSet: true}
}

func (v NullableCaseObjectOneOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCaseObjectOneOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


