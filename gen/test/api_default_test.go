/*


Testing DefaultAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID/openapi"
)

func Test_openapi_DefaultAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DefaultAPIService ContractsContractIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var contractId string

		resp, httpRes, err := apiClient.DefaultAPI.ContractsContractIdGet(context.Background(), contractId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ContractsContractIdNextGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var contractId string

		resp, httpRes, err := apiClient.DefaultAPI.ContractsContractIdNextGet(context.Background(), contractId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ContractsContractIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var contractId string

		httpRes, err := apiClient.DefaultAPI.ContractsContractIdPut(context.Background(), contractId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ContractsContractIdTransactionsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var contractId string

		resp, httpRes, err := apiClient.DefaultAPI.ContractsContractIdTransactionsGet(context.Background(), contractId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ContractsContractIdTransactionsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var contractId string

		resp, httpRes, err := apiClient.DefaultAPI.ContractsContractIdTransactionsPost(context.Background(), contractId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ContractsContractIdTransactionsTransactionIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var contractId string
		var transactionId string

		resp, httpRes, err := apiClient.DefaultAPI.ContractsContractIdTransactionsTransactionIdGet(context.Background(), contractId, transactionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ContractsContractIdTransactionsTransactionIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var contractId string
		var transactionId string

		httpRes, err := apiClient.DefaultAPI.ContractsContractIdTransactionsTransactionIdPut(context.Background(), contractId, transactionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ContractsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ContractsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ContractsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ContractsPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ContractsSourcesContractSourceIdAdjacencyGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var contractSourceId string

		resp, httpRes, err := apiClient.DefaultAPI.ContractsSourcesContractSourceIdAdjacencyGet(context.Background(), contractSourceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ContractsSourcesContractSourceIdClosureGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var contractSourceId string

		resp, httpRes, err := apiClient.DefaultAPI.ContractsSourcesContractSourceIdClosureGet(context.Background(), contractSourceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ContractsSourcesContractSourceIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var contractSourceId string

		resp, httpRes, err := apiClient.DefaultAPI.ContractsSourcesContractSourceIdGet(context.Background(), contractSourceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ContractsSourcesPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ContractsSourcesPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService HealthcheckGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.HealthcheckGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService PayoutsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.PayoutsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService PayoutsPayoutIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var payoutId string

		resp, httpRes, err := apiClient.DefaultAPI.PayoutsPayoutIdGet(context.Background(), payoutId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService WithdrawalsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.WithdrawalsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService WithdrawalsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.WithdrawalsPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService WithdrawalsWithdrawalIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var withdrawalId string

		resp, httpRes, err := apiClient.DefaultAPI.WithdrawalsWithdrawalIdGet(context.Background(), withdrawalId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService WithdrawalsWithdrawalIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var withdrawalId string

		httpRes, err := apiClient.DefaultAPI.WithdrawalsWithdrawalIdPut(context.Background(), withdrawalId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
