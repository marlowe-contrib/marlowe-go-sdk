/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// LabelledObjectValue - struct for LabelledObjectValue
type LabelledObjectValue struct {
	ActionObject *ActionObject
	ContractObject *ContractObject
	ObservationObject *ObservationObject
	PartyObject *PartyObject
	TokenObject *TokenObject
	ValueObject *ValueObject
}

// ActionObjectAsLabelledObjectValue is a convenience function that returns ActionObject wrapped in LabelledObjectValue
func ActionObjectAsLabelledObjectValue(v *ActionObject) LabelledObjectValue {
	return LabelledObjectValue{
		ActionObject: v,
	}
}

// ContractObjectAsLabelledObjectValue is a convenience function that returns ContractObject wrapped in LabelledObjectValue
func ContractObjectAsLabelledObjectValue(v *ContractObject) LabelledObjectValue {
	return LabelledObjectValue{
		ContractObject: v,
	}
}

// ObservationObjectAsLabelledObjectValue is a convenience function that returns ObservationObject wrapped in LabelledObjectValue
func ObservationObjectAsLabelledObjectValue(v *ObservationObject) LabelledObjectValue {
	return LabelledObjectValue{
		ObservationObject: v,
	}
}

// PartyObjectAsLabelledObjectValue is a convenience function that returns PartyObject wrapped in LabelledObjectValue
func PartyObjectAsLabelledObjectValue(v *PartyObject) LabelledObjectValue {
	return LabelledObjectValue{
		PartyObject: v,
	}
}

// TokenObjectAsLabelledObjectValue is a convenience function that returns TokenObject wrapped in LabelledObjectValue
func TokenObjectAsLabelledObjectValue(v *TokenObject) LabelledObjectValue {
	return LabelledObjectValue{
		TokenObject: v,
	}
}

// ValueObjectAsLabelledObjectValue is a convenience function that returns ValueObject wrapped in LabelledObjectValue
func ValueObjectAsLabelledObjectValue(v *ValueObject) LabelledObjectValue {
	return LabelledObjectValue{
		ValueObject: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *LabelledObjectValue) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ActionObject
	err = newStrictDecoder(data).Decode(&dst.ActionObject)
	if err == nil {
		jsonActionObject, _ := json.Marshal(dst.ActionObject)
		if string(jsonActionObject) == "{}" { // empty struct
			dst.ActionObject = nil
		} else {
			match++
		}
	} else {
		dst.ActionObject = nil
	}

	// try to unmarshal data into ContractObject
	err = newStrictDecoder(data).Decode(&dst.ContractObject)
	if err == nil {
		jsonContractObject, _ := json.Marshal(dst.ContractObject)
		if string(jsonContractObject) == "{}" { // empty struct
			dst.ContractObject = nil
		} else {
			match++
		}
	} else {
		dst.ContractObject = nil
	}

	// try to unmarshal data into ObservationObject
	err = newStrictDecoder(data).Decode(&dst.ObservationObject)
	if err == nil {
		jsonObservationObject, _ := json.Marshal(dst.ObservationObject)
		if string(jsonObservationObject) == "{}" { // empty struct
			dst.ObservationObject = nil
		} else {
			match++
		}
	} else {
		dst.ObservationObject = nil
	}

	// try to unmarshal data into PartyObject
	err = newStrictDecoder(data).Decode(&dst.PartyObject)
	if err == nil {
		jsonPartyObject, _ := json.Marshal(dst.PartyObject)
		if string(jsonPartyObject) == "{}" { // empty struct
			dst.PartyObject = nil
		} else {
			match++
		}
	} else {
		dst.PartyObject = nil
	}

	// try to unmarshal data into TokenObject
	err = newStrictDecoder(data).Decode(&dst.TokenObject)
	if err == nil {
		jsonTokenObject, _ := json.Marshal(dst.TokenObject)
		if string(jsonTokenObject) == "{}" { // empty struct
			dst.TokenObject = nil
		} else {
			match++
		}
	} else {
		dst.TokenObject = nil
	}

	// try to unmarshal data into ValueObject
	err = newStrictDecoder(data).Decode(&dst.ValueObject)
	if err == nil {
		jsonValueObject, _ := json.Marshal(dst.ValueObject)
		if string(jsonValueObject) == "{}" { // empty struct
			dst.ValueObject = nil
		} else {
			match++
		}
	} else {
		dst.ValueObject = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ActionObject = nil
		dst.ContractObject = nil
		dst.ObservationObject = nil
		dst.PartyObject = nil
		dst.TokenObject = nil
		dst.ValueObject = nil

		return fmt.Errorf("data matches more than one schema in oneOf(LabelledObjectValue)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(LabelledObjectValue)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src LabelledObjectValue) MarshalJSON() ([]byte, error) {
	if src.ActionObject != nil {
		return json.Marshal(&src.ActionObject)
	}

	if src.ContractObject != nil {
		return json.Marshal(&src.ContractObject)
	}

	if src.ObservationObject != nil {
		return json.Marshal(&src.ObservationObject)
	}

	if src.PartyObject != nil {
		return json.Marshal(&src.PartyObject)
	}

	if src.TokenObject != nil {
		return json.Marshal(&src.TokenObject)
	}

	if src.ValueObject != nil {
		return json.Marshal(&src.ValueObject)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *LabelledObjectValue) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ActionObject != nil {
		return obj.ActionObject
	}

	if obj.ContractObject != nil {
		return obj.ContractObject
	}

	if obj.ObservationObject != nil {
		return obj.ObservationObject
	}

	if obj.PartyObject != nil {
		return obj.PartyObject
	}

	if obj.TokenObject != nil {
		return obj.TokenObject
	}

	if obj.ValueObject != nil {
		return obj.ValueObject
	}

	// all schemas are nil
	return nil
}

type NullableLabelledObjectValue struct {
	value *LabelledObjectValue
	isSet bool
}

func (v NullableLabelledObjectValue) Get() *LabelledObjectValue {
	return v.value
}

func (v *NullableLabelledObjectValue) Set(val *LabelledObjectValue) {
	v.value = val
	v.isSet = true
}

func (v NullableLabelledObjectValue) IsSet() bool {
	return v.isSet
}

func (v *NullableLabelledObjectValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLabelledObjectValue(val *LabelledObjectValue) *NullableLabelledObjectValue {
	return &NullableLabelledObjectValue{value: val, isSet: true}
}

func (v NullableLabelledObjectValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLabelledObjectValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


