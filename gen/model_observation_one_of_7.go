/*
Marlowe Runtime REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.5
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ObservationOneOf7 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObservationOneOf7{}

// ObservationOneOf7 struct for ObservationOneOf7
type ObservationOneOf7 struct {
	LeThan Value `json:"le_than"`
	Value Value `json:"value"`
}

// NewObservationOneOf7 instantiates a new ObservationOneOf7 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObservationOneOf7(leThan Value, value Value) *ObservationOneOf7 {
	this := ObservationOneOf7{}
	this.LeThan = leThan
	this.Value = value
	return &this
}

// NewObservationOneOf7WithDefaults instantiates a new ObservationOneOf7 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObservationOneOf7WithDefaults() *ObservationOneOf7 {
	this := ObservationOneOf7{}
	return &this
}

// GetLeThan returns the LeThan field value
func (o *ObservationOneOf7) GetLeThan() Value {
	if o == nil {
		var ret Value
		return ret
	}

	return o.LeThan
}

// GetLeThanOk returns a tuple with the LeThan field value
// and a boolean to check if the value has been set.
func (o *ObservationOneOf7) GetLeThanOk() (*Value, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LeThan, true
}

// SetLeThan sets field value
func (o *ObservationOneOf7) SetLeThan(v Value) {
	o.LeThan = v
}

// GetValue returns the Value field value
func (o *ObservationOneOf7) GetValue() Value {
	if o == nil {
		var ret Value
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *ObservationOneOf7) GetValueOk() (*Value, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *ObservationOneOf7) SetValue(v Value) {
	o.Value = v
}

func (o ObservationOneOf7) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObservationOneOf7) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["le_than"] = o.LeThan
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

type NullableObservationOneOf7 struct {
	value *ObservationOneOf7
	isSet bool
}

func (v NullableObservationOneOf7) Get() *ObservationOneOf7 {
	return v.value
}

func (v *NullableObservationOneOf7) Set(val *ObservationOneOf7) {
	v.value = val
	v.isSet = true
}

func (v NullableObservationOneOf7) IsSet() bool {
	return v.isSet
}

func (v *NullableObservationOneOf7) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObservationOneOf7(val *ObservationOneOf7) *NullableObservationOneOf7 {
	return &NullableObservationOneOf7{value: val, isSet: true}
}

func (v NullableObservationOneOf7) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObservationOneOf7) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


