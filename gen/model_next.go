/*
Marlowe Runtime REST API

REST API for Marlowe Runtime

API version: 0.0.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Next type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Next{}

// Next Describe the reducibility (Can be Reduced ?) and the applicability (Can Inputs be Applied ?) for a given contract.
type Next struct {
	ApplicableInputs ApplicableInputs `json:"applicable_inputs"`
	// Indicates if a given contract can be reduced (apply []) or not.
	CanReduce bool `json:"can_reduce"`
}

// NewNext instantiates a new Next object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNext(applicableInputs ApplicableInputs, canReduce bool) *Next {
	this := Next{}
	this.ApplicableInputs = applicableInputs
	this.CanReduce = canReduce
	return &this
}

// NewNextWithDefaults instantiates a new Next object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNextWithDefaults() *Next {
	this := Next{}
	return &this
}

// GetApplicableInputs returns the ApplicableInputs field value
func (o *Next) GetApplicableInputs() ApplicableInputs {
	if o == nil {
		var ret ApplicableInputs
		return ret
	}

	return o.ApplicableInputs
}

// GetApplicableInputsOk returns a tuple with the ApplicableInputs field value
// and a boolean to check if the value has been set.
func (o *Next) GetApplicableInputsOk() (*ApplicableInputs, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApplicableInputs, true
}

// SetApplicableInputs sets field value
func (o *Next) SetApplicableInputs(v ApplicableInputs) {
	o.ApplicableInputs = v
}

// GetCanReduce returns the CanReduce field value
func (o *Next) GetCanReduce() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.CanReduce
}

// GetCanReduceOk returns a tuple with the CanReduce field value
// and a boolean to check if the value has been set.
func (o *Next) GetCanReduceOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CanReduce, true
}

// SetCanReduce sets field value
func (o *Next) SetCanReduce(v bool) {
	o.CanReduce = v
}

func (o Next) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Next) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["applicable_inputs"] = o.ApplicableInputs
	toSerialize["can_reduce"] = o.CanReduce
	return toSerialize, nil
}

type NullableNext struct {
	value *Next
	isSet bool
}

func (v NullableNext) Get() *Next {
	return v.value
}

func (v *NullableNext) Set(val *Next) {
	v.value = val
	v.isSet = true
}

func (v NullableNext) IsSet() bool {
	return v.isSet
}

func (v *NullableNext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNext(val *Next) *NullableNext {
	return &NullableNext{value: val, isSet: true}
}

func (v NullableNext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


