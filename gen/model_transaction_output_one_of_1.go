/*
Marlowe Runtime REST API

REST API for Marlowe Runtime

API version: 0.0.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TransactionOutputOneOf1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionOutputOneOf1{}

// TransactionOutputOneOf1 Marlowe transaction error.
type TransactionOutputOneOf1 struct {
	TransactionError TransactionError `json:"transaction_error"`
}

// NewTransactionOutputOneOf1 instantiates a new TransactionOutputOneOf1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionOutputOneOf1(transactionError TransactionError) *TransactionOutputOneOf1 {
	this := TransactionOutputOneOf1{}
	this.TransactionError = transactionError
	return &this
}

// NewTransactionOutputOneOf1WithDefaults instantiates a new TransactionOutputOneOf1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionOutputOneOf1WithDefaults() *TransactionOutputOneOf1 {
	this := TransactionOutputOneOf1{}
	return &this
}

// GetTransactionError returns the TransactionError field value
func (o *TransactionOutputOneOf1) GetTransactionError() TransactionError {
	if o == nil {
		var ret TransactionError
		return ret
	}

	return o.TransactionError
}

// GetTransactionErrorOk returns a tuple with the TransactionError field value
// and a boolean to check if the value has been set.
func (o *TransactionOutputOneOf1) GetTransactionErrorOk() (*TransactionError, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionError, true
}

// SetTransactionError sets field value
func (o *TransactionOutputOneOf1) SetTransactionError(v TransactionError) {
	o.TransactionError = v
}

func (o TransactionOutputOneOf1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionOutputOneOf1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["transaction_error"] = o.TransactionError
	return toSerialize, nil
}

type NullableTransactionOutputOneOf1 struct {
	value *TransactionOutputOneOf1
	isSet bool
}

func (v NullableTransactionOutputOneOf1) Get() *TransactionOutputOneOf1 {
	return v.value
}

func (v *NullableTransactionOutputOneOf1) Set(val *TransactionOutputOneOf1) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionOutputOneOf1) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionOutputOneOf1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionOutputOneOf1(val *TransactionOutputOneOf1) *NullableTransactionOutputOneOf1 {
	return &NullableTransactionOutputOneOf1{value: val, isSet: true}
}

func (v NullableTransactionOutputOneOf1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionOutputOneOf1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


