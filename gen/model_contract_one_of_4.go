/*
Marlowe Runtime REST API

REST API for Marlowe Runtime

API version: 0.0.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ContractOneOf4 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContractOneOf4{}

// ContractOneOf4 Check an observation and produce a warning if it is false.
type ContractOneOf4 struct {
	Assert Observation `json:"assert"`
	Then Contract `json:"then"`
}

// NewContractOneOf4 instantiates a new ContractOneOf4 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContractOneOf4(assert Observation, then Contract) *ContractOneOf4 {
	this := ContractOneOf4{}
	this.Assert = assert
	this.Then = then
	return &this
}

// NewContractOneOf4WithDefaults instantiates a new ContractOneOf4 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContractOneOf4WithDefaults() *ContractOneOf4 {
	this := ContractOneOf4{}
	return &this
}

// GetAssert returns the Assert field value
func (o *ContractOneOf4) GetAssert() Observation {
	if o == nil {
		var ret Observation
		return ret
	}

	return o.Assert
}

// GetAssertOk returns a tuple with the Assert field value
// and a boolean to check if the value has been set.
func (o *ContractOneOf4) GetAssertOk() (*Observation, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Assert, true
}

// SetAssert sets field value
func (o *ContractOneOf4) SetAssert(v Observation) {
	o.Assert = v
}

// GetThen returns the Then field value
func (o *ContractOneOf4) GetThen() Contract {
	if o == nil {
		var ret Contract
		return ret
	}

	return o.Then
}

// GetThenOk returns a tuple with the Then field value
// and a boolean to check if the value has been set.
func (o *ContractOneOf4) GetThenOk() (*Contract, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Then, true
}

// SetThen sets field value
func (o *ContractOneOf4) SetThen(v Contract) {
	o.Then = v
}

func (o ContractOneOf4) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContractOneOf4) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["assert"] = o.Assert
	toSerialize["then"] = o.Then
	return toSerialize, nil
}

type NullableContractOneOf4 struct {
	value *ContractOneOf4
	isSet bool
}

func (v NullableContractOneOf4) Get() *ContractOneOf4 {
	return v.value
}

func (v *NullableContractOneOf4) Set(val *ContractOneOf4) {
	v.value = val
	v.isSet = true
}

func (v NullableContractOneOf4) IsSet() bool {
	return v.isSet
}

func (v *NullableContractOneOf4) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContractOneOf4(val *ContractOneOf4) *NullableContractOneOf4 {
	return &NullableContractOneOf4{value: val, isSet: true}
}

func (v NullableContractOneOf4) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContractOneOf4) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


