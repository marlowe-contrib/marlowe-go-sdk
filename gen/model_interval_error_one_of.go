/*
Marlowe Runtime REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.5
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the IntervalErrorOneOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IntervalErrorOneOf{}

// IntervalErrorOneOf Invalid Marlowe transaction interval.
type IntervalErrorOneOf struct {
	InvalidInterval IntervalErrorOneOfInvalidInterval `json:"invalidInterval"`
}

// NewIntervalErrorOneOf instantiates a new IntervalErrorOneOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntervalErrorOneOf(invalidInterval IntervalErrorOneOfInvalidInterval) *IntervalErrorOneOf {
	this := IntervalErrorOneOf{}
	this.InvalidInterval = invalidInterval
	return &this
}

// NewIntervalErrorOneOfWithDefaults instantiates a new IntervalErrorOneOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntervalErrorOneOfWithDefaults() *IntervalErrorOneOf {
	this := IntervalErrorOneOf{}
	return &this
}

// GetInvalidInterval returns the InvalidInterval field value
func (o *IntervalErrorOneOf) GetInvalidInterval() IntervalErrorOneOfInvalidInterval {
	if o == nil {
		var ret IntervalErrorOneOfInvalidInterval
		return ret
	}

	return o.InvalidInterval
}

// GetInvalidIntervalOk returns a tuple with the InvalidInterval field value
// and a boolean to check if the value has been set.
func (o *IntervalErrorOneOf) GetInvalidIntervalOk() (*IntervalErrorOneOfInvalidInterval, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InvalidInterval, true
}

// SetInvalidInterval sets field value
func (o *IntervalErrorOneOf) SetInvalidInterval(v IntervalErrorOneOfInvalidInterval) {
	o.InvalidInterval = v
}

func (o IntervalErrorOneOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IntervalErrorOneOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["invalidInterval"] = o.InvalidInterval
	return toSerialize, nil
}

type NullableIntervalErrorOneOf struct {
	value *IntervalErrorOneOf
	isSet bool
}

func (v NullableIntervalErrorOneOf) Get() *IntervalErrorOneOf {
	return v.value
}

func (v *NullableIntervalErrorOneOf) Set(val *IntervalErrorOneOf) {
	v.value = val
	v.isSet = true
}

func (v NullableIntervalErrorOneOf) IsSet() bool {
	return v.isSet
}

func (v *NullableIntervalErrorOneOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntervalErrorOneOf(val *IntervalErrorOneOf) *NullableIntervalErrorOneOf {
	return &NullableIntervalErrorOneOf{value: val, isSet: true}
}

func (v NullableIntervalErrorOneOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntervalErrorOneOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


