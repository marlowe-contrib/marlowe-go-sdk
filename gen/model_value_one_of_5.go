/*
Marlowe Runtime REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.5
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ValueOneOf5 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ValueOneOf5{}

// ValueOneOf5 struct for ValueOneOf5
type ValueOneOf5 struct {
	By Value `json:"by"`
	Divide Value `json:"divide"`
}

// NewValueOneOf5 instantiates a new ValueOneOf5 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValueOneOf5(by Value, divide Value) *ValueOneOf5 {
	this := ValueOneOf5{}
	this.By = by
	this.Divide = divide
	return &this
}

// NewValueOneOf5WithDefaults instantiates a new ValueOneOf5 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValueOneOf5WithDefaults() *ValueOneOf5 {
	this := ValueOneOf5{}
	return &this
}

// GetBy returns the By field value
func (o *ValueOneOf5) GetBy() Value {
	if o == nil {
		var ret Value
		return ret
	}

	return o.By
}

// GetByOk returns a tuple with the By field value
// and a boolean to check if the value has been set.
func (o *ValueOneOf5) GetByOk() (*Value, bool) {
	if o == nil {
		return nil, false
	}
	return &o.By, true
}

// SetBy sets field value
func (o *ValueOneOf5) SetBy(v Value) {
	o.By = v
}

// GetDivide returns the Divide field value
func (o *ValueOneOf5) GetDivide() Value {
	if o == nil {
		var ret Value
		return ret
	}

	return o.Divide
}

// GetDivideOk returns a tuple with the Divide field value
// and a boolean to check if the value has been set.
func (o *ValueOneOf5) GetDivideOk() (*Value, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Divide, true
}

// SetDivide sets field value
func (o *ValueOneOf5) SetDivide(v Value) {
	o.Divide = v
}

func (o ValueOneOf5) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ValueOneOf5) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["by"] = o.By
	toSerialize["divide"] = o.Divide
	return toSerialize, nil
}

type NullableValueOneOf5 struct {
	value *ValueOneOf5
	isSet bool
}

func (v NullableValueOneOf5) Get() *ValueOneOf5 {
	return v.value
}

func (v *NullableValueOneOf5) Set(val *ValueOneOf5) {
	v.value = val
	v.isSet = true
}

func (v NullableValueOneOf5) IsSet() bool {
	return v.isSet
}

func (v *NullableValueOneOf5) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValueOneOf5(val *ValueOneOf5) *NullableValueOneOf5 {
	return &NullableValueOneOf5{value: val, isSet: true}
}

func (v NullableValueOneOf5) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValueOneOf5) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


