/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// IntervalError - A Marlowe transaction interval error.
type IntervalError struct {
	IntervalErrorOneOf *IntervalErrorOneOf
	IntervalErrorOneOf1 *IntervalErrorOneOf1
}

// IntervalErrorOneOfAsIntervalError is a convenience function that returns IntervalErrorOneOf wrapped in IntervalError
func IntervalErrorOneOfAsIntervalError(v *IntervalErrorOneOf) IntervalError {
	return IntervalError{
		IntervalErrorOneOf: v,
	}
}

// IntervalErrorOneOf1AsIntervalError is a convenience function that returns IntervalErrorOneOf1 wrapped in IntervalError
func IntervalErrorOneOf1AsIntervalError(v *IntervalErrorOneOf1) IntervalError {
	return IntervalError{
		IntervalErrorOneOf1: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *IntervalError) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into IntervalErrorOneOf
	err = newStrictDecoder(data).Decode(&dst.IntervalErrorOneOf)
	if err == nil {
		jsonIntervalErrorOneOf, _ := json.Marshal(dst.IntervalErrorOneOf)
		if string(jsonIntervalErrorOneOf) == "{}" { // empty struct
			dst.IntervalErrorOneOf = nil
		} else {
			match++
		}
	} else {
		dst.IntervalErrorOneOf = nil
	}

	// try to unmarshal data into IntervalErrorOneOf1
	err = newStrictDecoder(data).Decode(&dst.IntervalErrorOneOf1)
	if err == nil {
		jsonIntervalErrorOneOf1, _ := json.Marshal(dst.IntervalErrorOneOf1)
		if string(jsonIntervalErrorOneOf1) == "{}" { // empty struct
			dst.IntervalErrorOneOf1 = nil
		} else {
			match++
		}
	} else {
		dst.IntervalErrorOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.IntervalErrorOneOf = nil
		dst.IntervalErrorOneOf1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(IntervalError)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(IntervalError)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src IntervalError) MarshalJSON() ([]byte, error) {
	if src.IntervalErrorOneOf != nil {
		return json.Marshal(&src.IntervalErrorOneOf)
	}

	if src.IntervalErrorOneOf1 != nil {
		return json.Marshal(&src.IntervalErrorOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *IntervalError) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.IntervalErrorOneOf != nil {
		return obj.IntervalErrorOneOf
	}

	if obj.IntervalErrorOneOf1 != nil {
		return obj.IntervalErrorOneOf1
	}

	// all schemas are nil
	return nil
}

type NullableIntervalError struct {
	value *IntervalError
	isSet bool
}

func (v NullableIntervalError) Get() *IntervalError {
	return v.value
}

func (v *NullableIntervalError) Set(val *IntervalError) {
	v.value = val
	v.isSet = true
}

func (v NullableIntervalError) IsSet() bool {
	return v.isSet
}

func (v *NullableIntervalError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntervalError(val *IntervalError) *NullableIntervalError {
	return &NullableIntervalError{value: val, isSet: true}
}

func (v NullableIntervalError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntervalError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


