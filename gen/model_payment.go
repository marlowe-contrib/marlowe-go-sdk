/*
Marlowe Runtime REST API

REST API for Marlowe Runtime

API version: 0.0.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Payment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Payment{}

// Payment A Marlowe payment.
type Payment struct {
	Amount int32 `json:"amount"`
	PaymentFrom Party `json:"payment_from"`
	To Payee `json:"to"`
	Token Token `json:"token"`
}

// NewPayment instantiates a new Payment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPayment(amount int32, paymentFrom Party, to Payee, token Token) *Payment {
	this := Payment{}
	this.Amount = amount
	this.PaymentFrom = paymentFrom
	this.To = to
	this.Token = token
	return &this
}

// NewPaymentWithDefaults instantiates a new Payment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentWithDefaults() *Payment {
	this := Payment{}
	return &this
}

// GetAmount returns the Amount field value
func (o *Payment) GetAmount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *Payment) GetAmountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *Payment) SetAmount(v int32) {
	o.Amount = v
}

// GetPaymentFrom returns the PaymentFrom field value
func (o *Payment) GetPaymentFrom() Party {
	if o == nil {
		var ret Party
		return ret
	}

	return o.PaymentFrom
}

// GetPaymentFromOk returns a tuple with the PaymentFrom field value
// and a boolean to check if the value has been set.
func (o *Payment) GetPaymentFromOk() (*Party, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PaymentFrom, true
}

// SetPaymentFrom sets field value
func (o *Payment) SetPaymentFrom(v Party) {
	o.PaymentFrom = v
}

// GetTo returns the To field value
func (o *Payment) GetTo() Payee {
	if o == nil {
		var ret Payee
		return ret
	}

	return o.To
}

// GetToOk returns a tuple with the To field value
// and a boolean to check if the value has been set.
func (o *Payment) GetToOk() (*Payee, bool) {
	if o == nil {
		return nil, false
	}
	return &o.To, true
}

// SetTo sets field value
func (o *Payment) SetTo(v Payee) {
	o.To = v
}

// GetToken returns the Token field value
func (o *Payment) GetToken() Token {
	if o == nil {
		var ret Token
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *Payment) GetTokenOk() (*Token, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *Payment) SetToken(v Token) {
	o.Token = v
}

func (o Payment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Payment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["amount"] = o.Amount
	toSerialize["payment_from"] = o.PaymentFrom
	toSerialize["to"] = o.To
	toSerialize["token"] = o.Token
	return toSerialize, nil
}

type NullablePayment struct {
	value *Payment
	isSet bool
}

func (v NullablePayment) Get() *Payment {
	return v.value
}

func (v *NullablePayment) Set(val *Payment) {
	v.value = val
	v.isSet = true
}

func (v NullablePayment) IsSet() bool {
	return v.isSet
}

func (v *NullablePayment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePayment(val *Payment) *NullablePayment {
	return &NullablePayment{value: val, isSet: true}
}

func (v NullablePayment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePayment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


