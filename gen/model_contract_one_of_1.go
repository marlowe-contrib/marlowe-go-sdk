/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ContractOneOf1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContractOneOf1{}

// ContractOneOf1 If an observation is true, the first contract applies, otherwise the second contract applies.
type ContractOneOf1 struct {
	Else Contract `json:"else"`
	If Observation `json:"if"`
	Then Contract `json:"then"`
}

// NewContractOneOf1 instantiates a new ContractOneOf1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContractOneOf1(else_ Contract, if_ Observation, then Contract) *ContractOneOf1 {
	this := ContractOneOf1{}
	this.Else = else_
	this.If = if_
	this.Then = then
	return &this
}

// NewContractOneOf1WithDefaults instantiates a new ContractOneOf1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContractOneOf1WithDefaults() *ContractOneOf1 {
	this := ContractOneOf1{}
	return &this
}

// GetElse returns the Else field value
func (o *ContractOneOf1) GetElse() Contract {
	if o == nil {
		var ret Contract
		return ret
	}

	return o.Else
}

// GetElseOk returns a tuple with the Else field value
// and a boolean to check if the value has been set.
func (o *ContractOneOf1) GetElseOk() (*Contract, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Else, true
}

// SetElse sets field value
func (o *ContractOneOf1) SetElse(v Contract) {
	o.Else = v
}

// GetIf returns the If field value
func (o *ContractOneOf1) GetIf() Observation {
	if o == nil {
		var ret Observation
		return ret
	}

	return o.If
}

// GetIfOk returns a tuple with the If field value
// and a boolean to check if the value has been set.
func (o *ContractOneOf1) GetIfOk() (*Observation, bool) {
	if o == nil {
		return nil, false
	}
	return &o.If, true
}

// SetIf sets field value
func (o *ContractOneOf1) SetIf(v Observation) {
	o.If = v
}

// GetThen returns the Then field value
func (o *ContractOneOf1) GetThen() Contract {
	if o == nil {
		var ret Contract
		return ret
	}

	return o.Then
}

// GetThenOk returns a tuple with the Then field value
// and a boolean to check if the value has been set.
func (o *ContractOneOf1) GetThenOk() (*Contract, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Then, true
}

// SetThen sets field value
func (o *ContractOneOf1) SetThen(v Contract) {
	o.Then = v
}

func (o ContractOneOf1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContractOneOf1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["else"] = o.Else
	toSerialize["if"] = o.If
	toSerialize["then"] = o.Then
	return toSerialize, nil
}

type NullableContractOneOf1 struct {
	value *ContractOneOf1
	isSet bool
}

func (v NullableContractOneOf1) Get() *ContractOneOf1 {
	return v.value
}

func (v *NullableContractOneOf1) Set(val *ContractOneOf1) {
	v.value = val
	v.isSet = true
}

func (v NullableContractOneOf1) IsSet() bool {
	return v.isSet
}

func (v *NullableContractOneOf1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContractOneOf1(val *ContractOneOf1) *NullableContractOneOf1 {
	return &NullableContractOneOf1{value: val, isSet: true}
}

func (v NullableContractOneOf1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContractOneOf1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


