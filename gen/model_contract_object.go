/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ContractObject - Contract terms specified in Marlowe
type ContractObject struct {
	ContractObjectOneOf *ContractObjectOneOf
	ContractObjectOneOf1 *ContractObjectOneOf1
	ContractObjectOneOf2 *ContractObjectOneOf2
	ContractObjectOneOf3 *ContractObjectOneOf3
	ContractObjectOneOf4 *ContractObjectOneOf4
	ValueObjectOneOf8 *ValueObjectOneOf8
	String *string
}

// ContractObjectOneOfAsContractObject is a convenience function that returns ContractObjectOneOf wrapped in ContractObject
func ContractObjectOneOfAsContractObject(v *ContractObjectOneOf) ContractObject {
	return ContractObject{
		ContractObjectOneOf: v,
	}
}

// ContractObjectOneOf1AsContractObject is a convenience function that returns ContractObjectOneOf1 wrapped in ContractObject
func ContractObjectOneOf1AsContractObject(v *ContractObjectOneOf1) ContractObject {
	return ContractObject{
		ContractObjectOneOf1: v,
	}
}

// ContractObjectOneOf2AsContractObject is a convenience function that returns ContractObjectOneOf2 wrapped in ContractObject
func ContractObjectOneOf2AsContractObject(v *ContractObjectOneOf2) ContractObject {
	return ContractObject{
		ContractObjectOneOf2: v,
	}
}

// ContractObjectOneOf3AsContractObject is a convenience function that returns ContractObjectOneOf3 wrapped in ContractObject
func ContractObjectOneOf3AsContractObject(v *ContractObjectOneOf3) ContractObject {
	return ContractObject{
		ContractObjectOneOf3: v,
	}
}

// ContractObjectOneOf4AsContractObject is a convenience function that returns ContractObjectOneOf4 wrapped in ContractObject
func ContractObjectOneOf4AsContractObject(v *ContractObjectOneOf4) ContractObject {
	return ContractObject{
		ContractObjectOneOf4: v,
	}
}

// ValueObjectOneOf8AsContractObject is a convenience function that returns ValueObjectOneOf8 wrapped in ContractObject
func ValueObjectOneOf8AsContractObject(v *ValueObjectOneOf8) ContractObject {
	return ContractObject{
		ValueObjectOneOf8: v,
	}
}

// stringAsContractObject is a convenience function that returns string wrapped in ContractObject
func StringAsContractObject(v *string) ContractObject {
	return ContractObject{
		String: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ContractObject) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ContractObjectOneOf
	err = newStrictDecoder(data).Decode(&dst.ContractObjectOneOf)
	if err == nil {
		jsonContractObjectOneOf, _ := json.Marshal(dst.ContractObjectOneOf)
		if string(jsonContractObjectOneOf) == "{}" { // empty struct
			dst.ContractObjectOneOf = nil
		} else {
			match++
		}
	} else {
		dst.ContractObjectOneOf = nil
	}

	// try to unmarshal data into ContractObjectOneOf1
	err = newStrictDecoder(data).Decode(&dst.ContractObjectOneOf1)
	if err == nil {
		jsonContractObjectOneOf1, _ := json.Marshal(dst.ContractObjectOneOf1)
		if string(jsonContractObjectOneOf1) == "{}" { // empty struct
			dst.ContractObjectOneOf1 = nil
		} else {
			match++
		}
	} else {
		dst.ContractObjectOneOf1 = nil
	}

	// try to unmarshal data into ContractObjectOneOf2
	err = newStrictDecoder(data).Decode(&dst.ContractObjectOneOf2)
	if err == nil {
		jsonContractObjectOneOf2, _ := json.Marshal(dst.ContractObjectOneOf2)
		if string(jsonContractObjectOneOf2) == "{}" { // empty struct
			dst.ContractObjectOneOf2 = nil
		} else {
			match++
		}
	} else {
		dst.ContractObjectOneOf2 = nil
	}

	// try to unmarshal data into ContractObjectOneOf3
	err = newStrictDecoder(data).Decode(&dst.ContractObjectOneOf3)
	if err == nil {
		jsonContractObjectOneOf3, _ := json.Marshal(dst.ContractObjectOneOf3)
		if string(jsonContractObjectOneOf3) == "{}" { // empty struct
			dst.ContractObjectOneOf3 = nil
		} else {
			match++
		}
	} else {
		dst.ContractObjectOneOf3 = nil
	}

	// try to unmarshal data into ContractObjectOneOf4
	err = newStrictDecoder(data).Decode(&dst.ContractObjectOneOf4)
	if err == nil {
		jsonContractObjectOneOf4, _ := json.Marshal(dst.ContractObjectOneOf4)
		if string(jsonContractObjectOneOf4) == "{}" { // empty struct
			dst.ContractObjectOneOf4 = nil
		} else {
			match++
		}
	} else {
		dst.ContractObjectOneOf4 = nil
	}

	// try to unmarshal data into ValueObjectOneOf8
	err = newStrictDecoder(data).Decode(&dst.ValueObjectOneOf8)
	if err == nil {
		jsonValueObjectOneOf8, _ := json.Marshal(dst.ValueObjectOneOf8)
		if string(jsonValueObjectOneOf8) == "{}" { // empty struct
			dst.ValueObjectOneOf8 = nil
		} else {
			match++
		}
	} else {
		dst.ValueObjectOneOf8 = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ContractObjectOneOf = nil
		dst.ContractObjectOneOf1 = nil
		dst.ContractObjectOneOf2 = nil
		dst.ContractObjectOneOf3 = nil
		dst.ContractObjectOneOf4 = nil
		dst.ValueObjectOneOf8 = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ContractObject)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ContractObject)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ContractObject) MarshalJSON() ([]byte, error) {
	if src.ContractObjectOneOf != nil {
		return json.Marshal(&src.ContractObjectOneOf)
	}

	if src.ContractObjectOneOf1 != nil {
		return json.Marshal(&src.ContractObjectOneOf1)
	}

	if src.ContractObjectOneOf2 != nil {
		return json.Marshal(&src.ContractObjectOneOf2)
	}

	if src.ContractObjectOneOf3 != nil {
		return json.Marshal(&src.ContractObjectOneOf3)
	}

	if src.ContractObjectOneOf4 != nil {
		return json.Marshal(&src.ContractObjectOneOf4)
	}

	if src.ValueObjectOneOf8 != nil {
		return json.Marshal(&src.ValueObjectOneOf8)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ContractObject) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ContractObjectOneOf != nil {
		return obj.ContractObjectOneOf
	}

	if obj.ContractObjectOneOf1 != nil {
		return obj.ContractObjectOneOf1
	}

	if obj.ContractObjectOneOf2 != nil {
		return obj.ContractObjectOneOf2
	}

	if obj.ContractObjectOneOf3 != nil {
		return obj.ContractObjectOneOf3
	}

	if obj.ContractObjectOneOf4 != nil {
		return obj.ContractObjectOneOf4
	}

	if obj.ValueObjectOneOf8 != nil {
		return obj.ValueObjectOneOf8
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableContractObject struct {
	value *ContractObject
	isSet bool
}

func (v NullableContractObject) Get() *ContractObject {
	return v.value
}

func (v *NullableContractObject) Set(val *ContractObject) {
	v.value = val
	v.isSet = true
}

func (v NullableContractObject) IsSet() bool {
	return v.isSet
}

func (v *NullableContractObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContractObject(val *ContractObject) *NullableContractObject {
	return &NullableContractObject{value: val, isSet: true}
}

func (v NullableContractObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContractObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


