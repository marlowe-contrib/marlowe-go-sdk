/*
Marlowe Runtime REST API

REST API for Marlowe Runtime

API version: 0.0.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// PayoutStatus The status of a payout. Either it is available to be withdrawn, or it has already been withdrawn.
type PayoutStatus string

// List of PayoutStatus
const (
	AVAILABLE PayoutStatus = "available"
	WITHDRAWN PayoutStatus = "withdrawn"
)

// All allowed values of PayoutStatus enum
var AllowedPayoutStatusEnumValues = []PayoutStatus{
	"available",
	"withdrawn",
}

func (v *PayoutStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PayoutStatus(value)
	for _, existing := range AllowedPayoutStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PayoutStatus", value)
}

// NewPayoutStatusFromValue returns a pointer to a valid PayoutStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPayoutStatusFromValue(v string) (*PayoutStatus, error) {
	ev := PayoutStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PayoutStatus: valid values are %v", v, AllowedPayoutStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PayoutStatus) IsValid() bool {
	for _, existing := range AllowedPayoutStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PayoutStatus value
func (v PayoutStatus) Ptr() *PayoutStatus {
	return &v
}

type NullablePayoutStatus struct {
	value *PayoutStatus
	isSet bool
}

func (v NullablePayoutStatus) Get() *PayoutStatus {
	return v.value
}

func (v *NullablePayoutStatus) Set(val *PayoutStatus) {
	v.value = val
	v.isSet = true
}

func (v NullablePayoutStatus) IsSet() bool {
	return v.isSet
}

func (v *NullablePayoutStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePayoutStatus(val *PayoutStatus) *NullablePayoutStatus {
	return &NullablePayoutStatus{value: val, isSet: true}
}

func (v NullablePayoutStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePayoutStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

