/*
Marlowe Runtime REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.5
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TransactionErrorOneOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionErrorOneOf{}

// TransactionErrorOneOf An invalid time interval.
type TransactionErrorOneOf struct {
	Context IntervalError `json:"context"`
	Error string `json:"error"`
}

// NewTransactionErrorOneOf instantiates a new TransactionErrorOneOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionErrorOneOf(context IntervalError, error_ string) *TransactionErrorOneOf {
	this := TransactionErrorOneOf{}
	this.Context = context
	this.Error = error_
	return &this
}

// NewTransactionErrorOneOfWithDefaults instantiates a new TransactionErrorOneOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionErrorOneOfWithDefaults() *TransactionErrorOneOf {
	this := TransactionErrorOneOf{}
	return &this
}

// GetContext returns the Context field value
func (o *TransactionErrorOneOf) GetContext() IntervalError {
	if o == nil {
		var ret IntervalError
		return ret
	}

	return o.Context
}

// GetContextOk returns a tuple with the Context field value
// and a boolean to check if the value has been set.
func (o *TransactionErrorOneOf) GetContextOk() (*IntervalError, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Context, true
}

// SetContext sets field value
func (o *TransactionErrorOneOf) SetContext(v IntervalError) {
	o.Context = v
}

// GetError returns the Error field value
func (o *TransactionErrorOneOf) GetError() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Error
}

// GetErrorOk returns a tuple with the Error field value
// and a boolean to check if the value has been set.
func (o *TransactionErrorOneOf) GetErrorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Error, true
}

// SetError sets field value
func (o *TransactionErrorOneOf) SetError(v string) {
	o.Error = v
}

func (o TransactionErrorOneOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionErrorOneOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["context"] = o.Context
	toSerialize["error"] = o.Error
	return toSerialize, nil
}

type NullableTransactionErrorOneOf struct {
	value *TransactionErrorOneOf
	isSet bool
}

func (v NullableTransactionErrorOneOf) Get() *TransactionErrorOneOf {
	return v.value
}

func (v *NullableTransactionErrorOneOf) Set(val *TransactionErrorOneOf) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionErrorOneOf) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionErrorOneOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionErrorOneOf(val *TransactionErrorOneOf) *NullableTransactionErrorOneOf {
	return &NullableTransactionErrorOneOf{value: val, isSet: true}
}

func (v NullableTransactionErrorOneOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionErrorOneOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


