/*
Marlowe Runtime REST API

REST API for Marlowe Runtime

API version: 0.0.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marloweruntime

import (
	"encoding/json"
)

// checks if the Equal type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Equal{}

// Equal struct for Equal
type Equal struct {
	EqualTo Value `json:"equal_to"`
	Value Value `json:"value"`
}

// NewEqual instantiates a new Equal object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEqual(equalTo Value, value Value) *Equal {
	this := Equal{}
	this.EqualTo = equalTo
	this.Value = value
	return &this
}

// NewEqualWithDefaults instantiates a new Equal object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEqualWithDefaults() *Equal {
	this := Equal{}
	return &this
}

// GetEqualTo returns the EqualTo field value
func (o *Equal) GetEqualTo() Value {
	if o == nil {
		var ret Value
		return ret
	}

	return o.EqualTo
}

// GetEqualToOk returns a tuple with the EqualTo field value
// and a boolean to check if the value has been set.
func (o *Equal) GetEqualToOk() (*Value, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EqualTo, true
}

// SetEqualTo sets field value
func (o *Equal) SetEqualTo(v Value) {
	o.EqualTo = v
}

// GetValue returns the Value field value
func (o *Equal) GetValue() Value {
	if o == nil {
		var ret Value
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *Equal) GetValueOk() (*Value, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *Equal) SetValue(v Value) {
	o.Value = v
}

func (o Equal) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Equal) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["equal_to"] = o.EqualTo
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

type NullableEqual struct {
	value *Equal
	isSet bool
}

func (v NullableEqual) Get() *Equal {
	return v.value
}

func (v *NullableEqual) Set(val *Equal) {
	v.value = val
	v.isSet = true
}

func (v NullableEqual) IsSet() bool {
	return v.isSet
}

func (v *NullableEqual) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEqual(val *Equal) *NullableEqual {
	return &NullableEqual{value: val, isSet: true}
}

func (v NullableEqual) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEqual) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


