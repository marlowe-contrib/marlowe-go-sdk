/*
Marlowe Runtime REST API

REST API for Marlowe Runtime

API version: 0.0.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marloweruntime

import (
	"encoding/json"
)

// checks if the AndObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AndObject{}

// AndObject struct for AndObject
type AndObject struct {
	And ObservationObject `json:"and"`
	Both ObservationObject `json:"both"`
}

// NewAndObject instantiates a new AndObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAndObject(and ObservationObject, both ObservationObject) *AndObject {
	this := AndObject{}
	this.And = and
	this.Both = both
	return &this
}

// NewAndObjectWithDefaults instantiates a new AndObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAndObjectWithDefaults() *AndObject {
	this := AndObject{}
	return &this
}

// GetAnd returns the And field value
func (o *AndObject) GetAnd() ObservationObject {
	if o == nil {
		var ret ObservationObject
		return ret
	}

	return o.And
}

// GetAndOk returns a tuple with the And field value
// and a boolean to check if the value has been set.
func (o *AndObject) GetAndOk() (*ObservationObject, bool) {
	if o == nil {
		return nil, false
	}
	return &o.And, true
}

// SetAnd sets field value
func (o *AndObject) SetAnd(v ObservationObject) {
	o.And = v
}

// GetBoth returns the Both field value
func (o *AndObject) GetBoth() ObservationObject {
	if o == nil {
		var ret ObservationObject
		return ret
	}

	return o.Both
}

// GetBothOk returns a tuple with the Both field value
// and a boolean to check if the value has been set.
func (o *AndObject) GetBothOk() (*ObservationObject, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Both, true
}

// SetBoth sets field value
func (o *AndObject) SetBoth(v ObservationObject) {
	o.Both = v
}

func (o AndObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AndObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["and"] = o.And
	toSerialize["both"] = o.Both
	return toSerialize, nil
}

type NullableAndObject struct {
	value *AndObject
	isSet bool
}

func (v NullableAndObject) Get() *AndObject {
	return v.value
}

func (v *NullableAndObject) Set(val *AndObject) {
	v.value = val
	v.isSet = true
}

func (v NullableAndObject) IsSet() bool {
	return v.isSet
}

func (v *NullableAndObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAndObject(val *AndObject) *NullableAndObject {
	return &NullableAndObject{value: val, isSet: true}
}

func (v NullableAndObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAndObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


