/*
Marlowe Runtime REST API

REST API for Marlowe Runtime

API version: 0.0.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marloweruntime

import (
	"encoding/json"
)

// checks if the LesserOrEqualObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LesserOrEqualObject{}

// LesserOrEqualObject struct for LesserOrEqualObject
type LesserOrEqualObject struct {
	LeThan ValueObject `json:"le_than"`
	Value ValueObject `json:"value"`
}

// NewLesserOrEqualObject instantiates a new LesserOrEqualObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLesserOrEqualObject(leThan ValueObject, value ValueObject) *LesserOrEqualObject {
	this := LesserOrEqualObject{}
	this.LeThan = leThan
	this.Value = value
	return &this
}

// NewLesserOrEqualObjectWithDefaults instantiates a new LesserOrEqualObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLesserOrEqualObjectWithDefaults() *LesserOrEqualObject {
	this := LesserOrEqualObject{}
	return &this
}

// GetLeThan returns the LeThan field value
func (o *LesserOrEqualObject) GetLeThan() ValueObject {
	if o == nil {
		var ret ValueObject
		return ret
	}

	return o.LeThan
}

// GetLeThanOk returns a tuple with the LeThan field value
// and a boolean to check if the value has been set.
func (o *LesserOrEqualObject) GetLeThanOk() (*ValueObject, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LeThan, true
}

// SetLeThan sets field value
func (o *LesserOrEqualObject) SetLeThan(v ValueObject) {
	o.LeThan = v
}

// GetValue returns the Value field value
func (o *LesserOrEqualObject) GetValue() ValueObject {
	if o == nil {
		var ret ValueObject
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *LesserOrEqualObject) GetValueOk() (*ValueObject, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *LesserOrEqualObject) SetValue(v ValueObject) {
	o.Value = v
}

func (o LesserOrEqualObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LesserOrEqualObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["le_than"] = o.LeThan
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

type NullableLesserOrEqualObject struct {
	value *LesserOrEqualObject
	isSet bool
}

func (v NullableLesserOrEqualObject) Get() *LesserOrEqualObject {
	return v.value
}

func (v *NullableLesserOrEqualObject) Set(val *LesserOrEqualObject) {
	v.value = val
	v.isSet = true
}

func (v NullableLesserOrEqualObject) IsSet() bool {
	return v.isSet
}

func (v *NullableLesserOrEqualObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLesserOrEqualObject(val *LesserOrEqualObject) *NullableLesserOrEqualObject {
	return &NullableLesserOrEqualObject{value: val, isSet: true}
}

func (v NullableLesserOrEqualObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLesserOrEqualObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


