/*
Marlowe Runtime REST API

REST API for Marlowe Runtime

API version: 0.0.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marloweruntime

import (
	"encoding/json"
)

// checks if the GreaterObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GreaterObject{}

// GreaterObject struct for GreaterObject
type GreaterObject struct {
	Gt ValueObject `json:"gt"`
	Value ValueObject `json:"value"`
}

// NewGreaterObject instantiates a new GreaterObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGreaterObject(gt ValueObject, value ValueObject) *GreaterObject {
	this := GreaterObject{}
	this.Gt = gt
	this.Value = value
	return &this
}

// NewGreaterObjectWithDefaults instantiates a new GreaterObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGreaterObjectWithDefaults() *GreaterObject {
	this := GreaterObject{}
	return &this
}

// GetGt returns the Gt field value
func (o *GreaterObject) GetGt() ValueObject {
	if o == nil {
		var ret ValueObject
		return ret
	}

	return o.Gt
}

// GetGtOk returns a tuple with the Gt field value
// and a boolean to check if the value has been set.
func (o *GreaterObject) GetGtOk() (*ValueObject, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Gt, true
}

// SetGt sets field value
func (o *GreaterObject) SetGt(v ValueObject) {
	o.Gt = v
}

// GetValue returns the Value field value
func (o *GreaterObject) GetValue() ValueObject {
	if o == nil {
		var ret ValueObject
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *GreaterObject) GetValueOk() (*ValueObject, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *GreaterObject) SetValue(v ValueObject) {
	o.Value = v
}

func (o GreaterObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GreaterObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["gt"] = o.Gt
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

type NullableGreaterObject struct {
	value *GreaterObject
	isSet bool
}

func (v NullableGreaterObject) Get() *GreaterObject {
	return v.value
}

func (v *NullableGreaterObject) Set(val *GreaterObject) {
	v.value = val
	v.isSet = true
}

func (v NullableGreaterObject) IsSet() bool {
	return v.isSet
}

func (v *NullableGreaterObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGreaterObject(val *GreaterObject) *NullableGreaterObject {
	return &NullableGreaterObject{value: val, isSet: true}
}

func (v NullableGreaterObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGreaterObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


