/*
Marlowe Runtime REST API

REST API for Marlowe Runtime

API version: 0.0.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marloweruntime

import (
	"encoding/json"
)

// checks if the AddObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddObject{}

// AddObject struct for AddObject
type AddObject struct {
	Add ValueObject `json:"add"`
	And ValueObject `json:"and"`
}

// NewAddObject instantiates a new AddObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddObject(add ValueObject, and ValueObject) *AddObject {
	this := AddObject{}
	this.Add = add
	this.And = and
	return &this
}

// NewAddObjectWithDefaults instantiates a new AddObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddObjectWithDefaults() *AddObject {
	this := AddObject{}
	return &this
}

// GetAdd returns the Add field value
func (o *AddObject) GetAdd() ValueObject {
	if o == nil {
		var ret ValueObject
		return ret
	}

	return o.Add
}

// GetAddOk returns a tuple with the Add field value
// and a boolean to check if the value has been set.
func (o *AddObject) GetAddOk() (*ValueObject, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Add, true
}

// SetAdd sets field value
func (o *AddObject) SetAdd(v ValueObject) {
	o.Add = v
}

// GetAnd returns the And field value
func (o *AddObject) GetAnd() ValueObject {
	if o == nil {
		var ret ValueObject
		return ret
	}

	return o.And
}

// GetAndOk returns a tuple with the And field value
// and a boolean to check if the value has been set.
func (o *AddObject) GetAndOk() (*ValueObject, bool) {
	if o == nil {
		return nil, false
	}
	return &o.And, true
}

// SetAnd sets field value
func (o *AddObject) SetAnd(v ValueObject) {
	o.And = v
}

func (o AddObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["add"] = o.Add
	toSerialize["and"] = o.And
	return toSerialize, nil
}

type NullableAddObject struct {
	value *AddObject
	isSet bool
}

func (v NullableAddObject) Get() *AddObject {
	return v.value
}

func (v *NullableAddObject) Set(val *AddObject) {
	v.value = val
	v.isSet = true
}

func (v NullableAddObject) IsSet() bool {
	return v.isSet
}

func (v *NullableAddObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddObject(val *AddObject) *NullableAddObject {
	return &NullableAddObject{value: val, isSet: true}
}

func (v NullableAddObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


