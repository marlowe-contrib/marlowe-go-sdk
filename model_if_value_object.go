/*
Marlowe Runtime REST API

REST API for Marlowe Runtime

API version: 0.0.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marloweruntime

import (
	"encoding/json"
)

// checks if the IfValueObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IfValueObject{}

// IfValueObject struct for IfValueObject
type IfValueObject struct {
	Else ValueObject `json:"else"`
	If ObservationObject `json:"if"`
	Then ValueObject `json:"then"`
}

// NewIfValueObject instantiates a new IfValueObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIfValueObject(else_ ValueObject, if_ ObservationObject, then ValueObject) *IfValueObject {
	this := IfValueObject{}
	this.Else = else_
	this.If = if_
	this.Then = then
	return &this
}

// NewIfValueObjectWithDefaults instantiates a new IfValueObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIfValueObjectWithDefaults() *IfValueObject {
	this := IfValueObject{}
	return &this
}

// GetElse returns the Else field value
func (o *IfValueObject) GetElse() ValueObject {
	if o == nil {
		var ret ValueObject
		return ret
	}

	return o.Else
}

// GetElseOk returns a tuple with the Else field value
// and a boolean to check if the value has been set.
func (o *IfValueObject) GetElseOk() (*ValueObject, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Else, true
}

// SetElse sets field value
func (o *IfValueObject) SetElse(v ValueObject) {
	o.Else = v
}

// GetIf returns the If field value
func (o *IfValueObject) GetIf() ObservationObject {
	if o == nil {
		var ret ObservationObject
		return ret
	}

	return o.If
}

// GetIfOk returns a tuple with the If field value
// and a boolean to check if the value has been set.
func (o *IfValueObject) GetIfOk() (*ObservationObject, bool) {
	if o == nil {
		return nil, false
	}
	return &o.If, true
}

// SetIf sets field value
func (o *IfValueObject) SetIf(v ObservationObject) {
	o.If = v
}

// GetThen returns the Then field value
func (o *IfValueObject) GetThen() ValueObject {
	if o == nil {
		var ret ValueObject
		return ret
	}

	return o.Then
}

// GetThenOk returns a tuple with the Then field value
// and a boolean to check if the value has been set.
func (o *IfValueObject) GetThenOk() (*ValueObject, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Then, true
}

// SetThen sets field value
func (o *IfValueObject) SetThen(v ValueObject) {
	o.Then = v
}

func (o IfValueObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IfValueObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["else"] = o.Else
	toSerialize["if"] = o.If
	toSerialize["then"] = o.Then
	return toSerialize, nil
}

type NullableIfValueObject struct {
	value *IfValueObject
	isSet bool
}

func (v NullableIfValueObject) Get() *IfValueObject {
	return v.value
}

func (v *NullableIfValueObject) Set(val *IfValueObject) {
	v.value = val
	v.isSet = true
}

func (v NullableIfValueObject) IsSet() bool {
	return v.isSet
}

func (v *NullableIfValueObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIfValueObject(val *IfValueObject) *NullableIfValueObject {
	return &NullableIfValueObject{value: val, isSet: true}
}

func (v NullableIfValueObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIfValueObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


