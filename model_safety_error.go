/*
Marlowe Runtime REST API

REST API for Marlowe Runtime

API version: 0.0.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marloweruntime

import (
	"encoding/json"
)

// checks if the SafetyError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SafetyError{}

// SafetyError Information about the safety of a Marlowe contract and its state.
type SafetyError struct {
	AccountId *Party `json:"account-id,omitempty"`
	Address *PlutusAddress `json:"address,omitempty"`
	Bytes *int32 `json:"bytes,omitempty"`
	ChoiceId *ChoiceId `json:"choice-id,omitempty"`
	Cost *ExBudget `json:"cost,omitempty"`
	CurrencySymbol *string `json:"currency-symbol,omitempty"`
	Detail string `json:"detail"`
	Error string `json:"error"`
	Fatal bool `json:"fatal"`
	Hash *string `json:"hash,omitempty"`
	Message *string `json:"message,omitempty"`
	RoleName *string `json:"role-name,omitempty"`
	Token *Token `json:"token,omitempty"`
	TokenName *string `json:"token-name,omitempty"`
	Transaction *Transaction `json:"transaction,omitempty"`
	ValueId *string `json:"value-id,omitempty"`
	Warning *TransactionWarning `json:"warning,omitempty"`
}

// NewSafetyError instantiates a new SafetyError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSafetyError(detail string, error_ string, fatal bool) *SafetyError {
	this := SafetyError{}
	this.Detail = detail
	this.Error = error_
	this.Fatal = fatal
	return &this
}

// NewSafetyErrorWithDefaults instantiates a new SafetyError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSafetyErrorWithDefaults() *SafetyError {
	this := SafetyError{}
	return &this
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *SafetyError) GetAccountId() Party {
	if o == nil || IsNil(o.AccountId) {
		var ret Party
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SafetyError) GetAccountIdOk() (*Party, bool) {
	if o == nil || IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *SafetyError) HasAccountId() bool {
	if o != nil && !IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given Party and assigns it to the AccountId field.
func (o *SafetyError) SetAccountId(v Party) {
	o.AccountId = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *SafetyError) GetAddress() PlutusAddress {
	if o == nil || IsNil(o.Address) {
		var ret PlutusAddress
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SafetyError) GetAddressOk() (*PlutusAddress, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *SafetyError) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given PlutusAddress and assigns it to the Address field.
func (o *SafetyError) SetAddress(v PlutusAddress) {
	o.Address = &v
}

// GetBytes returns the Bytes field value if set, zero value otherwise.
func (o *SafetyError) GetBytes() int32 {
	if o == nil || IsNil(o.Bytes) {
		var ret int32
		return ret
	}
	return *o.Bytes
}

// GetBytesOk returns a tuple with the Bytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SafetyError) GetBytesOk() (*int32, bool) {
	if o == nil || IsNil(o.Bytes) {
		return nil, false
	}
	return o.Bytes, true
}

// HasBytes returns a boolean if a field has been set.
func (o *SafetyError) HasBytes() bool {
	if o != nil && !IsNil(o.Bytes) {
		return true
	}

	return false
}

// SetBytes gets a reference to the given int32 and assigns it to the Bytes field.
func (o *SafetyError) SetBytes(v int32) {
	o.Bytes = &v
}

// GetChoiceId returns the ChoiceId field value if set, zero value otherwise.
func (o *SafetyError) GetChoiceId() ChoiceId {
	if o == nil || IsNil(o.ChoiceId) {
		var ret ChoiceId
		return ret
	}
	return *o.ChoiceId
}

// GetChoiceIdOk returns a tuple with the ChoiceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SafetyError) GetChoiceIdOk() (*ChoiceId, bool) {
	if o == nil || IsNil(o.ChoiceId) {
		return nil, false
	}
	return o.ChoiceId, true
}

// HasChoiceId returns a boolean if a field has been set.
func (o *SafetyError) HasChoiceId() bool {
	if o != nil && !IsNil(o.ChoiceId) {
		return true
	}

	return false
}

// SetChoiceId gets a reference to the given ChoiceId and assigns it to the ChoiceId field.
func (o *SafetyError) SetChoiceId(v ChoiceId) {
	o.ChoiceId = &v
}

// GetCost returns the Cost field value if set, zero value otherwise.
func (o *SafetyError) GetCost() ExBudget {
	if o == nil || IsNil(o.Cost) {
		var ret ExBudget
		return ret
	}
	return *o.Cost
}

// GetCostOk returns a tuple with the Cost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SafetyError) GetCostOk() (*ExBudget, bool) {
	if o == nil || IsNil(o.Cost) {
		return nil, false
	}
	return o.Cost, true
}

// HasCost returns a boolean if a field has been set.
func (o *SafetyError) HasCost() bool {
	if o != nil && !IsNil(o.Cost) {
		return true
	}

	return false
}

// SetCost gets a reference to the given ExBudget and assigns it to the Cost field.
func (o *SafetyError) SetCost(v ExBudget) {
	o.Cost = &v
}

// GetCurrencySymbol returns the CurrencySymbol field value if set, zero value otherwise.
func (o *SafetyError) GetCurrencySymbol() string {
	if o == nil || IsNil(o.CurrencySymbol) {
		var ret string
		return ret
	}
	return *o.CurrencySymbol
}

// GetCurrencySymbolOk returns a tuple with the CurrencySymbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SafetyError) GetCurrencySymbolOk() (*string, bool) {
	if o == nil || IsNil(o.CurrencySymbol) {
		return nil, false
	}
	return o.CurrencySymbol, true
}

// HasCurrencySymbol returns a boolean if a field has been set.
func (o *SafetyError) HasCurrencySymbol() bool {
	if o != nil && !IsNil(o.CurrencySymbol) {
		return true
	}

	return false
}

// SetCurrencySymbol gets a reference to the given string and assigns it to the CurrencySymbol field.
func (o *SafetyError) SetCurrencySymbol(v string) {
	o.CurrencySymbol = &v
}

// GetDetail returns the Detail field value
func (o *SafetyError) GetDetail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Detail
}

// GetDetailOk returns a tuple with the Detail field value
// and a boolean to check if the value has been set.
func (o *SafetyError) GetDetailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Detail, true
}

// SetDetail sets field value
func (o *SafetyError) SetDetail(v string) {
	o.Detail = v
}

// GetError returns the Error field value
func (o *SafetyError) GetError() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Error
}

// GetErrorOk returns a tuple with the Error field value
// and a boolean to check if the value has been set.
func (o *SafetyError) GetErrorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Error, true
}

// SetError sets field value
func (o *SafetyError) SetError(v string) {
	o.Error = v
}

// GetFatal returns the Fatal field value
func (o *SafetyError) GetFatal() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Fatal
}

// GetFatalOk returns a tuple with the Fatal field value
// and a boolean to check if the value has been set.
func (o *SafetyError) GetFatalOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fatal, true
}

// SetFatal sets field value
func (o *SafetyError) SetFatal(v bool) {
	o.Fatal = v
}

// GetHash returns the Hash field value if set, zero value otherwise.
func (o *SafetyError) GetHash() string {
	if o == nil || IsNil(o.Hash) {
		var ret string
		return ret
	}
	return *o.Hash
}

// GetHashOk returns a tuple with the Hash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SafetyError) GetHashOk() (*string, bool) {
	if o == nil || IsNil(o.Hash) {
		return nil, false
	}
	return o.Hash, true
}

// HasHash returns a boolean if a field has been set.
func (o *SafetyError) HasHash() bool {
	if o != nil && !IsNil(o.Hash) {
		return true
	}

	return false
}

// SetHash gets a reference to the given string and assigns it to the Hash field.
func (o *SafetyError) SetHash(v string) {
	o.Hash = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *SafetyError) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SafetyError) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *SafetyError) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *SafetyError) SetMessage(v string) {
	o.Message = &v
}

// GetRoleName returns the RoleName field value if set, zero value otherwise.
func (o *SafetyError) GetRoleName() string {
	if o == nil || IsNil(o.RoleName) {
		var ret string
		return ret
	}
	return *o.RoleName
}

// GetRoleNameOk returns a tuple with the RoleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SafetyError) GetRoleNameOk() (*string, bool) {
	if o == nil || IsNil(o.RoleName) {
		return nil, false
	}
	return o.RoleName, true
}

// HasRoleName returns a boolean if a field has been set.
func (o *SafetyError) HasRoleName() bool {
	if o != nil && !IsNil(o.RoleName) {
		return true
	}

	return false
}

// SetRoleName gets a reference to the given string and assigns it to the RoleName field.
func (o *SafetyError) SetRoleName(v string) {
	o.RoleName = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *SafetyError) GetToken() Token {
	if o == nil || IsNil(o.Token) {
		var ret Token
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SafetyError) GetTokenOk() (*Token, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *SafetyError) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given Token and assigns it to the Token field.
func (o *SafetyError) SetToken(v Token) {
	o.Token = &v
}

// GetTokenName returns the TokenName field value if set, zero value otherwise.
func (o *SafetyError) GetTokenName() string {
	if o == nil || IsNil(o.TokenName) {
		var ret string
		return ret
	}
	return *o.TokenName
}

// GetTokenNameOk returns a tuple with the TokenName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SafetyError) GetTokenNameOk() (*string, bool) {
	if o == nil || IsNil(o.TokenName) {
		return nil, false
	}
	return o.TokenName, true
}

// HasTokenName returns a boolean if a field has been set.
func (o *SafetyError) HasTokenName() bool {
	if o != nil && !IsNil(o.TokenName) {
		return true
	}

	return false
}

// SetTokenName gets a reference to the given string and assigns it to the TokenName field.
func (o *SafetyError) SetTokenName(v string) {
	o.TokenName = &v
}

// GetTransaction returns the Transaction field value if set, zero value otherwise.
func (o *SafetyError) GetTransaction() Transaction {
	if o == nil || IsNil(o.Transaction) {
		var ret Transaction
		return ret
	}
	return *o.Transaction
}

// GetTransactionOk returns a tuple with the Transaction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SafetyError) GetTransactionOk() (*Transaction, bool) {
	if o == nil || IsNil(o.Transaction) {
		return nil, false
	}
	return o.Transaction, true
}

// HasTransaction returns a boolean if a field has been set.
func (o *SafetyError) HasTransaction() bool {
	if o != nil && !IsNil(o.Transaction) {
		return true
	}

	return false
}

// SetTransaction gets a reference to the given Transaction and assigns it to the Transaction field.
func (o *SafetyError) SetTransaction(v Transaction) {
	o.Transaction = &v
}

// GetValueId returns the ValueId field value if set, zero value otherwise.
func (o *SafetyError) GetValueId() string {
	if o == nil || IsNil(o.ValueId) {
		var ret string
		return ret
	}
	return *o.ValueId
}

// GetValueIdOk returns a tuple with the ValueId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SafetyError) GetValueIdOk() (*string, bool) {
	if o == nil || IsNil(o.ValueId) {
		return nil, false
	}
	return o.ValueId, true
}

// HasValueId returns a boolean if a field has been set.
func (o *SafetyError) HasValueId() bool {
	if o != nil && !IsNil(o.ValueId) {
		return true
	}

	return false
}

// SetValueId gets a reference to the given string and assigns it to the ValueId field.
func (o *SafetyError) SetValueId(v string) {
	o.ValueId = &v
}

// GetWarning returns the Warning field value if set, zero value otherwise.
func (o *SafetyError) GetWarning() TransactionWarning {
	if o == nil || IsNil(o.Warning) {
		var ret TransactionWarning
		return ret
	}
	return *o.Warning
}

// GetWarningOk returns a tuple with the Warning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SafetyError) GetWarningOk() (*TransactionWarning, bool) {
	if o == nil || IsNil(o.Warning) {
		return nil, false
	}
	return o.Warning, true
}

// HasWarning returns a boolean if a field has been set.
func (o *SafetyError) HasWarning() bool {
	if o != nil && !IsNil(o.Warning) {
		return true
	}

	return false
}

// SetWarning gets a reference to the given TransactionWarning and assigns it to the Warning field.
func (o *SafetyError) SetWarning(v TransactionWarning) {
	o.Warning = &v
}

func (o SafetyError) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SafetyError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountId) {
		toSerialize["account-id"] = o.AccountId
	}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.Bytes) {
		toSerialize["bytes"] = o.Bytes
	}
	if !IsNil(o.ChoiceId) {
		toSerialize["choice-id"] = o.ChoiceId
	}
	if !IsNil(o.Cost) {
		toSerialize["cost"] = o.Cost
	}
	if !IsNil(o.CurrencySymbol) {
		toSerialize["currency-symbol"] = o.CurrencySymbol
	}
	toSerialize["detail"] = o.Detail
	toSerialize["error"] = o.Error
	toSerialize["fatal"] = o.Fatal
	if !IsNil(o.Hash) {
		toSerialize["hash"] = o.Hash
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.RoleName) {
		toSerialize["role-name"] = o.RoleName
	}
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	if !IsNil(o.TokenName) {
		toSerialize["token-name"] = o.TokenName
	}
	if !IsNil(o.Transaction) {
		toSerialize["transaction"] = o.Transaction
	}
	if !IsNil(o.ValueId) {
		toSerialize["value-id"] = o.ValueId
	}
	if !IsNil(o.Warning) {
		toSerialize["warning"] = o.Warning
	}
	return toSerialize, nil
}

type NullableSafetyError struct {
	value *SafetyError
	isSet bool
}

func (v NullableSafetyError) Get() *SafetyError {
	return v.value
}

func (v *NullableSafetyError) Set(val *SafetyError) {
	v.value = val
	v.isSet = true
}

func (v NullableSafetyError) IsSet() bool {
	return v.isSet
}

func (v *NullableSafetyError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSafetyError(val *SafetyError) *NullableSafetyError {
	return &NullableSafetyError{value: val, isSet: true}
}

func (v NullableSafetyError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSafetyError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


