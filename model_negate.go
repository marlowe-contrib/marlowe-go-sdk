/*
Marlowe Runtime REST API

REST API for Marlowe Runtime

API version: 0.0.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marloweruntime

import (
	"encoding/json"
)

// checks if the Negate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Negate{}

// Negate struct for Negate
type Negate struct {
	Negate Value `json:"negate"`
}

// NewNegate instantiates a new Negate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNegate(negate Value) *Negate {
	this := Negate{}
	this.Negate = negate
	return &this
}

// NewNegateWithDefaults instantiates a new Negate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNegateWithDefaults() *Negate {
	this := Negate{}
	return &this
}

// GetNegate returns the Negate field value
func (o *Negate) GetNegate() Value {
	if o == nil {
		var ret Value
		return ret
	}

	return o.Negate
}

// GetNegateOk returns a tuple with the Negate field value
// and a boolean to check if the value has been set.
func (o *Negate) GetNegateOk() (*Value, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Negate, true
}

// SetNegate sets field value
func (o *Negate) SetNegate(v Value) {
	o.Negate = v
}

func (o Negate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Negate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["negate"] = o.Negate
	return toSerialize, nil
}

type NullableNegate struct {
	value *Negate
	isSet bool
}

func (v NullableNegate) Get() *Negate {
	return v.value
}

func (v *NullableNegate) Set(val *Negate) {
	v.value = val
	v.isSet = true
}

func (v NullableNegate) IsSet() bool {
	return v.isSet
}

func (v *NullableNegate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNegate(val *Negate) *NullableNegate {
	return &NullableNegate{value: val, isSet: true}
}

func (v NullableNegate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNegate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


