/*
Marlowe Runtime REST API

REST API for Marlowe Runtime

API version: 0.0.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marloweruntime

import (
	"encoding/json"
	"fmt"
)

// Value - A time-varying expression that evaluates to a boolean
type Value struct {
	Add *Add
	Divide *Divide
	IfValue *IfValue
	Minus *Minus
	Multiply *Multiply
	Negate *Negate
	TimeInterval *TimeInterval
	TokenInAccount *TokenInAccount
	UseValue *UseValue
	ValueOfChoice *ValueOfChoice
	Int64 *int64
}

// AddAsValue is a convenience function that returns Add wrapped in Value
func AddAsValue(v *Add) Value {
	return Value{
		Add: v,
	}
}

// DivideAsValue is a convenience function that returns Divide wrapped in Value
func DivideAsValue(v *Divide) Value {
	return Value{
		Divide: v,
	}
}

// IfValueAsValue is a convenience function that returns IfValue wrapped in Value
func IfValueAsValue(v *IfValue) Value {
	return Value{
		IfValue: v,
	}
}

// MinusAsValue is a convenience function that returns Minus wrapped in Value
func MinusAsValue(v *Minus) Value {
	return Value{
		Minus: v,
	}
}

// MultiplyAsValue is a convenience function that returns Multiply wrapped in Value
func MultiplyAsValue(v *Multiply) Value {
	return Value{
		Multiply: v,
	}
}

// NegateAsValue is a convenience function that returns Negate wrapped in Value
func NegateAsValue(v *Negate) Value {
	return Value{
		Negate: v,
	}
}

// TimeIntervalAsValue is a convenience function that returns TimeInterval wrapped in Value
func TimeIntervalAsValue(v *TimeInterval) Value {
	return Value{
		TimeInterval: v,
	}
}

// TokenInAccountAsValue is a convenience function that returns TokenInAccount wrapped in Value
func TokenInAccountAsValue(v *TokenInAccount) Value {
	return Value{
		TokenInAccount: v,
	}
}

// UseValueAsValue is a convenience function that returns UseValue wrapped in Value
func UseValueAsValue(v *UseValue) Value {
	return Value{
		UseValue: v,
	}
}

// ValueOfChoiceAsValue is a convenience function that returns ValueOfChoice wrapped in Value
func ValueOfChoiceAsValue(v *ValueOfChoice) Value {
	return Value{
		ValueOfChoice: v,
	}
}

// int64AsValue is a convenience function that returns int64 wrapped in Value
func Int64AsValue(v *int64) Value {
	return Value{
		Int64: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Value) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Add
	err = newStrictDecoder(data).Decode(&dst.Add)
	if err == nil {
		jsonAdd, _ := json.Marshal(dst.Add)
		if string(jsonAdd) == "{}" { // empty struct
			dst.Add = nil
		} else {
			match++
		}
	} else {
		dst.Add = nil
	}

	// try to unmarshal data into Divide
	err = newStrictDecoder(data).Decode(&dst.Divide)
	if err == nil {
		jsonDivide, _ := json.Marshal(dst.Divide)
		if string(jsonDivide) == "{}" { // empty struct
			dst.Divide = nil
		} else {
			match++
		}
	} else {
		dst.Divide = nil
	}

	// try to unmarshal data into IfValue
	err = newStrictDecoder(data).Decode(&dst.IfValue)
	if err == nil {
		jsonIfValue, _ := json.Marshal(dst.IfValue)
		if string(jsonIfValue) == "{}" { // empty struct
			dst.IfValue = nil
		} else {
			match++
		}
	} else {
		dst.IfValue = nil
	}

	// try to unmarshal data into Minus
	err = newStrictDecoder(data).Decode(&dst.Minus)
	if err == nil {
		jsonMinus, _ := json.Marshal(dst.Minus)
		if string(jsonMinus) == "{}" { // empty struct
			dst.Minus = nil
		} else {
			match++
		}
	} else {
		dst.Minus = nil
	}

	// try to unmarshal data into Multiply
	err = newStrictDecoder(data).Decode(&dst.Multiply)
	if err == nil {
		jsonMultiply, _ := json.Marshal(dst.Multiply)
		if string(jsonMultiply) == "{}" { // empty struct
			dst.Multiply = nil
		} else {
			match++
		}
	} else {
		dst.Multiply = nil
	}

	// try to unmarshal data into Negate
	err = newStrictDecoder(data).Decode(&dst.Negate)
	if err == nil {
		jsonNegate, _ := json.Marshal(dst.Negate)
		if string(jsonNegate) == "{}" { // empty struct
			dst.Negate = nil
		} else {
			match++
		}
	} else {
		dst.Negate = nil
	}

	// try to unmarshal data into TimeInterval
	err = newStrictDecoder(data).Decode(&dst.TimeInterval)
	if err == nil {
		jsonTimeInterval, _ := json.Marshal(dst.TimeInterval)
		if string(jsonTimeInterval) == "{}" { // empty struct
			dst.TimeInterval = nil
		} else {
			match++
		}
	} else {
		dst.TimeInterval = nil
	}

	// try to unmarshal data into TokenInAccount
	err = newStrictDecoder(data).Decode(&dst.TokenInAccount)
	if err == nil {
		jsonTokenInAccount, _ := json.Marshal(dst.TokenInAccount)
		if string(jsonTokenInAccount) == "{}" { // empty struct
			dst.TokenInAccount = nil
		} else {
			match++
		}
	} else {
		dst.TokenInAccount = nil
	}

	// try to unmarshal data into UseValue
	err = newStrictDecoder(data).Decode(&dst.UseValue)
	if err == nil {
		jsonUseValue, _ := json.Marshal(dst.UseValue)
		if string(jsonUseValue) == "{}" { // empty struct
			dst.UseValue = nil
		} else {
			match++
		}
	} else {
		dst.UseValue = nil
	}

	// try to unmarshal data into ValueOfChoice
	err = newStrictDecoder(data).Decode(&dst.ValueOfChoice)
	if err == nil {
		jsonValueOfChoice, _ := json.Marshal(dst.ValueOfChoice)
		if string(jsonValueOfChoice) == "{}" { // empty struct
			dst.ValueOfChoice = nil
		} else {
			match++
		}
	} else {
		dst.ValueOfChoice = nil
	}

	// try to unmarshal data into Int64
	err = newStrictDecoder(data).Decode(&dst.Int64)
	if err == nil {
		jsonInt64, _ := json.Marshal(dst.Int64)
		if string(jsonInt64) == "{}" { // empty struct
			dst.Int64 = nil
		} else {
			match++
		}
	} else {
		dst.Int64 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Add = nil
		dst.Divide = nil
		dst.IfValue = nil
		dst.Minus = nil
		dst.Multiply = nil
		dst.Negate = nil
		dst.TimeInterval = nil
		dst.TokenInAccount = nil
		dst.UseValue = nil
		dst.ValueOfChoice = nil
		dst.Int64 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Value)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Value)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Value) MarshalJSON() ([]byte, error) {
	if src.Add != nil {
		return json.Marshal(&src.Add)
	}

	if src.Divide != nil {
		return json.Marshal(&src.Divide)
	}

	if src.IfValue != nil {
		return json.Marshal(&src.IfValue)
	}

	if src.Minus != nil {
		return json.Marshal(&src.Minus)
	}

	if src.Multiply != nil {
		return json.Marshal(&src.Multiply)
	}

	if src.Negate != nil {
		return json.Marshal(&src.Negate)
	}

	if src.TimeInterval != nil {
		return json.Marshal(&src.TimeInterval)
	}

	if src.TokenInAccount != nil {
		return json.Marshal(&src.TokenInAccount)
	}

	if src.UseValue != nil {
		return json.Marshal(&src.UseValue)
	}

	if src.ValueOfChoice != nil {
		return json.Marshal(&src.ValueOfChoice)
	}

	if src.Int64 != nil {
		return json.Marshal(&src.Int64)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Value) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.Add != nil {
		return obj.Add
	}

	if obj.Divide != nil {
		return obj.Divide
	}

	if obj.IfValue != nil {
		return obj.IfValue
	}

	if obj.Minus != nil {
		return obj.Minus
	}

	if obj.Multiply != nil {
		return obj.Multiply
	}

	if obj.Negate != nil {
		return obj.Negate
	}

	if obj.TimeInterval != nil {
		return obj.TimeInterval
	}

	if obj.TokenInAccount != nil {
		return obj.TokenInAccount
	}

	if obj.UseValue != nil {
		return obj.UseValue
	}

	if obj.ValueOfChoice != nil {
		return obj.ValueOfChoice
	}

	if obj.Int64 != nil {
		return obj.Int64
	}

	// all schemas are nil
	return nil
}

type NullableValue struct {
	value *Value
	isSet bool
}

func (v NullableValue) Get() *Value {
	return v.value
}

func (v *NullableValue) Set(val *Value) {
	v.value = val
	v.isSet = true
}

func (v NullableValue) IsSet() bool {
	return v.isSet
}

func (v *NullableValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValue(val *Value) *NullableValue {
	return &NullableValue{value: val, isSet: true}
}

func (v NullableValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


