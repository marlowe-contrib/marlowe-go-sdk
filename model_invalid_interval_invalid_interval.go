/*
Marlowe Runtime REST API

REST API for Marlowe Runtime

API version: 0.0.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marloweruntime

import (
	"encoding/json"
)

// checks if the InvalidIntervalInvalidInterval type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InvalidIntervalInvalidInterval{}

// InvalidIntervalInvalidInterval struct for InvalidIntervalInvalidInterval
type InvalidIntervalInvalidInterval struct {
	From int32 `json:"from"`
	To int32 `json:"to"`
}

// NewInvalidIntervalInvalidInterval instantiates a new InvalidIntervalInvalidInterval object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvalidIntervalInvalidInterval(from int32, to int32) *InvalidIntervalInvalidInterval {
	this := InvalidIntervalInvalidInterval{}
	this.From = from
	this.To = to
	return &this
}

// NewInvalidIntervalInvalidIntervalWithDefaults instantiates a new InvalidIntervalInvalidInterval object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvalidIntervalInvalidIntervalWithDefaults() *InvalidIntervalInvalidInterval {
	this := InvalidIntervalInvalidInterval{}
	return &this
}

// GetFrom returns the From field value
func (o *InvalidIntervalInvalidInterval) GetFrom() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.From
}

// GetFromOk returns a tuple with the From field value
// and a boolean to check if the value has been set.
func (o *InvalidIntervalInvalidInterval) GetFromOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.From, true
}

// SetFrom sets field value
func (o *InvalidIntervalInvalidInterval) SetFrom(v int32) {
	o.From = v
}

// GetTo returns the To field value
func (o *InvalidIntervalInvalidInterval) GetTo() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.To
}

// GetToOk returns a tuple with the To field value
// and a boolean to check if the value has been set.
func (o *InvalidIntervalInvalidInterval) GetToOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.To, true
}

// SetTo sets field value
func (o *InvalidIntervalInvalidInterval) SetTo(v int32) {
	o.To = v
}

func (o InvalidIntervalInvalidInterval) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InvalidIntervalInvalidInterval) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["from"] = o.From
	toSerialize["to"] = o.To
	return toSerialize, nil
}

type NullableInvalidIntervalInvalidInterval struct {
	value *InvalidIntervalInvalidInterval
	isSet bool
}

func (v NullableInvalidIntervalInvalidInterval) Get() *InvalidIntervalInvalidInterval {
	return v.value
}

func (v *NullableInvalidIntervalInvalidInterval) Set(val *InvalidIntervalInvalidInterval) {
	v.value = val
	v.isSet = true
}

func (v NullableInvalidIntervalInvalidInterval) IsSet() bool {
	return v.isSet
}

func (v *NullableInvalidIntervalInvalidInterval) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvalidIntervalInvalidInterval(val *InvalidIntervalInvalidInterval) *NullableInvalidIntervalInvalidInterval {
	return &NullableInvalidIntervalInvalidInterval{value: val, isSet: true}
}

func (v NullableInvalidIntervalInvalidInterval) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvalidIntervalInvalidInterval) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


