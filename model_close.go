/*
Marlowe Runtime REST API

REST API for Marlowe Runtime

API version: 0.0.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marloweruntime

import (
	"encoding/json"
	"fmt"
)

// Close No more payments will be sent and the balance of the contract is 0.
type Close string

// List of Close
const (
	CLOSE Close = "close"
)

// All allowed values of Close enum
var AllowedCloseEnumValues = []Close{
	"close",
}

func (v *Close) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Close(value)
	for _, existing := range AllowedCloseEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Close", value)
}

// NewCloseFromValue returns a pointer to a valid Close
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCloseFromValue(v string) (*Close, error) {
	ev := Close(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Close: valid values are %v", v, AllowedCloseEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Close) IsValid() bool {
	for _, existing := range AllowedCloseEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Close value
func (v Close) Ptr() *Close {
	return &v
}

type NullableClose struct {
	value *Close
	isSet bool
}

func (v NullableClose) Get() *Close {
	return v.value
}

func (v *NullableClose) Set(val *Close) {
	v.value = val
	v.isSet = true
}

func (v NullableClose) IsSet() bool {
	return v.isSet
}

func (v *NullableClose) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClose(val *Close) *NullableClose {
	return &NullableClose{value: val, isSet: true}
}

func (v NullableClose) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClose) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

