/*
Marlowe Runtime REST API

Testing DefaultAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package marloweruntime

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/marlowe-contrib/marlowe-go-sdk"
)

func Test_marloweruntime_DefaultAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DefaultAPIService ApplyInputsToContract", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var contractId string

		resp, httpRes, err := apiClient.DefaultAPI.ApplyInputsToContract(context.Background(), contractId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CreateContract", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.CreateContract(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CreateContractSources", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.CreateContractSources(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetContractById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var contractId string

		resp, httpRes, err := apiClient.DefaultAPI.GetContractById(context.Background(), contractId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetContractSourceAdjacency", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var contractSourceId string

		resp, httpRes, err := apiClient.DefaultAPI.GetContractSourceAdjacency(context.Background(), contractSourceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetContractSourceById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var contractSourceId string

		resp, httpRes, err := apiClient.DefaultAPI.GetContractSourceById(context.Background(), contractSourceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetContractSourceClosure", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var contractSourceId string

		resp, httpRes, err := apiClient.DefaultAPI.GetContractSourceClosure(context.Background(), contractSourceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetContractTransactionById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var contractId string
		var transactionId string

		resp, httpRes, err := apiClient.DefaultAPI.GetContractTransactionById(context.Background(), contractId, transactionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetContracts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.GetContracts(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetNextStepsForContract", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var contractId string

		resp, httpRes, err := apiClient.DefaultAPI.GetNextStepsForContract(context.Background(), contractId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetPayoutById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var payoutId string

		resp, httpRes, err := apiClient.DefaultAPI.GetPayoutById(context.Background(), payoutId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetPayouts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.GetPayouts(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetTransactionsForContract", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var contractId string

		resp, httpRes, err := apiClient.DefaultAPI.GetTransactionsForContract(context.Background(), contractId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetWithdrawalById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var withdrawalId string

		resp, httpRes, err := apiClient.DefaultAPI.GetWithdrawalById(context.Background(), withdrawalId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetWithdrawals", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.GetWithdrawals(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService Healthcheck", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.Healthcheck(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService SubmitContract", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var contractId string

		httpRes, err := apiClient.DefaultAPI.SubmitContract(context.Background(), contractId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService SubmitContractTransaction", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var contractId string
		var transactionId string

		httpRes, err := apiClient.DefaultAPI.SubmitContractTransaction(context.Background(), contractId, transactionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService SubmitWithdrawal", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var withdrawalId string

		httpRes, err := apiClient.DefaultAPI.SubmitWithdrawal(context.Background(), withdrawalId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService WithdrawPayouts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.WithdrawPayouts(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
