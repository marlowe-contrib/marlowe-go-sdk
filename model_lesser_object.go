/*
Marlowe Runtime REST API

REST API for Marlowe Runtime

API version: 0.0.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marloweruntime

import (
	"encoding/json"
)

// checks if the LesserObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LesserObject{}

// LesserObject struct for LesserObject
type LesserObject struct {
	Lt ValueObject `json:"lt"`
	Value ValueObject `json:"value"`
}

// NewLesserObject instantiates a new LesserObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLesserObject(lt ValueObject, value ValueObject) *LesserObject {
	this := LesserObject{}
	this.Lt = lt
	this.Value = value
	return &this
}

// NewLesserObjectWithDefaults instantiates a new LesserObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLesserObjectWithDefaults() *LesserObject {
	this := LesserObject{}
	return &this
}

// GetLt returns the Lt field value
func (o *LesserObject) GetLt() ValueObject {
	if o == nil {
		var ret ValueObject
		return ret
	}

	return o.Lt
}

// GetLtOk returns a tuple with the Lt field value
// and a boolean to check if the value has been set.
func (o *LesserObject) GetLtOk() (*ValueObject, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Lt, true
}

// SetLt sets field value
func (o *LesserObject) SetLt(v ValueObject) {
	o.Lt = v
}

// GetValue returns the Value field value
func (o *LesserObject) GetValue() ValueObject {
	if o == nil {
		var ret ValueObject
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *LesserObject) GetValueOk() (*ValueObject, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *LesserObject) SetValue(v ValueObject) {
	o.Value = v
}

func (o LesserObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LesserObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["lt"] = o.Lt
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

type NullableLesserObject struct {
	value *LesserObject
	isSet bool
}

func (v NullableLesserObject) Get() *LesserObject {
	return v.value
}

func (v *NullableLesserObject) Set(val *LesserObject) {
	v.value = val
	v.isSet = true
}

func (v NullableLesserObject) IsSet() bool {
	return v.isSet
}

func (v *NullableLesserObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLesserObject(val *LesserObject) *NullableLesserObject {
	return &NullableLesserObject{value: val, isSet: true}
}

func (v NullableLesserObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLesserObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


