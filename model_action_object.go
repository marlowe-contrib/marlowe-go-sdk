/*
Marlowe Runtime REST API

REST API for Marlowe Runtime

API version: 0.0.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marloweruntime

import (
	"encoding/json"
	"fmt"
)

// ActionObject - A contract which becomes active when an action occurs.
type ActionObject struct {
	ChoiceActionObject *ChoiceActionObject
	DepositActionObject *DepositActionObject
	LabelRef *LabelRef
	NotifyActionObject *NotifyActionObject
}

// ChoiceActionObjectAsActionObject is a convenience function that returns ChoiceActionObject wrapped in ActionObject
func ChoiceActionObjectAsActionObject(v *ChoiceActionObject) ActionObject {
	return ActionObject{
		ChoiceActionObject: v,
	}
}

// DepositActionObjectAsActionObject is a convenience function that returns DepositActionObject wrapped in ActionObject
func DepositActionObjectAsActionObject(v *DepositActionObject) ActionObject {
	return ActionObject{
		DepositActionObject: v,
	}
}

// LabelRefAsActionObject is a convenience function that returns LabelRef wrapped in ActionObject
func LabelRefAsActionObject(v *LabelRef) ActionObject {
	return ActionObject{
		LabelRef: v,
	}
}

// NotifyActionObjectAsActionObject is a convenience function that returns NotifyActionObject wrapped in ActionObject
func NotifyActionObjectAsActionObject(v *NotifyActionObject) ActionObject {
	return ActionObject{
		NotifyActionObject: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ActionObject) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ChoiceActionObject
	err = newStrictDecoder(data).Decode(&dst.ChoiceActionObject)
	if err == nil {
		jsonChoiceActionObject, _ := json.Marshal(dst.ChoiceActionObject)
		if string(jsonChoiceActionObject) == "{}" { // empty struct
			dst.ChoiceActionObject = nil
		} else {
			match++
		}
	} else {
		dst.ChoiceActionObject = nil
	}

	// try to unmarshal data into DepositActionObject
	err = newStrictDecoder(data).Decode(&dst.DepositActionObject)
	if err == nil {
		jsonDepositActionObject, _ := json.Marshal(dst.DepositActionObject)
		if string(jsonDepositActionObject) == "{}" { // empty struct
			dst.DepositActionObject = nil
		} else {
			match++
		}
	} else {
		dst.DepositActionObject = nil
	}

	// try to unmarshal data into LabelRef
	err = newStrictDecoder(data).Decode(&dst.LabelRef)
	if err == nil {
		jsonLabelRef, _ := json.Marshal(dst.LabelRef)
		if string(jsonLabelRef) == "{}" { // empty struct
			dst.LabelRef = nil
		} else {
			match++
		}
	} else {
		dst.LabelRef = nil
	}

	// try to unmarshal data into NotifyActionObject
	err = newStrictDecoder(data).Decode(&dst.NotifyActionObject)
	if err == nil {
		jsonNotifyActionObject, _ := json.Marshal(dst.NotifyActionObject)
		if string(jsonNotifyActionObject) == "{}" { // empty struct
			dst.NotifyActionObject = nil
		} else {
			match++
		}
	} else {
		dst.NotifyActionObject = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ChoiceActionObject = nil
		dst.DepositActionObject = nil
		dst.LabelRef = nil
		dst.NotifyActionObject = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ActionObject)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ActionObject)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ActionObject) MarshalJSON() ([]byte, error) {
	if src.ChoiceActionObject != nil {
		return json.Marshal(&src.ChoiceActionObject)
	}

	if src.DepositActionObject != nil {
		return json.Marshal(&src.DepositActionObject)
	}

	if src.LabelRef != nil {
		return json.Marshal(&src.LabelRef)
	}

	if src.NotifyActionObject != nil {
		return json.Marshal(&src.NotifyActionObject)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ActionObject) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ChoiceActionObject != nil {
		return obj.ChoiceActionObject
	}

	if obj.DepositActionObject != nil {
		return obj.DepositActionObject
	}

	if obj.LabelRef != nil {
		return obj.LabelRef
	}

	if obj.NotifyActionObject != nil {
		return obj.NotifyActionObject
	}

	// all schemas are nil
	return nil
}

type NullableActionObject struct {
	value *ActionObject
	isSet bool
}

func (v NullableActionObject) Get() *ActionObject {
	return v.value
}

func (v *NullableActionObject) Set(val *ActionObject) {
	v.value = val
	v.isSet = true
}

func (v NullableActionObject) IsSet() bool {
	return v.isSet
}

func (v *NullableActionObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActionObject(val *ActionObject) *NullableActionObject {
	return &NullableActionObject{value: val, isSet: true}
}

func (v NullableActionObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActionObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


