/*
Marlowe Runtime REST API

REST API for Marlowe Runtime

API version: 0.0.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marloweruntime

import (
	"encoding/json"
)

// checks if the InvalidInterval type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InvalidInterval{}

// InvalidInterval Invalid Marlowe transaction interval.
type InvalidInterval struct {
	InvalidInterval InvalidIntervalInvalidInterval `json:"invalidInterval"`
}

// NewInvalidInterval instantiates a new InvalidInterval object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvalidInterval(invalidInterval InvalidIntervalInvalidInterval) *InvalidInterval {
	this := InvalidInterval{}
	this.InvalidInterval = invalidInterval
	return &this
}

// NewInvalidIntervalWithDefaults instantiates a new InvalidInterval object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvalidIntervalWithDefaults() *InvalidInterval {
	this := InvalidInterval{}
	return &this
}

// GetInvalidInterval returns the InvalidInterval field value
func (o *InvalidInterval) GetInvalidInterval() InvalidIntervalInvalidInterval {
	if o == nil {
		var ret InvalidIntervalInvalidInterval
		return ret
	}

	return o.InvalidInterval
}

// GetInvalidIntervalOk returns a tuple with the InvalidInterval field value
// and a boolean to check if the value has been set.
func (o *InvalidInterval) GetInvalidIntervalOk() (*InvalidIntervalInvalidInterval, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InvalidInterval, true
}

// SetInvalidInterval sets field value
func (o *InvalidInterval) SetInvalidInterval(v InvalidIntervalInvalidInterval) {
	o.InvalidInterval = v
}

func (o InvalidInterval) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InvalidInterval) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["invalidInterval"] = o.InvalidInterval
	return toSerialize, nil
}

type NullableInvalidInterval struct {
	value *InvalidInterval
	isSet bool
}

func (v NullableInvalidInterval) Get() *InvalidInterval {
	return v.value
}

func (v *NullableInvalidInterval) Set(val *InvalidInterval) {
	v.value = val
	v.isSet = true
}

func (v NullableInvalidInterval) IsSet() bool {
	return v.isSet
}

func (v *NullableInvalidInterval) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvalidInterval(val *InvalidInterval) *NullableInvalidInterval {
	return &NullableInvalidInterval{value: val, isSet: true}
}

func (v NullableInvalidInterval) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvalidInterval) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


