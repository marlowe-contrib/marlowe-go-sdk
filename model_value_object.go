/*
Marlowe Runtime REST API

REST API for Marlowe Runtime

API version: 0.0.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marloweruntime

import (
	"encoding/json"
	"fmt"
)

// ValueObject - A time-varying expression that evaluates to a boolean
type ValueObject struct {
	AddObject *AddObject
	DivideObject *DivideObject
	IfValueObject *IfValueObject
	LabelRef *LabelRef
	MinusObject *MinusObject
	MultiplyObject *MultiplyObject
	NegateObject *NegateObject
	TimeInterval *TimeInterval
	TokenInAccountObject *TokenInAccountObject
	UseValue *UseValue
	ValueOfChoiceObject *ValueOfChoiceObject
	Int64 *int64
}

// AddObjectAsValueObject is a convenience function that returns AddObject wrapped in ValueObject
func AddObjectAsValueObject(v *AddObject) ValueObject {
	return ValueObject{
		AddObject: v,
	}
}

// DivideObjectAsValueObject is a convenience function that returns DivideObject wrapped in ValueObject
func DivideObjectAsValueObject(v *DivideObject) ValueObject {
	return ValueObject{
		DivideObject: v,
	}
}

// IfValueObjectAsValueObject is a convenience function that returns IfValueObject wrapped in ValueObject
func IfValueObjectAsValueObject(v *IfValueObject) ValueObject {
	return ValueObject{
		IfValueObject: v,
	}
}

// LabelRefAsValueObject is a convenience function that returns LabelRef wrapped in ValueObject
func LabelRefAsValueObject(v *LabelRef) ValueObject {
	return ValueObject{
		LabelRef: v,
	}
}

// MinusObjectAsValueObject is a convenience function that returns MinusObject wrapped in ValueObject
func MinusObjectAsValueObject(v *MinusObject) ValueObject {
	return ValueObject{
		MinusObject: v,
	}
}

// MultiplyObjectAsValueObject is a convenience function that returns MultiplyObject wrapped in ValueObject
func MultiplyObjectAsValueObject(v *MultiplyObject) ValueObject {
	return ValueObject{
		MultiplyObject: v,
	}
}

// NegateObjectAsValueObject is a convenience function that returns NegateObject wrapped in ValueObject
func NegateObjectAsValueObject(v *NegateObject) ValueObject {
	return ValueObject{
		NegateObject: v,
	}
}

// TimeIntervalAsValueObject is a convenience function that returns TimeInterval wrapped in ValueObject
func TimeIntervalAsValueObject(v *TimeInterval) ValueObject {
	return ValueObject{
		TimeInterval: v,
	}
}

// TokenInAccountObjectAsValueObject is a convenience function that returns TokenInAccountObject wrapped in ValueObject
func TokenInAccountObjectAsValueObject(v *TokenInAccountObject) ValueObject {
	return ValueObject{
		TokenInAccountObject: v,
	}
}

// UseValueAsValueObject is a convenience function that returns UseValue wrapped in ValueObject
func UseValueAsValueObject(v *UseValue) ValueObject {
	return ValueObject{
		UseValue: v,
	}
}

// ValueOfChoiceObjectAsValueObject is a convenience function that returns ValueOfChoiceObject wrapped in ValueObject
func ValueOfChoiceObjectAsValueObject(v *ValueOfChoiceObject) ValueObject {
	return ValueObject{
		ValueOfChoiceObject: v,
	}
}

// int64AsValueObject is a convenience function that returns int64 wrapped in ValueObject
func Int64AsValueObject(v *int64) ValueObject {
	return ValueObject{
		Int64: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ValueObject) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AddObject
	err = newStrictDecoder(data).Decode(&dst.AddObject)
	if err == nil {
		jsonAddObject, _ := json.Marshal(dst.AddObject)
		if string(jsonAddObject) == "{}" { // empty struct
			dst.AddObject = nil
		} else {
			match++
		}
	} else {
		dst.AddObject = nil
	}

	// try to unmarshal data into DivideObject
	err = newStrictDecoder(data).Decode(&dst.DivideObject)
	if err == nil {
		jsonDivideObject, _ := json.Marshal(dst.DivideObject)
		if string(jsonDivideObject) == "{}" { // empty struct
			dst.DivideObject = nil
		} else {
			match++
		}
	} else {
		dst.DivideObject = nil
	}

	// try to unmarshal data into IfValueObject
	err = newStrictDecoder(data).Decode(&dst.IfValueObject)
	if err == nil {
		jsonIfValueObject, _ := json.Marshal(dst.IfValueObject)
		if string(jsonIfValueObject) == "{}" { // empty struct
			dst.IfValueObject = nil
		} else {
			match++
		}
	} else {
		dst.IfValueObject = nil
	}

	// try to unmarshal data into LabelRef
	err = newStrictDecoder(data).Decode(&dst.LabelRef)
	if err == nil {
		jsonLabelRef, _ := json.Marshal(dst.LabelRef)
		if string(jsonLabelRef) == "{}" { // empty struct
			dst.LabelRef = nil
		} else {
			match++
		}
	} else {
		dst.LabelRef = nil
	}

	// try to unmarshal data into MinusObject
	err = newStrictDecoder(data).Decode(&dst.MinusObject)
	if err == nil {
		jsonMinusObject, _ := json.Marshal(dst.MinusObject)
		if string(jsonMinusObject) == "{}" { // empty struct
			dst.MinusObject = nil
		} else {
			match++
		}
	} else {
		dst.MinusObject = nil
	}

	// try to unmarshal data into MultiplyObject
	err = newStrictDecoder(data).Decode(&dst.MultiplyObject)
	if err == nil {
		jsonMultiplyObject, _ := json.Marshal(dst.MultiplyObject)
		if string(jsonMultiplyObject) == "{}" { // empty struct
			dst.MultiplyObject = nil
		} else {
			match++
		}
	} else {
		dst.MultiplyObject = nil
	}

	// try to unmarshal data into NegateObject
	err = newStrictDecoder(data).Decode(&dst.NegateObject)
	if err == nil {
		jsonNegateObject, _ := json.Marshal(dst.NegateObject)
		if string(jsonNegateObject) == "{}" { // empty struct
			dst.NegateObject = nil
		} else {
			match++
		}
	} else {
		dst.NegateObject = nil
	}

	// try to unmarshal data into TimeInterval
	err = newStrictDecoder(data).Decode(&dst.TimeInterval)
	if err == nil {
		jsonTimeInterval, _ := json.Marshal(dst.TimeInterval)
		if string(jsonTimeInterval) == "{}" { // empty struct
			dst.TimeInterval = nil
		} else {
			match++
		}
	} else {
		dst.TimeInterval = nil
	}

	// try to unmarshal data into TokenInAccountObject
	err = newStrictDecoder(data).Decode(&dst.TokenInAccountObject)
	if err == nil {
		jsonTokenInAccountObject, _ := json.Marshal(dst.TokenInAccountObject)
		if string(jsonTokenInAccountObject) == "{}" { // empty struct
			dst.TokenInAccountObject = nil
		} else {
			match++
		}
	} else {
		dst.TokenInAccountObject = nil
	}

	// try to unmarshal data into UseValue
	err = newStrictDecoder(data).Decode(&dst.UseValue)
	if err == nil {
		jsonUseValue, _ := json.Marshal(dst.UseValue)
		if string(jsonUseValue) == "{}" { // empty struct
			dst.UseValue = nil
		} else {
			match++
		}
	} else {
		dst.UseValue = nil
	}

	// try to unmarshal data into ValueOfChoiceObject
	err = newStrictDecoder(data).Decode(&dst.ValueOfChoiceObject)
	if err == nil {
		jsonValueOfChoiceObject, _ := json.Marshal(dst.ValueOfChoiceObject)
		if string(jsonValueOfChoiceObject) == "{}" { // empty struct
			dst.ValueOfChoiceObject = nil
		} else {
			match++
		}
	} else {
		dst.ValueOfChoiceObject = nil
	}

	// try to unmarshal data into Int64
	err = newStrictDecoder(data).Decode(&dst.Int64)
	if err == nil {
		jsonInt64, _ := json.Marshal(dst.Int64)
		if string(jsonInt64) == "{}" { // empty struct
			dst.Int64 = nil
		} else {
			match++
		}
	} else {
		dst.Int64 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AddObject = nil
		dst.DivideObject = nil
		dst.IfValueObject = nil
		dst.LabelRef = nil
		dst.MinusObject = nil
		dst.MultiplyObject = nil
		dst.NegateObject = nil
		dst.TimeInterval = nil
		dst.TokenInAccountObject = nil
		dst.UseValue = nil
		dst.ValueOfChoiceObject = nil
		dst.Int64 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ValueObject)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ValueObject)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ValueObject) MarshalJSON() ([]byte, error) {
	if src.AddObject != nil {
		return json.Marshal(&src.AddObject)
	}

	if src.DivideObject != nil {
		return json.Marshal(&src.DivideObject)
	}

	if src.IfValueObject != nil {
		return json.Marshal(&src.IfValueObject)
	}

	if src.LabelRef != nil {
		return json.Marshal(&src.LabelRef)
	}

	if src.MinusObject != nil {
		return json.Marshal(&src.MinusObject)
	}

	if src.MultiplyObject != nil {
		return json.Marshal(&src.MultiplyObject)
	}

	if src.NegateObject != nil {
		return json.Marshal(&src.NegateObject)
	}

	if src.TimeInterval != nil {
		return json.Marshal(&src.TimeInterval)
	}

	if src.TokenInAccountObject != nil {
		return json.Marshal(&src.TokenInAccountObject)
	}

	if src.UseValue != nil {
		return json.Marshal(&src.UseValue)
	}

	if src.ValueOfChoiceObject != nil {
		return json.Marshal(&src.ValueOfChoiceObject)
	}

	if src.Int64 != nil {
		return json.Marshal(&src.Int64)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ValueObject) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AddObject != nil {
		return obj.AddObject
	}

	if obj.DivideObject != nil {
		return obj.DivideObject
	}

	if obj.IfValueObject != nil {
		return obj.IfValueObject
	}

	if obj.LabelRef != nil {
		return obj.LabelRef
	}

	if obj.MinusObject != nil {
		return obj.MinusObject
	}

	if obj.MultiplyObject != nil {
		return obj.MultiplyObject
	}

	if obj.NegateObject != nil {
		return obj.NegateObject
	}

	if obj.TimeInterval != nil {
		return obj.TimeInterval
	}

	if obj.TokenInAccountObject != nil {
		return obj.TokenInAccountObject
	}

	if obj.UseValue != nil {
		return obj.UseValue
	}

	if obj.ValueOfChoiceObject != nil {
		return obj.ValueOfChoiceObject
	}

	if obj.Int64 != nil {
		return obj.Int64
	}

	// all schemas are nil
	return nil
}

type NullableValueObject struct {
	value *ValueObject
	isSet bool
}

func (v NullableValueObject) Get() *ValueObject {
	return v.value
}

func (v *NullableValueObject) Set(val *ValueObject) {
	v.value = val
	v.isSet = true
}

func (v NullableValueObject) IsSet() bool {
	return v.isSet
}

func (v *NullableValueObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValueObject(val *ValueObject) *NullableValueObject {
	return &NullableValueObject{value: val, isSet: true}
}

func (v NullableValueObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValueObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


