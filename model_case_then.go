/*
Marlowe Runtime REST API

REST API for Marlowe Runtime

API version: 0.0.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marloweruntime

import (
	"encoding/json"
)

// checks if the CaseThen type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CaseThen{}

// CaseThen struct for CaseThen
type CaseThen struct {
	Case Action `json:"case"`
	Then Contract `json:"then"`
}

// NewCaseThen instantiates a new CaseThen object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCaseThen(case_ Action, then Contract) *CaseThen {
	this := CaseThen{}
	this.Case = case_
	this.Then = then
	return &this
}

// NewCaseThenWithDefaults instantiates a new CaseThen object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCaseThenWithDefaults() *CaseThen {
	this := CaseThen{}
	return &this
}

// GetCase returns the Case field value
func (o *CaseThen) GetCase() Action {
	if o == nil {
		var ret Action
		return ret
	}

	return o.Case
}

// GetCaseOk returns a tuple with the Case field value
// and a boolean to check if the value has been set.
func (o *CaseThen) GetCaseOk() (*Action, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Case, true
}

// SetCase sets field value
func (o *CaseThen) SetCase(v Action) {
	o.Case = v
}

// GetThen returns the Then field value
func (o *CaseThen) GetThen() Contract {
	if o == nil {
		var ret Contract
		return ret
	}

	return o.Then
}

// GetThenOk returns a tuple with the Then field value
// and a boolean to check if the value has been set.
func (o *CaseThen) GetThenOk() (*Contract, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Then, true
}

// SetThen sets field value
func (o *CaseThen) SetThen(v Contract) {
	o.Then = v
}

func (o CaseThen) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CaseThen) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["case"] = o.Case
	toSerialize["then"] = o.Then
	return toSerialize, nil
}

type NullableCaseThen struct {
	value *CaseThen
	isSet bool
}

func (v NullableCaseThen) Get() *CaseThen {
	return v.value
}

func (v *NullableCaseThen) Set(val *CaseThen) {
	v.value = val
	v.isSet = true
}

func (v NullableCaseThen) IsSet() bool {
	return v.isSet
}

func (v *NullableCaseThen) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCaseThen(val *CaseThen) *NullableCaseThen {
	return &NullableCaseThen{value: val, isSet: true}
}

func (v NullableCaseThen) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCaseThen) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


