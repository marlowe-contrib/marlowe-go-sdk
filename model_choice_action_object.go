/*
Marlowe Runtime REST API

REST API for Marlowe Runtime

API version: 0.0.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marloweruntime

import (
	"encoding/json"
)

// checks if the ChoiceActionObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChoiceActionObject{}

// ChoiceActionObject struct for ChoiceActionObject
type ChoiceActionObject struct {
	ChooseBetween []Bound `json:"choose_between"`
	ForChoice ChoiceId `json:"for_choice"`
}

// NewChoiceActionObject instantiates a new ChoiceActionObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChoiceActionObject(chooseBetween []Bound, forChoice ChoiceId) *ChoiceActionObject {
	this := ChoiceActionObject{}
	this.ChooseBetween = chooseBetween
	this.ForChoice = forChoice
	return &this
}

// NewChoiceActionObjectWithDefaults instantiates a new ChoiceActionObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChoiceActionObjectWithDefaults() *ChoiceActionObject {
	this := ChoiceActionObject{}
	return &this
}

// GetChooseBetween returns the ChooseBetween field value
func (o *ChoiceActionObject) GetChooseBetween() []Bound {
	if o == nil {
		var ret []Bound
		return ret
	}

	return o.ChooseBetween
}

// GetChooseBetweenOk returns a tuple with the ChooseBetween field value
// and a boolean to check if the value has been set.
func (o *ChoiceActionObject) GetChooseBetweenOk() ([]Bound, bool) {
	if o == nil {
		return nil, false
	}
	return o.ChooseBetween, true
}

// SetChooseBetween sets field value
func (o *ChoiceActionObject) SetChooseBetween(v []Bound) {
	o.ChooseBetween = v
}

// GetForChoice returns the ForChoice field value
func (o *ChoiceActionObject) GetForChoice() ChoiceId {
	if o == nil {
		var ret ChoiceId
		return ret
	}

	return o.ForChoice
}

// GetForChoiceOk returns a tuple with the ForChoice field value
// and a boolean to check if the value has been set.
func (o *ChoiceActionObject) GetForChoiceOk() (*ChoiceId, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ForChoice, true
}

// SetForChoice sets field value
func (o *ChoiceActionObject) SetForChoice(v ChoiceId) {
	o.ForChoice = v
}

func (o ChoiceActionObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChoiceActionObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["choose_between"] = o.ChooseBetween
	toSerialize["for_choice"] = o.ForChoice
	return toSerialize, nil
}

type NullableChoiceActionObject struct {
	value *ChoiceActionObject
	isSet bool
}

func (v NullableChoiceActionObject) Get() *ChoiceActionObject {
	return v.value
}

func (v *NullableChoiceActionObject) Set(val *ChoiceActionObject) {
	v.value = val
	v.isSet = true
}

func (v NullableChoiceActionObject) IsSet() bool {
	return v.isSet
}

func (v *NullableChoiceActionObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChoiceActionObject(val *ChoiceActionObject) *NullableChoiceActionObject {
	return &NullableChoiceActionObject{value: val, isSet: true}
}

func (v NullableChoiceActionObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChoiceActionObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


