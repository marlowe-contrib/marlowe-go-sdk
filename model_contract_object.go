/*
Marlowe Runtime REST API

REST API for Marlowe Runtime

API version: 0.0.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marloweruntime

import (
	"encoding/json"
	"fmt"
)

// ContractObject - Contract terms specified in Marlowe
type ContractObject struct {
	AssertObject *AssertObject
	CloseObject *CloseObject
	IfObject *IfObject
	LabelRef *LabelRef
	LetObject *LetObject
	PayObject *PayObject
	WhenObject *WhenObject
}

// AssertObjectAsContractObject is a convenience function that returns AssertObject wrapped in ContractObject
func AssertObjectAsContractObject(v *AssertObject) ContractObject {
	return ContractObject{
		AssertObject: v,
	}
}

// CloseObjectAsContractObject is a convenience function that returns CloseObject wrapped in ContractObject
func CloseObjectAsContractObject(v *CloseObject) ContractObject {
	return ContractObject{
		CloseObject: v,
	}
}

// IfObjectAsContractObject is a convenience function that returns IfObject wrapped in ContractObject
func IfObjectAsContractObject(v *IfObject) ContractObject {
	return ContractObject{
		IfObject: v,
	}
}

// LabelRefAsContractObject is a convenience function that returns LabelRef wrapped in ContractObject
func LabelRefAsContractObject(v *LabelRef) ContractObject {
	return ContractObject{
		LabelRef: v,
	}
}

// LetObjectAsContractObject is a convenience function that returns LetObject wrapped in ContractObject
func LetObjectAsContractObject(v *LetObject) ContractObject {
	return ContractObject{
		LetObject: v,
	}
}

// PayObjectAsContractObject is a convenience function that returns PayObject wrapped in ContractObject
func PayObjectAsContractObject(v *PayObject) ContractObject {
	return ContractObject{
		PayObject: v,
	}
}

// WhenObjectAsContractObject is a convenience function that returns WhenObject wrapped in ContractObject
func WhenObjectAsContractObject(v *WhenObject) ContractObject {
	return ContractObject{
		WhenObject: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ContractObject) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AssertObject
	err = newStrictDecoder(data).Decode(&dst.AssertObject)
	if err == nil {
		jsonAssertObject, _ := json.Marshal(dst.AssertObject)
		if string(jsonAssertObject) == "{}" { // empty struct
			dst.AssertObject = nil
		} else {
			match++
		}
	} else {
		dst.AssertObject = nil
	}

	// try to unmarshal data into CloseObject
	err = newStrictDecoder(data).Decode(&dst.CloseObject)
	if err == nil {
		jsonCloseObject, _ := json.Marshal(dst.CloseObject)
		if string(jsonCloseObject) == "{}" { // empty struct
			dst.CloseObject = nil
		} else {
			match++
		}
	} else {
		dst.CloseObject = nil
	}

	// try to unmarshal data into IfObject
	err = newStrictDecoder(data).Decode(&dst.IfObject)
	if err == nil {
		jsonIfObject, _ := json.Marshal(dst.IfObject)
		if string(jsonIfObject) == "{}" { // empty struct
			dst.IfObject = nil
		} else {
			match++
		}
	} else {
		dst.IfObject = nil
	}

	// try to unmarshal data into LabelRef
	err = newStrictDecoder(data).Decode(&dst.LabelRef)
	if err == nil {
		jsonLabelRef, _ := json.Marshal(dst.LabelRef)
		if string(jsonLabelRef) == "{}" { // empty struct
			dst.LabelRef = nil
		} else {
			match++
		}
	} else {
		dst.LabelRef = nil
	}

	// try to unmarshal data into LetObject
	err = newStrictDecoder(data).Decode(&dst.LetObject)
	if err == nil {
		jsonLetObject, _ := json.Marshal(dst.LetObject)
		if string(jsonLetObject) == "{}" { // empty struct
			dst.LetObject = nil
		} else {
			match++
		}
	} else {
		dst.LetObject = nil
	}

	// try to unmarshal data into PayObject
	err = newStrictDecoder(data).Decode(&dst.PayObject)
	if err == nil {
		jsonPayObject, _ := json.Marshal(dst.PayObject)
		if string(jsonPayObject) == "{}" { // empty struct
			dst.PayObject = nil
		} else {
			match++
		}
	} else {
		dst.PayObject = nil
	}

	// try to unmarshal data into WhenObject
	err = newStrictDecoder(data).Decode(&dst.WhenObject)
	if err == nil {
		jsonWhenObject, _ := json.Marshal(dst.WhenObject)
		if string(jsonWhenObject) == "{}" { // empty struct
			dst.WhenObject = nil
		} else {
			match++
		}
	} else {
		dst.WhenObject = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AssertObject = nil
		dst.CloseObject = nil
		dst.IfObject = nil
		dst.LabelRef = nil
		dst.LetObject = nil
		dst.PayObject = nil
		dst.WhenObject = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ContractObject)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ContractObject)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ContractObject) MarshalJSON() ([]byte, error) {
	if src.AssertObject != nil {
		return json.Marshal(&src.AssertObject)
	}

	if src.CloseObject != nil {
		return json.Marshal(&src.CloseObject)
	}

	if src.IfObject != nil {
		return json.Marshal(&src.IfObject)
	}

	if src.LabelRef != nil {
		return json.Marshal(&src.LabelRef)
	}

	if src.LetObject != nil {
		return json.Marshal(&src.LetObject)
	}

	if src.PayObject != nil {
		return json.Marshal(&src.PayObject)
	}

	if src.WhenObject != nil {
		return json.Marshal(&src.WhenObject)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ContractObject) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AssertObject != nil {
		return obj.AssertObject
	}

	if obj.CloseObject != nil {
		return obj.CloseObject
	}

	if obj.IfObject != nil {
		return obj.IfObject
	}

	if obj.LabelRef != nil {
		return obj.LabelRef
	}

	if obj.LetObject != nil {
		return obj.LetObject
	}

	if obj.PayObject != nil {
		return obj.PayObject
	}

	if obj.WhenObject != nil {
		return obj.WhenObject
	}

	// all schemas are nil
	return nil
}

type NullableContractObject struct {
	value *ContractObject
	isSet bool
}

func (v NullableContractObject) Get() *ContractObject {
	return v.value
}

func (v *NullableContractObject) Set(val *ContractObject) {
	v.value = val
	v.isSet = true
}

func (v NullableContractObject) IsSet() bool {
	return v.isSet
}

func (v *NullableContractObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContractObject(val *ContractObject) *NullableContractObject {
	return &NullableContractObject{value: val, isSet: true}
}

func (v NullableContractObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContractObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


