/*
Marlowe Runtime REST API

REST API for Marlowe Runtime

API version: 0.0.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marloweruntime

import (
	"encoding/json"
)

// checks if the CaseMerkleizedThen type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CaseMerkleizedThen{}

// CaseMerkleizedThen struct for CaseMerkleizedThen
type CaseMerkleizedThen struct {
	Case Action `json:"case"`
	MerkleizedThen string `json:"merkleized_then"`
}

// NewCaseMerkleizedThen instantiates a new CaseMerkleizedThen object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCaseMerkleizedThen(case_ Action, merkleizedThen string) *CaseMerkleizedThen {
	this := CaseMerkleizedThen{}
	this.Case = case_
	this.MerkleizedThen = merkleizedThen
	return &this
}

// NewCaseMerkleizedThenWithDefaults instantiates a new CaseMerkleizedThen object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCaseMerkleizedThenWithDefaults() *CaseMerkleizedThen {
	this := CaseMerkleizedThen{}
	return &this
}

// GetCase returns the Case field value
func (o *CaseMerkleizedThen) GetCase() Action {
	if o == nil {
		var ret Action
		return ret
	}

	return o.Case
}

// GetCaseOk returns a tuple with the Case field value
// and a boolean to check if the value has been set.
func (o *CaseMerkleizedThen) GetCaseOk() (*Action, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Case, true
}

// SetCase sets field value
func (o *CaseMerkleizedThen) SetCase(v Action) {
	o.Case = v
}

// GetMerkleizedThen returns the MerkleizedThen field value
func (o *CaseMerkleizedThen) GetMerkleizedThen() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MerkleizedThen
}

// GetMerkleizedThenOk returns a tuple with the MerkleizedThen field value
// and a boolean to check if the value has been set.
func (o *CaseMerkleizedThen) GetMerkleizedThenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MerkleizedThen, true
}

// SetMerkleizedThen sets field value
func (o *CaseMerkleizedThen) SetMerkleizedThen(v string) {
	o.MerkleizedThen = v
}

func (o CaseMerkleizedThen) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CaseMerkleizedThen) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["case"] = o.Case
	toSerialize["merkleized_then"] = o.MerkleizedThen
	return toSerialize, nil
}

type NullableCaseMerkleizedThen struct {
	value *CaseMerkleizedThen
	isSet bool
}

func (v NullableCaseMerkleizedThen) Get() *CaseMerkleizedThen {
	return v.value
}

func (v *NullableCaseMerkleizedThen) Set(val *CaseMerkleizedThen) {
	v.value = val
	v.isSet = true
}

func (v NullableCaseMerkleizedThen) IsSet() bool {
	return v.isSet
}

func (v *NullableCaseMerkleizedThen) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCaseMerkleizedThen(val *CaseMerkleizedThen) *NullableCaseMerkleizedThen {
	return &NullableCaseMerkleizedThen{value: val, isSet: true}
}

func (v NullableCaseMerkleizedThen) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCaseMerkleizedThen) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


