/*
Marlowe Runtime REST API

REST API for Marlowe Runtime

API version: 0.0.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marloweruntime

import (
	"encoding/json"
	"fmt"
)

// Action - A contract which becomes active when an action occurs.
type Action struct {
	ChoiceAction *ChoiceAction
	DepositAction *DepositAction
	NotifyAction *NotifyAction
}

// ChoiceActionAsAction is a convenience function that returns ChoiceAction wrapped in Action
func ChoiceActionAsAction(v *ChoiceAction) Action {
	return Action{
		ChoiceAction: v,
	}
}

// DepositActionAsAction is a convenience function that returns DepositAction wrapped in Action
func DepositActionAsAction(v *DepositAction) Action {
	return Action{
		DepositAction: v,
	}
}

// NotifyActionAsAction is a convenience function that returns NotifyAction wrapped in Action
func NotifyActionAsAction(v *NotifyAction) Action {
	return Action{
		NotifyAction: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Action) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ChoiceAction
	err = newStrictDecoder(data).Decode(&dst.ChoiceAction)
	if err == nil {
		jsonChoiceAction, _ := json.Marshal(dst.ChoiceAction)
		if string(jsonChoiceAction) == "{}" { // empty struct
			dst.ChoiceAction = nil
		} else {
			match++
		}
	} else {
		dst.ChoiceAction = nil
	}

	// try to unmarshal data into DepositAction
	err = newStrictDecoder(data).Decode(&dst.DepositAction)
	if err == nil {
		jsonDepositAction, _ := json.Marshal(dst.DepositAction)
		if string(jsonDepositAction) == "{}" { // empty struct
			dst.DepositAction = nil
		} else {
			match++
		}
	} else {
		dst.DepositAction = nil
	}

	// try to unmarshal data into NotifyAction
	err = newStrictDecoder(data).Decode(&dst.NotifyAction)
	if err == nil {
		jsonNotifyAction, _ := json.Marshal(dst.NotifyAction)
		if string(jsonNotifyAction) == "{}" { // empty struct
			dst.NotifyAction = nil
		} else {
			match++
		}
	} else {
		dst.NotifyAction = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ChoiceAction = nil
		dst.DepositAction = nil
		dst.NotifyAction = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Action)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Action)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Action) MarshalJSON() ([]byte, error) {
	if src.ChoiceAction != nil {
		return json.Marshal(&src.ChoiceAction)
	}

	if src.DepositAction != nil {
		return json.Marshal(&src.DepositAction)
	}

	if src.NotifyAction != nil {
		return json.Marshal(&src.NotifyAction)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Action) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ChoiceAction != nil {
		return obj.ChoiceAction
	}

	if obj.DepositAction != nil {
		return obj.DepositAction
	}

	if obj.NotifyAction != nil {
		return obj.NotifyAction
	}

	// all schemas are nil
	return nil
}

type NullableAction struct {
	value *Action
	isSet bool
}

func (v NullableAction) Get() *Action {
	return v.value
}

func (v *NullableAction) Set(val *Action) {
	v.value = val
	v.isSet = true
}

func (v NullableAction) IsSet() bool {
	return v.isSet
}

func (v *NullableAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAction(val *Action) *NullableAction {
	return &NullableAction{value: val, isSet: true}
}

func (v NullableAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


