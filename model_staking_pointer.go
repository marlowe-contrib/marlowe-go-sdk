/*
Marlowe Runtime REST API

REST API for Marlowe Runtime

API version: 0.0.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marloweruntime

import (
	"encoding/json"
)

// checks if the StakingPointer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StakingPointer{}

// StakingPointer A Plutus staking pointer.
type StakingPointer struct {
	StakingHash []int32 `json:"stakingHash"`
}

// NewStakingPointer instantiates a new StakingPointer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStakingPointer(stakingHash []int32) *StakingPointer {
	this := StakingPointer{}
	this.StakingHash = stakingHash
	return &this
}

// NewStakingPointerWithDefaults instantiates a new StakingPointer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStakingPointerWithDefaults() *StakingPointer {
	this := StakingPointer{}
	return &this
}

// GetStakingHash returns the StakingHash field value
func (o *StakingPointer) GetStakingHash() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.StakingHash
}

// GetStakingHashOk returns a tuple with the StakingHash field value
// and a boolean to check if the value has been set.
func (o *StakingPointer) GetStakingHashOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.StakingHash, true
}

// SetStakingHash sets field value
func (o *StakingPointer) SetStakingHash(v []int32) {
	o.StakingHash = v
}

func (o StakingPointer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StakingPointer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["stakingHash"] = o.StakingHash
	return toSerialize, nil
}

type NullableStakingPointer struct {
	value *StakingPointer
	isSet bool
}

func (v NullableStakingPointer) Get() *StakingPointer {
	return v.value
}

func (v *NullableStakingPointer) Set(val *StakingPointer) {
	v.value = val
	v.isSet = true
}

func (v NullableStakingPointer) IsSet() bool {
	return v.isSet
}

func (v *NullableStakingPointer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStakingPointer(val *StakingPointer) *NullableStakingPointer {
	return &NullableStakingPointer{value: val, isSet: true}
}

func (v NullableStakingPointer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStakingPointer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


