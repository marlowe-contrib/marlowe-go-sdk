/*
Marlowe Runtime REST API

REST API for Marlowe Runtime

API version: 0.0.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marloweruntime

import (
	"encoding/json"
	"fmt"
)

// AssertFail A semantics assertion failed.
type AssertFail string

// List of AssertFail
const (
	ASSERTION_FAILED AssertFail = "assertion_failed"
)

// All allowed values of AssertFail enum
var AllowedAssertFailEnumValues = []AssertFail{
	"assertion_failed",
}

func (v *AssertFail) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AssertFail(value)
	for _, existing := range AllowedAssertFailEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AssertFail", value)
}

// NewAssertFailFromValue returns a pointer to a valid AssertFail
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAssertFailFromValue(v string) (*AssertFail, error) {
	ev := AssertFail(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AssertFail: valid values are %v", v, AllowedAssertFailEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AssertFail) IsValid() bool {
	for _, existing := range AllowedAssertFailEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AssertFail value
func (v AssertFail) Ptr() *AssertFail {
	return &v
}

type NullableAssertFail struct {
	value *AssertFail
	isSet bool
}

func (v NullableAssertFail) Get() *AssertFail {
	return v.value
}

func (v *NullableAssertFail) Set(val *AssertFail) {
	v.value = val
	v.isSet = true
}

func (v NullableAssertFail) IsSet() bool {
	return v.isSet
}

func (v *NullableAssertFail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssertFail(val *AssertFail) *NullableAssertFail {
	return &NullableAssertFail{value: val, isSet: true}
}

func (v NullableAssertFail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssertFail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

