/*
Marlowe Runtime REST API

REST API for Marlowe Runtime

API version: 0.0.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marloweruntime

import (
	"encoding/json"
	"fmt"
)

// CaseObject - A contract which becomes active when an action occurs.
type CaseObject struct {
	CaseMerkleizedThenObject *CaseMerkleizedThenObject
	CaseThenObject *CaseThenObject
}

// CaseMerkleizedThenObjectAsCaseObject is a convenience function that returns CaseMerkleizedThenObject wrapped in CaseObject
func CaseMerkleizedThenObjectAsCaseObject(v *CaseMerkleizedThenObject) CaseObject {
	return CaseObject{
		CaseMerkleizedThenObject: v,
	}
}

// CaseThenObjectAsCaseObject is a convenience function that returns CaseThenObject wrapped in CaseObject
func CaseThenObjectAsCaseObject(v *CaseThenObject) CaseObject {
	return CaseObject{
		CaseThenObject: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CaseObject) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CaseMerkleizedThenObject
	err = newStrictDecoder(data).Decode(&dst.CaseMerkleizedThenObject)
	if err == nil {
		jsonCaseMerkleizedThenObject, _ := json.Marshal(dst.CaseMerkleizedThenObject)
		if string(jsonCaseMerkleizedThenObject) == "{}" { // empty struct
			dst.CaseMerkleizedThenObject = nil
		} else {
			match++
		}
	} else {
		dst.CaseMerkleizedThenObject = nil
	}

	// try to unmarshal data into CaseThenObject
	err = newStrictDecoder(data).Decode(&dst.CaseThenObject)
	if err == nil {
		jsonCaseThenObject, _ := json.Marshal(dst.CaseThenObject)
		if string(jsonCaseThenObject) == "{}" { // empty struct
			dst.CaseThenObject = nil
		} else {
			match++
		}
	} else {
		dst.CaseThenObject = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CaseMerkleizedThenObject = nil
		dst.CaseThenObject = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CaseObject)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CaseObject)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CaseObject) MarshalJSON() ([]byte, error) {
	if src.CaseMerkleizedThenObject != nil {
		return json.Marshal(&src.CaseMerkleizedThenObject)
	}

	if src.CaseThenObject != nil {
		return json.Marshal(&src.CaseThenObject)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CaseObject) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CaseMerkleizedThenObject != nil {
		return obj.CaseMerkleizedThenObject
	}

	if obj.CaseThenObject != nil {
		return obj.CaseThenObject
	}

	// all schemas are nil
	return nil
}

type NullableCaseObject struct {
	value *CaseObject
	isSet bool
}

func (v NullableCaseObject) Get() *CaseObject {
	return v.value
}

func (v *NullableCaseObject) Set(val *CaseObject) {
	v.value = val
	v.isSet = true
}

func (v NullableCaseObject) IsSet() bool {
	return v.isSet
}

func (v *NullableCaseObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCaseObject(val *CaseObject) *NullableCaseObject {
	return &NullableCaseObject{value: val, isSet: true}
}

func (v NullableCaseObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCaseObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


