/*
Marlowe Runtime REST API

REST API for Marlowe Runtime

API version: 0.0.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marloweruntime

import (
	"encoding/json"
)

// checks if the PostTransactionsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostTransactionsRequest{}

// PostTransactionsRequest struct for PostTransactionsRequest
type PostTransactionsRequest struct {
	Inputs []Input `json:"inputs"`
	InvalidBefore *string `json:"invalidBefore,omitempty"`
	InvalidHereafter *string `json:"invalidHereafter,omitempty"`
	Metadata map[string]Metadata `json:"metadata"`
	Tags map[string]Metadata `json:"tags"`
	Version MarloweVersion `json:"version"`
}

// NewPostTransactionsRequest instantiates a new PostTransactionsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostTransactionsRequest(inputs []Input, metadata map[string]Metadata, tags map[string]Metadata, version MarloweVersion) *PostTransactionsRequest {
	this := PostTransactionsRequest{}
	this.Inputs = inputs
	this.Metadata = metadata
	this.Tags = tags
	this.Version = version
	return &this
}

// NewPostTransactionsRequestWithDefaults instantiates a new PostTransactionsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostTransactionsRequestWithDefaults() *PostTransactionsRequest {
	this := PostTransactionsRequest{}
	return &this
}

// GetInputs returns the Inputs field value
func (o *PostTransactionsRequest) GetInputs() []Input {
	if o == nil {
		var ret []Input
		return ret
	}

	return o.Inputs
}

// GetInputsOk returns a tuple with the Inputs field value
// and a boolean to check if the value has been set.
func (o *PostTransactionsRequest) GetInputsOk() ([]Input, bool) {
	if o == nil {
		return nil, false
	}
	return o.Inputs, true
}

// SetInputs sets field value
func (o *PostTransactionsRequest) SetInputs(v []Input) {
	o.Inputs = v
}

// GetInvalidBefore returns the InvalidBefore field value if set, zero value otherwise.
func (o *PostTransactionsRequest) GetInvalidBefore() string {
	if o == nil || IsNil(o.InvalidBefore) {
		var ret string
		return ret
	}
	return *o.InvalidBefore
}

// GetInvalidBeforeOk returns a tuple with the InvalidBefore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostTransactionsRequest) GetInvalidBeforeOk() (*string, bool) {
	if o == nil || IsNil(o.InvalidBefore) {
		return nil, false
	}
	return o.InvalidBefore, true
}

// HasInvalidBefore returns a boolean if a field has been set.
func (o *PostTransactionsRequest) HasInvalidBefore() bool {
	if o != nil && !IsNil(o.InvalidBefore) {
		return true
	}

	return false
}

// SetInvalidBefore gets a reference to the given string and assigns it to the InvalidBefore field.
func (o *PostTransactionsRequest) SetInvalidBefore(v string) {
	o.InvalidBefore = &v
}

// GetInvalidHereafter returns the InvalidHereafter field value if set, zero value otherwise.
func (o *PostTransactionsRequest) GetInvalidHereafter() string {
	if o == nil || IsNil(o.InvalidHereafter) {
		var ret string
		return ret
	}
	return *o.InvalidHereafter
}

// GetInvalidHereafterOk returns a tuple with the InvalidHereafter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostTransactionsRequest) GetInvalidHereafterOk() (*string, bool) {
	if o == nil || IsNil(o.InvalidHereafter) {
		return nil, false
	}
	return o.InvalidHereafter, true
}

// HasInvalidHereafter returns a boolean if a field has been set.
func (o *PostTransactionsRequest) HasInvalidHereafter() bool {
	if o != nil && !IsNil(o.InvalidHereafter) {
		return true
	}

	return false
}

// SetInvalidHereafter gets a reference to the given string and assigns it to the InvalidHereafter field.
func (o *PostTransactionsRequest) SetInvalidHereafter(v string) {
	o.InvalidHereafter = &v
}

// GetMetadata returns the Metadata field value
func (o *PostTransactionsRequest) GetMetadata() map[string]Metadata {
	if o == nil {
		var ret map[string]Metadata
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *PostTransactionsRequest) GetMetadataOk() (*map[string]Metadata, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *PostTransactionsRequest) SetMetadata(v map[string]Metadata) {
	o.Metadata = v
}

// GetTags returns the Tags field value
func (o *PostTransactionsRequest) GetTags() map[string]Metadata {
	if o == nil {
		var ret map[string]Metadata
		return ret
	}

	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value
// and a boolean to check if the value has been set.
func (o *PostTransactionsRequest) GetTagsOk() (*map[string]Metadata, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tags, true
}

// SetTags sets field value
func (o *PostTransactionsRequest) SetTags(v map[string]Metadata) {
	o.Tags = v
}

// GetVersion returns the Version field value
func (o *PostTransactionsRequest) GetVersion() MarloweVersion {
	if o == nil {
		var ret MarloweVersion
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *PostTransactionsRequest) GetVersionOk() (*MarloweVersion, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *PostTransactionsRequest) SetVersion(v MarloweVersion) {
	o.Version = v
}

func (o PostTransactionsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostTransactionsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["inputs"] = o.Inputs
	if !IsNil(o.InvalidBefore) {
		toSerialize["invalidBefore"] = o.InvalidBefore
	}
	if !IsNil(o.InvalidHereafter) {
		toSerialize["invalidHereafter"] = o.InvalidHereafter
	}
	toSerialize["metadata"] = o.Metadata
	toSerialize["tags"] = o.Tags
	toSerialize["version"] = o.Version
	return toSerialize, nil
}

type NullablePostTransactionsRequest struct {
	value *PostTransactionsRequest
	isSet bool
}

func (v NullablePostTransactionsRequest) Get() *PostTransactionsRequest {
	return v.value
}

func (v *NullablePostTransactionsRequest) Set(val *PostTransactionsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePostTransactionsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePostTransactionsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostTransactionsRequest(val *PostTransactionsRequest) *NullablePostTransactionsRequest {
	return &NullablePostTransactionsRequest{value: val, isSet: true}
}

func (v NullablePostTransactionsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostTransactionsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


