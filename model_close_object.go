/*
Marlowe Runtime REST API

REST API for Marlowe Runtime

API version: 0.0.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marloweruntime

import (
	"encoding/json"
	"fmt"
)

// CloseObject No more payments will be sent and the balance of the contract is 0.
type CloseObject string

// List of CloseObject
const (
	CLOSE_OBJECT CloseObject = "close"
)

// All allowed values of CloseObject enum
var AllowedCloseObjectEnumValues = []CloseObject{
	"close",
}

func (v *CloseObject) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CloseObject(value)
	for _, existing := range AllowedCloseObjectEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CloseObject", value)
}

// NewCloseObjectFromValue returns a pointer to a valid CloseObject
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCloseObjectFromValue(v string) (*CloseObject, error) {
	ev := CloseObject(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CloseObject: valid values are %v", v, AllowedCloseObjectEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CloseObject) IsValid() bool {
	for _, existing := range AllowedCloseObjectEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CloseObject value
func (v CloseObject) Ptr() *CloseObject {
	return &v
}

type NullableCloseObject struct {
	value *CloseObject
	isSet bool
}

func (v NullableCloseObject) Get() *CloseObject {
	return v.value
}

func (v *NullableCloseObject) Set(val *CloseObject) {
	v.value = val
	v.isSet = true
}

func (v NullableCloseObject) IsSet() bool {
	return v.isSet
}

func (v *NullableCloseObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloseObject(val *CloseObject) *NullableCloseObject {
	return &NullableCloseObject{value: val, isSet: true}
}

func (v NullableCloseObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloseObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

