/*
Marlowe Runtime REST API

REST API for Marlowe Runtime

API version: 0.0.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marloweruntime

import (
	"encoding/json"
	"fmt"
)

// Input - An input to a Marlowe transaction
type Input struct {
	ChoiceContinuationInput *ChoiceContinuationInput
	ChoiceInput *ChoiceInput
	ContinuationInput *ContinuationInput
	DepositContinuationInput *DepositContinuationInput
	DepositInput *DepositInput
	NotifyInput *NotifyInput
}

// ChoiceContinuationInputAsInput is a convenience function that returns ChoiceContinuationInput wrapped in Input
func ChoiceContinuationInputAsInput(v *ChoiceContinuationInput) Input {
	return Input{
		ChoiceContinuationInput: v,
	}
}

// ChoiceInputAsInput is a convenience function that returns ChoiceInput wrapped in Input
func ChoiceInputAsInput(v *ChoiceInput) Input {
	return Input{
		ChoiceInput: v,
	}
}

// ContinuationInputAsInput is a convenience function that returns ContinuationInput wrapped in Input
func ContinuationInputAsInput(v *ContinuationInput) Input {
	return Input{
		ContinuationInput: v,
	}
}

// DepositContinuationInputAsInput is a convenience function that returns DepositContinuationInput wrapped in Input
func DepositContinuationInputAsInput(v *DepositContinuationInput) Input {
	return Input{
		DepositContinuationInput: v,
	}
}

// DepositInputAsInput is a convenience function that returns DepositInput wrapped in Input
func DepositInputAsInput(v *DepositInput) Input {
	return Input{
		DepositInput: v,
	}
}

// NotifyInputAsInput is a convenience function that returns NotifyInput wrapped in Input
func NotifyInputAsInput(v *NotifyInput) Input {
	return Input{
		NotifyInput: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Input) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ChoiceContinuationInput
	err = newStrictDecoder(data).Decode(&dst.ChoiceContinuationInput)
	if err == nil {
		jsonChoiceContinuationInput, _ := json.Marshal(dst.ChoiceContinuationInput)
		if string(jsonChoiceContinuationInput) == "{}" { // empty struct
			dst.ChoiceContinuationInput = nil
		} else {
			match++
		}
	} else {
		dst.ChoiceContinuationInput = nil
	}

	// try to unmarshal data into ChoiceInput
	err = newStrictDecoder(data).Decode(&dst.ChoiceInput)
	if err == nil {
		jsonChoiceInput, _ := json.Marshal(dst.ChoiceInput)
		if string(jsonChoiceInput) == "{}" { // empty struct
			dst.ChoiceInput = nil
		} else {
			match++
		}
	} else {
		dst.ChoiceInput = nil
	}

	// try to unmarshal data into ContinuationInput
	err = newStrictDecoder(data).Decode(&dst.ContinuationInput)
	if err == nil {
		jsonContinuationInput, _ := json.Marshal(dst.ContinuationInput)
		if string(jsonContinuationInput) == "{}" { // empty struct
			dst.ContinuationInput = nil
		} else {
			match++
		}
	} else {
		dst.ContinuationInput = nil
	}

	// try to unmarshal data into DepositContinuationInput
	err = newStrictDecoder(data).Decode(&dst.DepositContinuationInput)
	if err == nil {
		jsonDepositContinuationInput, _ := json.Marshal(dst.DepositContinuationInput)
		if string(jsonDepositContinuationInput) == "{}" { // empty struct
			dst.DepositContinuationInput = nil
		} else {
			match++
		}
	} else {
		dst.DepositContinuationInput = nil
	}

	// try to unmarshal data into DepositInput
	err = newStrictDecoder(data).Decode(&dst.DepositInput)
	if err == nil {
		jsonDepositInput, _ := json.Marshal(dst.DepositInput)
		if string(jsonDepositInput) == "{}" { // empty struct
			dst.DepositInput = nil
		} else {
			match++
		}
	} else {
		dst.DepositInput = nil
	}

	// try to unmarshal data into NotifyInput
	err = newStrictDecoder(data).Decode(&dst.NotifyInput)
	if err == nil {
		jsonNotifyInput, _ := json.Marshal(dst.NotifyInput)
		if string(jsonNotifyInput) == "{}" { // empty struct
			dst.NotifyInput = nil
		} else {
			match++
		}
	} else {
		dst.NotifyInput = nil
	}

	if dst.DepositInput != nil && dst.DepositContinuationInput != nil {
		// ignore continuation input if it's a false match (DepositInput is a subset of DepositContinuationInput)
		if(dst.DepositContinuationInput.ContinuationHash == "" ){
			dst.DepositContinuationInput = nil
		}
		match--
	
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ChoiceContinuationInput = nil
		dst.ChoiceInput = nil
		dst.ContinuationInput = nil
		dst.DepositContinuationInput = nil
		dst.DepositInput = nil
		dst.NotifyInput = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Input)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Input)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Input) MarshalJSON() ([]byte, error) {
	if src.ChoiceContinuationInput != nil {
		return json.Marshal(&src.ChoiceContinuationInput)
	}

	if src.ChoiceInput != nil {
		return json.Marshal(&src.ChoiceInput)
	}

	if src.ContinuationInput != nil {
		return json.Marshal(&src.ContinuationInput)
	}

	if src.DepositContinuationInput != nil {
		return json.Marshal(&src.DepositContinuationInput)
	}

	if src.DepositInput != nil {
		return json.Marshal(&src.DepositInput)
	}

	if src.NotifyInput != nil {
		return json.Marshal(&src.NotifyInput)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Input) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ChoiceContinuationInput != nil {
		return obj.ChoiceContinuationInput
	}

	if obj.ChoiceInput != nil {
		return obj.ChoiceInput
	}

	if obj.ContinuationInput != nil {
		return obj.ContinuationInput
	}

	if obj.DepositContinuationInput != nil {
		return obj.DepositContinuationInput
	}

	if obj.DepositInput != nil {
		return obj.DepositInput
	}

	if obj.NotifyInput != nil {
		return obj.NotifyInput
	}

	// all schemas are nil
	return nil
}

type NullableInput struct {
	value *Input
	isSet bool
}

func (v NullableInput) Get() *Input {
	return v.value
}

func (v *NullableInput) Set(val *Input) {
	v.value = val
	v.isSet = true
}

func (v NullableInput) IsSet() bool {
	return v.isSet
}

func (v *NullableInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInput(val *Input) *NullableInput {
	return &NullableInput{value: val, isSet: true}
}

func (v NullableInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


