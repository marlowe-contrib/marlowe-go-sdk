/*
Marlowe Runtime REST API

REST API for Marlowe Runtime

API version: 0.0.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marloweruntime

import (
	"encoding/json"
	"fmt"
)

// RoleTokenConfig - struct for RoleTokenConfig
type RoleTokenConfig struct {
	AddressAndMetadata *AddressAndMetadata
	MetadataAndRecipients *MetadataAndRecipients
	MetadataAndScript *MetadataAndScript
	String *string
}

// AddressAndMetadataAsRoleTokenConfig is a convenience function that returns AddressAndMetadata wrapped in RoleTokenConfig
func AddressAndMetadataAsRoleTokenConfig(v *AddressAndMetadata) RoleTokenConfig {
	return RoleTokenConfig{
		AddressAndMetadata: v,
	}
}

// MetadataAndRecipientsAsRoleTokenConfig is a convenience function that returns MetadataAndRecipients wrapped in RoleTokenConfig
func MetadataAndRecipientsAsRoleTokenConfig(v *MetadataAndRecipients) RoleTokenConfig {
	return RoleTokenConfig{
		MetadataAndRecipients: v,
	}
}

// MetadataAndScriptAsRoleTokenConfig is a convenience function that returns MetadataAndScript wrapped in RoleTokenConfig
func MetadataAndScriptAsRoleTokenConfig(v *MetadataAndScript) RoleTokenConfig {
	return RoleTokenConfig{
		MetadataAndScript: v,
	}
}

// stringAsRoleTokenConfig is a convenience function that returns string wrapped in RoleTokenConfig
func StringAsRoleTokenConfig(v *string) RoleTokenConfig {
	return RoleTokenConfig{
		String: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *RoleTokenConfig) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AddressAndMetadata
	err = newStrictDecoder(data).Decode(&dst.AddressAndMetadata)
	if err == nil {
		jsonAddressAndMetadata, _ := json.Marshal(dst.AddressAndMetadata)
		if string(jsonAddressAndMetadata) == "{}" { // empty struct
			dst.AddressAndMetadata = nil
		} else {
			match++
		}
	} else {
		dst.AddressAndMetadata = nil
	}

	// try to unmarshal data into MetadataAndRecipients
	err = newStrictDecoder(data).Decode(&dst.MetadataAndRecipients)
	if err == nil {
		jsonMetadataAndRecipients, _ := json.Marshal(dst.MetadataAndRecipients)
		if string(jsonMetadataAndRecipients) == "{}" { // empty struct
			dst.MetadataAndRecipients = nil
		} else {
			match++
		}
	} else {
		dst.MetadataAndRecipients = nil
	}

	// try to unmarshal data into MetadataAndScript
	err = newStrictDecoder(data).Decode(&dst.MetadataAndScript)
	if err == nil {
		jsonMetadataAndScript, _ := json.Marshal(dst.MetadataAndScript)
		if string(jsonMetadataAndScript) == "{}" { // empty struct
			dst.MetadataAndScript = nil
		} else {
			match++
		}
	} else {
		dst.MetadataAndScript = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AddressAndMetadata = nil
		dst.MetadataAndRecipients = nil
		dst.MetadataAndScript = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(RoleTokenConfig)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(RoleTokenConfig)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src RoleTokenConfig) MarshalJSON() ([]byte, error) {
	if src.AddressAndMetadata != nil {
		return json.Marshal(&src.AddressAndMetadata)
	}

	if src.MetadataAndRecipients != nil {
		return json.Marshal(&src.MetadataAndRecipients)
	}

	if src.MetadataAndScript != nil {
		return json.Marshal(&src.MetadataAndScript)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *RoleTokenConfig) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AddressAndMetadata != nil {
		return obj.AddressAndMetadata
	}

	if obj.MetadataAndRecipients != nil {
		return obj.MetadataAndRecipients
	}

	if obj.MetadataAndScript != nil {
		return obj.MetadataAndScript
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableRoleTokenConfig struct {
	value *RoleTokenConfig
	isSet bool
}

func (v NullableRoleTokenConfig) Get() *RoleTokenConfig {
	return v.value
}

func (v *NullableRoleTokenConfig) Set(val *RoleTokenConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleTokenConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleTokenConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleTokenConfig(val *RoleTokenConfig) *NullableRoleTokenConfig {
	return &NullableRoleTokenConfig{value: val, isSet: true}
}

func (v NullableRoleTokenConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleTokenConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


