/*
Marlowe Runtime REST API

REST API for Marlowe Runtime

API version: 0.0.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marloweruntime

import (
	"encoding/json"
)

// checks if the WhenObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WhenObject{}

// WhenObject Wait for an action to be performed and apply the matching contract when it does. Apply the timeout contract if no actions have been performed in the timeout period.
type WhenObject struct {
	Timeout int64 `json:"timeout"`
	TimeoutContinuation ContractObject `json:"timeout_continuation"`
	When []CaseObject `json:"when"`
}

// NewWhenObject instantiates a new WhenObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWhenObject(timeout int64, timeoutContinuation ContractObject, when []CaseObject) *WhenObject {
	this := WhenObject{}
	this.Timeout = timeout
	this.TimeoutContinuation = timeoutContinuation
	this.When = when
	return &this
}

// NewWhenObjectWithDefaults instantiates a new WhenObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWhenObjectWithDefaults() *WhenObject {
	this := WhenObject{}
	return &this
}

// GetTimeout returns the Timeout field value
func (o *WhenObject) GetTimeout() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value
// and a boolean to check if the value has been set.
func (o *WhenObject) GetTimeoutOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timeout, true
}

// SetTimeout sets field value
func (o *WhenObject) SetTimeout(v int64) {
	o.Timeout = v
}

// GetTimeoutContinuation returns the TimeoutContinuation field value
func (o *WhenObject) GetTimeoutContinuation() ContractObject {
	if o == nil {
		var ret ContractObject
		return ret
	}

	return o.TimeoutContinuation
}

// GetTimeoutContinuationOk returns a tuple with the TimeoutContinuation field value
// and a boolean to check if the value has been set.
func (o *WhenObject) GetTimeoutContinuationOk() (*ContractObject, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeoutContinuation, true
}

// SetTimeoutContinuation sets field value
func (o *WhenObject) SetTimeoutContinuation(v ContractObject) {
	o.TimeoutContinuation = v
}

// GetWhen returns the When field value
func (o *WhenObject) GetWhen() []CaseObject {
	if o == nil {
		var ret []CaseObject
		return ret
	}

	return o.When
}

// GetWhenOk returns a tuple with the When field value
// and a boolean to check if the value has been set.
func (o *WhenObject) GetWhenOk() ([]CaseObject, bool) {
	if o == nil {
		return nil, false
	}
	return o.When, true
}

// SetWhen sets field value
func (o *WhenObject) SetWhen(v []CaseObject) {
	o.When = v
}

func (o WhenObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WhenObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["timeout"] = o.Timeout
	toSerialize["timeout_continuation"] = o.TimeoutContinuation
	toSerialize["when"] = o.When
	return toSerialize, nil
}

type NullableWhenObject struct {
	value *WhenObject
	isSet bool
}

func (v NullableWhenObject) Get() *WhenObject {
	return v.value
}

func (v *NullableWhenObject) Set(val *WhenObject) {
	v.value = val
	v.isSet = true
}

func (v NullableWhenObject) IsSet() bool {
	return v.isSet
}

func (v *NullableWhenObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWhenObject(val *WhenObject) *NullableWhenObject {
	return &NullableWhenObject{value: val, isSet: true}
}

func (v NullableWhenObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWhenObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


