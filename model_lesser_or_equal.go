/*
Marlowe Runtime REST API

REST API for Marlowe Runtime

API version: 0.0.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marloweruntime

import (
	"encoding/json"
)

// checks if the LesserOrEqual type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LesserOrEqual{}

// LesserOrEqual struct for LesserOrEqual
type LesserOrEqual struct {
	LeThan Value `json:"le_than"`
	Value Value `json:"value"`
}

// NewLesserOrEqual instantiates a new LesserOrEqual object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLesserOrEqual(leThan Value, value Value) *LesserOrEqual {
	this := LesserOrEqual{}
	this.LeThan = leThan
	this.Value = value
	return &this
}

// NewLesserOrEqualWithDefaults instantiates a new LesserOrEqual object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLesserOrEqualWithDefaults() *LesserOrEqual {
	this := LesserOrEqual{}
	return &this
}

// GetLeThan returns the LeThan field value
func (o *LesserOrEqual) GetLeThan() Value {
	if o == nil {
		var ret Value
		return ret
	}

	return o.LeThan
}

// GetLeThanOk returns a tuple with the LeThan field value
// and a boolean to check if the value has been set.
func (o *LesserOrEqual) GetLeThanOk() (*Value, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LeThan, true
}

// SetLeThan sets field value
func (o *LesserOrEqual) SetLeThan(v Value) {
	o.LeThan = v
}

// GetValue returns the Value field value
func (o *LesserOrEqual) GetValue() Value {
	if o == nil {
		var ret Value
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *LesserOrEqual) GetValueOk() (*Value, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *LesserOrEqual) SetValue(v Value) {
	o.Value = v
}

func (o LesserOrEqual) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LesserOrEqual) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["le_than"] = o.LeThan
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

type NullableLesserOrEqual struct {
	value *LesserOrEqual
	isSet bool
}

func (v NullableLesserOrEqual) Get() *LesserOrEqual {
	return v.value
}

func (v *NullableLesserOrEqual) Set(val *LesserOrEqual) {
	v.value = val
	v.isSet = true
}

func (v NullableLesserOrEqual) IsSet() bool {
	return v.isSet
}

func (v *NullableLesserOrEqual) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLesserOrEqual(val *LesserOrEqual) *NullableLesserOrEqual {
	return &NullableLesserOrEqual{value: val, isSet: true}
}

func (v NullableLesserOrEqual) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLesserOrEqual) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


