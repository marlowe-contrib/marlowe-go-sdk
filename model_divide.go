/*
Marlowe Runtime REST API

REST API for Marlowe Runtime

API version: 0.0.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marloweruntime

import (
	"encoding/json"
)

// checks if the Divide type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Divide{}

// Divide struct for Divide
type Divide struct {
	By Value `json:"by"`
	Divide Value `json:"divide"`
}

// NewDivide instantiates a new Divide object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDivide(by Value, divide Value) *Divide {
	this := Divide{}
	this.By = by
	this.Divide = divide
	return &this
}

// NewDivideWithDefaults instantiates a new Divide object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDivideWithDefaults() *Divide {
	this := Divide{}
	return &this
}

// GetBy returns the By field value
func (o *Divide) GetBy() Value {
	if o == nil {
		var ret Value
		return ret
	}

	return o.By
}

// GetByOk returns a tuple with the By field value
// and a boolean to check if the value has been set.
func (o *Divide) GetByOk() (*Value, bool) {
	if o == nil {
		return nil, false
	}
	return &o.By, true
}

// SetBy sets field value
func (o *Divide) SetBy(v Value) {
	o.By = v
}

// GetDivide returns the Divide field value
func (o *Divide) GetDivide() Value {
	if o == nil {
		var ret Value
		return ret
	}

	return o.Divide
}

// GetDivideOk returns a tuple with the Divide field value
// and a boolean to check if the value has been set.
func (o *Divide) GetDivideOk() (*Value, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Divide, true
}

// SetDivide sets field value
func (o *Divide) SetDivide(v Value) {
	o.Divide = v
}

func (o Divide) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Divide) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["by"] = o.By
	toSerialize["divide"] = o.Divide
	return toSerialize, nil
}

type NullableDivide struct {
	value *Divide
	isSet bool
}

func (v NullableDivide) Get() *Divide {
	return v.value
}

func (v *NullableDivide) Set(val *Divide) {
	v.value = val
	v.isSet = true
}

func (v NullableDivide) IsSet() bool {
	return v.isSet
}

func (v *NullableDivide) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDivide(val *Divide) *NullableDivide {
	return &NullableDivide{value: val, isSet: true}
}

func (v NullableDivide) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDivide) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


