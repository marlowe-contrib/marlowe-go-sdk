/*
Marlowe Runtime REST API

REST API for Marlowe Runtime

API version: 0.0.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marloweruntime

import (
	"encoding/json"
	"fmt"
)

// IntervalError - A Marlowe transaction interval error.
type IntervalError struct {
	IntervalInPast *IntervalInPast
	InvalidInterval *InvalidInterval
}

// IntervalInPastAsIntervalError is a convenience function that returns IntervalInPast wrapped in IntervalError
func IntervalInPastAsIntervalError(v *IntervalInPast) IntervalError {
	return IntervalError{
		IntervalInPast: v,
	}
}

// InvalidIntervalAsIntervalError is a convenience function that returns InvalidInterval wrapped in IntervalError
func InvalidIntervalAsIntervalError(v *InvalidInterval) IntervalError {
	return IntervalError{
		InvalidInterval: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *IntervalError) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into IntervalInPast
	err = newStrictDecoder(data).Decode(&dst.IntervalInPast)
	if err == nil {
		jsonIntervalInPast, _ := json.Marshal(dst.IntervalInPast)
		if string(jsonIntervalInPast) == "{}" { // empty struct
			dst.IntervalInPast = nil
		} else {
			match++
		}
	} else {
		dst.IntervalInPast = nil
	}

	// try to unmarshal data into InvalidInterval
	err = newStrictDecoder(data).Decode(&dst.InvalidInterval)
	if err == nil {
		jsonInvalidInterval, _ := json.Marshal(dst.InvalidInterval)
		if string(jsonInvalidInterval) == "{}" { // empty struct
			dst.InvalidInterval = nil
		} else {
			match++
		}
	} else {
		dst.InvalidInterval = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.IntervalInPast = nil
		dst.InvalidInterval = nil

		return fmt.Errorf("data matches more than one schema in oneOf(IntervalError)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(IntervalError)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src IntervalError) MarshalJSON() ([]byte, error) {
	if src.IntervalInPast != nil {
		return json.Marshal(&src.IntervalInPast)
	}

	if src.InvalidInterval != nil {
		return json.Marshal(&src.InvalidInterval)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *IntervalError) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.IntervalInPast != nil {
		return obj.IntervalInPast
	}

	if obj.InvalidInterval != nil {
		return obj.InvalidInterval
	}

	// all schemas are nil
	return nil
}

type NullableIntervalError struct {
	value *IntervalError
	isSet bool
}

func (v NullableIntervalError) Get() *IntervalError {
	return v.value
}

func (v *NullableIntervalError) Set(val *IntervalError) {
	v.value = val
	v.isSet = true
}

func (v NullableIntervalError) IsSet() bool {
	return v.isSet
}

func (v *NullableIntervalError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntervalError(val *IntervalError) *NullableIntervalError {
	return &NullableIntervalError{value: val, isSet: true}
}

func (v NullableIntervalError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntervalError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


