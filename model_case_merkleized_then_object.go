/*
Marlowe Runtime REST API

REST API for Marlowe Runtime

API version: 0.0.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marloweruntime

import (
	"encoding/json"
)

// checks if the CaseMerkleizedThenObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CaseMerkleizedThenObject{}

// CaseMerkleizedThenObject struct for CaseMerkleizedThenObject
type CaseMerkleizedThenObject struct {
	Case ActionObject `json:"case"`
	MerkleizedThen string `json:"merkleized_then"`
}

// NewCaseMerkleizedThenObject instantiates a new CaseMerkleizedThenObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCaseMerkleizedThenObject(case_ ActionObject, merkleizedThen string) *CaseMerkleizedThenObject {
	this := CaseMerkleizedThenObject{}
	this.Case = case_
	this.MerkleizedThen = merkleizedThen
	return &this
}

// NewCaseMerkleizedThenObjectWithDefaults instantiates a new CaseMerkleizedThenObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCaseMerkleizedThenObjectWithDefaults() *CaseMerkleizedThenObject {
	this := CaseMerkleizedThenObject{}
	return &this
}

// GetCase returns the Case field value
func (o *CaseMerkleizedThenObject) GetCase() ActionObject {
	if o == nil {
		var ret ActionObject
		return ret
	}

	return o.Case
}

// GetCaseOk returns a tuple with the Case field value
// and a boolean to check if the value has been set.
func (o *CaseMerkleizedThenObject) GetCaseOk() (*ActionObject, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Case, true
}

// SetCase sets field value
func (o *CaseMerkleizedThenObject) SetCase(v ActionObject) {
	o.Case = v
}

// GetMerkleizedThen returns the MerkleizedThen field value
func (o *CaseMerkleizedThenObject) GetMerkleizedThen() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MerkleizedThen
}

// GetMerkleizedThenOk returns a tuple with the MerkleizedThen field value
// and a boolean to check if the value has been set.
func (o *CaseMerkleizedThenObject) GetMerkleizedThenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MerkleizedThen, true
}

// SetMerkleizedThen sets field value
func (o *CaseMerkleizedThenObject) SetMerkleizedThen(v string) {
	o.MerkleizedThen = v
}

func (o CaseMerkleizedThenObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CaseMerkleizedThenObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["case"] = o.Case
	toSerialize["merkleized_then"] = o.MerkleizedThen
	return toSerialize, nil
}

type NullableCaseMerkleizedThenObject struct {
	value *CaseMerkleizedThenObject
	isSet bool
}

func (v NullableCaseMerkleizedThenObject) Get() *CaseMerkleizedThenObject {
	return v.value
}

func (v *NullableCaseMerkleizedThenObject) Set(val *CaseMerkleizedThenObject) {
	v.value = val
	v.isSet = true
}

func (v NullableCaseMerkleizedThenObject) IsSet() bool {
	return v.isSet
}

func (v *NullableCaseMerkleizedThenObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCaseMerkleizedThenObject(val *CaseMerkleizedThenObject) *NullableCaseMerkleizedThenObject {
	return &NullableCaseMerkleizedThenObject{value: val, isSet: true}
}

func (v NullableCaseMerkleizedThenObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCaseMerkleizedThenObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


