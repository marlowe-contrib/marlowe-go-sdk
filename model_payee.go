/*
Marlowe Runtime REST API

REST API for Marlowe Runtime

API version: 0.0.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marloweruntime

import (
	"encoding/json"
	"fmt"
)

// Payee - A recipient of a payment
type Payee struct {
	PayToAccount *PayToAccount
	PayToParty *PayToParty
}

// PayToAccountAsPayee is a convenience function that returns PayToAccount wrapped in Payee
func PayToAccountAsPayee(v *PayToAccount) Payee {
	return Payee{
		PayToAccount: v,
	}
}

// PayToPartyAsPayee is a convenience function that returns PayToParty wrapped in Payee
func PayToPartyAsPayee(v *PayToParty) Payee {
	return Payee{
		PayToParty: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Payee) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into PayToAccount
	err = newStrictDecoder(data).Decode(&dst.PayToAccount)
	if err == nil {
		jsonPayToAccount, _ := json.Marshal(dst.PayToAccount)
		if string(jsonPayToAccount) == "{}" { // empty struct
			dst.PayToAccount = nil
		} else {
			match++
		}
	} else {
		dst.PayToAccount = nil
	}

	// try to unmarshal data into PayToParty
	err = newStrictDecoder(data).Decode(&dst.PayToParty)
	if err == nil {
		jsonPayToParty, _ := json.Marshal(dst.PayToParty)
		if string(jsonPayToParty) == "{}" { // empty struct
			dst.PayToParty = nil
		} else {
			match++
		}
	} else {
		dst.PayToParty = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.PayToAccount = nil
		dst.PayToParty = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Payee)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Payee)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Payee) MarshalJSON() ([]byte, error) {
	if src.PayToAccount != nil {
		return json.Marshal(&src.PayToAccount)
	}

	if src.PayToParty != nil {
		return json.Marshal(&src.PayToParty)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Payee) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.PayToAccount != nil {
		return obj.PayToAccount
	}

	if obj.PayToParty != nil {
		return obj.PayToParty
	}

	// all schemas are nil
	return nil
}

type NullablePayee struct {
	value *Payee
	isSet bool
}

func (v NullablePayee) Get() *Payee {
	return v.value
}

func (v *NullablePayee) Set(val *Payee) {
	v.value = val
	v.isSet = true
}

func (v NullablePayee) IsSet() bool {
	return v.isSet
}

func (v *NullablePayee) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePayee(val *Payee) *NullablePayee {
	return &NullablePayee{value: val, isSet: true}
}

func (v NullablePayee) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePayee) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


