/*
Marlowe Runtime REST API

REST API for Marlowe Runtime

API version: 0.0.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marloweruntime

import (
	"encoding/json"
)

// checks if the Let type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Let{}

// Let Bind a value to a name within the scope of a sub-contract.
type Let struct {
	Be Value `json:"be"`
	Let string `json:"let"`
	Then Contract `json:"then"`
}

// NewLet instantiates a new Let object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLet(be Value, let string, then Contract) *Let {
	this := Let{}
	this.Be = be
	this.Let = let
	this.Then = then
	return &this
}

// NewLetWithDefaults instantiates a new Let object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLetWithDefaults() *Let {
	this := Let{}
	return &this
}

// GetBe returns the Be field value
func (o *Let) GetBe() Value {
	if o == nil {
		var ret Value
		return ret
	}

	return o.Be
}

// GetBeOk returns a tuple with the Be field value
// and a boolean to check if the value has been set.
func (o *Let) GetBeOk() (*Value, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Be, true
}

// SetBe sets field value
func (o *Let) SetBe(v Value) {
	o.Be = v
}

// GetLet returns the Let field value
func (o *Let) GetLet() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Let
}

// GetLetOk returns a tuple with the Let field value
// and a boolean to check if the value has been set.
func (o *Let) GetLetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Let, true
}

// SetLet sets field value
func (o *Let) SetLet(v string) {
	o.Let = v
}

// GetThen returns the Then field value
func (o *Let) GetThen() Contract {
	if o == nil {
		var ret Contract
		return ret
	}

	return o.Then
}

// GetThenOk returns a tuple with the Then field value
// and a boolean to check if the value has been set.
func (o *Let) GetThenOk() (*Contract, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Then, true
}

// SetThen sets field value
func (o *Let) SetThen(v Contract) {
	o.Then = v
}

func (o Let) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Let) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["be"] = o.Be
	toSerialize["let"] = o.Let
	toSerialize["then"] = o.Then
	return toSerialize, nil
}

type NullableLet struct {
	value *Let
	isSet bool
}

func (v NullableLet) Get() *Let {
	return v.value
}

func (v *NullableLet) Set(val *Let) {
	v.value = val
	v.isSet = true
}

func (v NullableLet) IsSet() bool {
	return v.isSet
}

func (v *NullableLet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLet(val *Let) *NullableLet {
	return &NullableLet{value: val, isSet: true}
}

func (v NullableLet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


