/*
Marlowe Runtime REST API

REST API for Marlowe Runtime

API version: 0.0.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marloweruntime

import (
	"encoding/json"
)

// checks if the MetadataAndRecipients type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetadataAndRecipients{}

// MetadataAndRecipients struct for MetadataAndRecipients
type MetadataAndRecipients struct {
	Metadata *TokenMetadata `json:"metadata,omitempty"`
	Recipients map[string]int64 `json:"recipients"`
}

// NewMetadataAndRecipients instantiates a new MetadataAndRecipients object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetadataAndRecipients(recipients map[string]int64) *MetadataAndRecipients {
	this := MetadataAndRecipients{}
	this.Recipients = recipients
	return &this
}

// NewMetadataAndRecipientsWithDefaults instantiates a new MetadataAndRecipients object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetadataAndRecipientsWithDefaults() *MetadataAndRecipients {
	this := MetadataAndRecipients{}
	return &this
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *MetadataAndRecipients) GetMetadata() TokenMetadata {
	if o == nil || IsNil(o.Metadata) {
		var ret TokenMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataAndRecipients) GetMetadataOk() (*TokenMetadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *MetadataAndRecipients) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given TokenMetadata and assigns it to the Metadata field.
func (o *MetadataAndRecipients) SetMetadata(v TokenMetadata) {
	o.Metadata = &v
}

// GetRecipients returns the Recipients field value
func (o *MetadataAndRecipients) GetRecipients() map[string]int64 {
	if o == nil {
		var ret map[string]int64
		return ret
	}

	return o.Recipients
}

// GetRecipientsOk returns a tuple with the Recipients field value
// and a boolean to check if the value has been set.
func (o *MetadataAndRecipients) GetRecipientsOk() (*map[string]int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Recipients, true
}

// SetRecipients sets field value
func (o *MetadataAndRecipients) SetRecipients(v map[string]int64) {
	o.Recipients = v
}

func (o MetadataAndRecipients) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetadataAndRecipients) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	toSerialize["recipients"] = o.Recipients
	return toSerialize, nil
}

type NullableMetadataAndRecipients struct {
	value *MetadataAndRecipients
	isSet bool
}

func (v NullableMetadataAndRecipients) Get() *MetadataAndRecipients {
	return v.value
}

func (v *NullableMetadataAndRecipients) Set(val *MetadataAndRecipients) {
	v.value = val
	v.isSet = true
}

func (v NullableMetadataAndRecipients) IsSet() bool {
	return v.isSet
}

func (v *NullableMetadataAndRecipients) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetadataAndRecipients(val *MetadataAndRecipients) *NullableMetadataAndRecipients {
	return &NullableMetadataAndRecipients{value: val, isSet: true}
}

func (v NullableMetadataAndRecipients) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetadataAndRecipients) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


