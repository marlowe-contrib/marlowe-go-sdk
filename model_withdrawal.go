/*
Marlowe Runtime REST API

REST API for Marlowe Runtime

API version: 0.0.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marloweruntime

import (
	"encoding/json"
)

// checks if the Withdrawal type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Withdrawal{}

// Withdrawal struct for Withdrawal
type Withdrawal struct {
	Block *BlockHeader `json:"block,omitempty"`
	Payouts []PayoutHeader `json:"payouts"`
	Status TxStatus `json:"status"`
	// The hex-encoded identifier of a Cardano transaction
	WithdrawalId string `json:"withdrawalId"`
}

// NewWithdrawal instantiates a new Withdrawal object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWithdrawal(payouts []PayoutHeader, status TxStatus, withdrawalId string) *Withdrawal {
	this := Withdrawal{}
	this.Payouts = payouts
	this.Status = status
	this.WithdrawalId = withdrawalId
	return &this
}

// NewWithdrawalWithDefaults instantiates a new Withdrawal object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWithdrawalWithDefaults() *Withdrawal {
	this := Withdrawal{}
	return &this
}

// GetBlock returns the Block field value if set, zero value otherwise.
func (o *Withdrawal) GetBlock() BlockHeader {
	if o == nil || IsNil(o.Block) {
		var ret BlockHeader
		return ret
	}
	return *o.Block
}

// GetBlockOk returns a tuple with the Block field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Withdrawal) GetBlockOk() (*BlockHeader, bool) {
	if o == nil || IsNil(o.Block) {
		return nil, false
	}
	return o.Block, true
}

// HasBlock returns a boolean if a field has been set.
func (o *Withdrawal) HasBlock() bool {
	if o != nil && !IsNil(o.Block) {
		return true
	}

	return false
}

// SetBlock gets a reference to the given BlockHeader and assigns it to the Block field.
func (o *Withdrawal) SetBlock(v BlockHeader) {
	o.Block = &v
}

// GetPayouts returns the Payouts field value
func (o *Withdrawal) GetPayouts() []PayoutHeader {
	if o == nil {
		var ret []PayoutHeader
		return ret
	}

	return o.Payouts
}

// GetPayoutsOk returns a tuple with the Payouts field value
// and a boolean to check if the value has been set.
func (o *Withdrawal) GetPayoutsOk() ([]PayoutHeader, bool) {
	if o == nil {
		return nil, false
	}
	return o.Payouts, true
}

// SetPayouts sets field value
func (o *Withdrawal) SetPayouts(v []PayoutHeader) {
	o.Payouts = v
}

// GetStatus returns the Status field value
func (o *Withdrawal) GetStatus() TxStatus {
	if o == nil {
		var ret TxStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Withdrawal) GetStatusOk() (*TxStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Withdrawal) SetStatus(v TxStatus) {
	o.Status = v
}

// GetWithdrawalId returns the WithdrawalId field value
func (o *Withdrawal) GetWithdrawalId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WithdrawalId
}

// GetWithdrawalIdOk returns a tuple with the WithdrawalId field value
// and a boolean to check if the value has been set.
func (o *Withdrawal) GetWithdrawalIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WithdrawalId, true
}

// SetWithdrawalId sets field value
func (o *Withdrawal) SetWithdrawalId(v string) {
	o.WithdrawalId = v
}

func (o Withdrawal) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Withdrawal) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Block) {
		toSerialize["block"] = o.Block
	}
	toSerialize["payouts"] = o.Payouts
	toSerialize["status"] = o.Status
	toSerialize["withdrawalId"] = o.WithdrawalId
	return toSerialize, nil
}

type NullableWithdrawal struct {
	value *Withdrawal
	isSet bool
}

func (v NullableWithdrawal) Get() *Withdrawal {
	return v.value
}

func (v *NullableWithdrawal) Set(val *Withdrawal) {
	v.value = val
	v.isSet = true
}

func (v NullableWithdrawal) IsSet() bool {
	return v.isSet
}

func (v *NullableWithdrawal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWithdrawal(val *Withdrawal) *NullableWithdrawal {
	return &NullableWithdrawal{value: val, isSet: true}
}

func (v NullableWithdrawal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWithdrawal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


