/*
Marlowe Runtime REST API

REST API for Marlowe Runtime

API version: 0.0.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marloweruntime

import (
	"encoding/json"
)

// checks if the AddressAndMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddressAndMetadata{}

// AddressAndMetadata struct for AddressAndMetadata
type AddressAndMetadata struct {
	// A cardano address, in Bech32 format
	Address string `json:"address"`
	Metadata *TokenMetadata `json:"metadata,omitempty"`
}

// NewAddressAndMetadata instantiates a new AddressAndMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddressAndMetadata(address string) *AddressAndMetadata {
	this := AddressAndMetadata{}
	this.Address = address
	return &this
}

// NewAddressAndMetadataWithDefaults instantiates a new AddressAndMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddressAndMetadataWithDefaults() *AddressAndMetadata {
	this := AddressAndMetadata{}
	return &this
}

// GetAddress returns the Address field value
func (o *AddressAndMetadata) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *AddressAndMetadata) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *AddressAndMetadata) SetAddress(v string) {
	o.Address = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *AddressAndMetadata) GetMetadata() TokenMetadata {
	if o == nil || IsNil(o.Metadata) {
		var ret TokenMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressAndMetadata) GetMetadataOk() (*TokenMetadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *AddressAndMetadata) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given TokenMetadata and assigns it to the Metadata field.
func (o *AddressAndMetadata) SetMetadata(v TokenMetadata) {
	o.Metadata = &v
}

func (o AddressAndMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddressAndMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["address"] = o.Address
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	return toSerialize, nil
}

type NullableAddressAndMetadata struct {
	value *AddressAndMetadata
	isSet bool
}

func (v NullableAddressAndMetadata) Get() *AddressAndMetadata {
	return v.value
}

func (v *NullableAddressAndMetadata) Set(val *AddressAndMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableAddressAndMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableAddressAndMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddressAndMetadata(val *AddressAndMetadata) *NullableAddressAndMetadata {
	return &NullableAddressAndMetadata{value: val, isSet: true}
}

func (v NullableAddressAndMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddressAndMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


