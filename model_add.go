/*
Marlowe Runtime REST API

REST API for Marlowe Runtime

API version: 0.0.5.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marloweruntime

import (
	"encoding/json"
)

// checks if the Add type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Add{}

// Add struct for Add
type Add struct {
	Add Value `json:"add"`
	And Value `json:"and"`
}

// NewAdd instantiates a new Add object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdd(add Value, and Value) *Add {
	this := Add{}
	this.Add = add
	this.And = and
	return &this
}

// NewAddWithDefaults instantiates a new Add object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddWithDefaults() *Add {
	this := Add{}
	return &this
}

// GetAdd returns the Add field value
func (o *Add) GetAdd() Value {
	if o == nil {
		var ret Value
		return ret
	}

	return o.Add
}

// GetAddOk returns a tuple with the Add field value
// and a boolean to check if the value has been set.
func (o *Add) GetAddOk() (*Value, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Add, true
}

// SetAdd sets field value
func (o *Add) SetAdd(v Value) {
	o.Add = v
}

// GetAnd returns the And field value
func (o *Add) GetAnd() Value {
	if o == nil {
		var ret Value
		return ret
	}

	return o.And
}

// GetAndOk returns a tuple with the And field value
// and a boolean to check if the value has been set.
func (o *Add) GetAndOk() (*Value, bool) {
	if o == nil {
		return nil, false
	}
	return &o.And, true
}

// SetAnd sets field value
func (o *Add) SetAnd(v Value) {
	o.And = v
}

func (o Add) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Add) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["add"] = o.Add
	toSerialize["and"] = o.And
	return toSerialize, nil
}

type NullableAdd struct {
	value *Add
	isSet bool
}

func (v NullableAdd) Get() *Add {
	return v.value
}

func (v *NullableAdd) Set(val *Add) {
	v.value = val
	v.isSet = true
}

func (v NullableAdd) IsSet() bool {
	return v.isSet
}

func (v *NullableAdd) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdd(val *Add) *NullableAdd {
	return &NullableAdd{value: val, isSet: true}
}

func (v NullableAdd) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdd) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


